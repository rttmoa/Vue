[
    {
        "id": "b256984b2a814225",
        "type": "tab",
        "label": "ERP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bf5593c3c002083d",
        "type": "tab",
        "label": "测试代码",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7497f7881f1d0d2c",
        "type": "tab",
        "label": "router 路由测试",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1df737e430730fca",
        "type": "tab",
        "label": "WCS入库",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5c9174e7d3aba08",
        "type": "tab",
        "label": "WCS出库-配餐",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a7e5c0a63010b121",
        "type": "tab",
        "label": "部署工控机",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d119a8eb06199d8b",
        "type": "tab",
        "label": "堆垛机处理",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "728aa853114bba39",
        "type": "tab",
        "label": "堆垛机完成",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56c65c5ed4298456",
        "type": "tab",
        "label": "一些定时器",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b401c580bd65205",
        "type": "steedos-config",
        "name": "steedos",
        "transporter": "redis://127.0.0.1:6379",
        "namespace": "steedos-project-template",
        "options": "{}",
        "optionsType": "json"
    },
    {
        "id": "a7ad80b7bd59726f",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.0.12",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1500",
        "timeout": "200000",
        "name": "输送线",
        "vartable": [
            {
                "addr": "DB50,W0",
                "name": "1000_loc1"
            },
            {
                "addr": "DB50,W2",
                "name": "1000_addr2"
            },
            {
                "addr": "DB50,W4",
                "name": "1000_stag3"
            },
            {
                "addr": "DB50,W6",
                "name": "1000_mark4"
            },
            {
                "addr": "DB50,W8",
                "name": "1000_return5"
            },
            {
                "addr": "DB50,W10",
                "name": "1000_reply6"
            },
            {
                "addr": "DB50,S14.6",
                "name": "1000_taskno7"
            },
            {
                "addr": "DB50,S22.5",
                "name": "1000_palletno8"
            },
            {
                "addr": "DB50,W30",
                "name": "1001_loc1"
            },
            {
                "addr": "DB50,W32",
                "name": "1001_addr2"
            },
            {
                "addr": "DB50,W34",
                "name": "1001_stag3"
            },
            {
                "addr": "DB50,W36",
                "name": "1001_mark4"
            },
            {
                "addr": "DB50,W38",
                "name": "1001_return5"
            },
            {
                "addr": "DB50,W40",
                "name": "1001_reply6"
            },
            {
                "addr": "DB50,S44.6",
                "name": "1001_taskno7"
            },
            {
                "addr": "DB50,S52.5",
                "name": "1001_palletno8"
            },
            {
                "addr": "DB50,W60",
                "name": "1002_loc1"
            },
            {
                "addr": "DB50,W62",
                "name": "1002_addr2"
            },
            {
                "addr": "DB50,W64",
                "name": "1002_stag3"
            },
            {
                "addr": "DB50,W66",
                "name": "1002_mark4"
            },
            {
                "addr": "DB50,W68",
                "name": "1002_return5"
            },
            {
                "addr": "DB50,W70",
                "name": "1002_reply6"
            },
            {
                "addr": "DB50,S74.6",
                "name": "1002_taskno7"
            },
            {
                "addr": "DB50,S82.5",
                "name": "1002_palletno8"
            },
            {
                "addr": "DB50,W90",
                "name": "1003_loc1"
            },
            {
                "addr": "DB50,W92",
                "name": "1003_addr2"
            },
            {
                "addr": "DB50,W94",
                "name": "1003_stag3"
            },
            {
                "addr": "DB50,W96",
                "name": "1003_mark4"
            },
            {
                "addr": "DB50,W98",
                "name": "1003_return5"
            },
            {
                "addr": "DB50,W100",
                "name": "1003_reply6"
            },
            {
                "addr": "DB50,S104.6",
                "name": "1003_taskno7"
            },
            {
                "addr": "DB50,S112.5",
                "name": "1003_palletno8"
            },
            {
                "addr": "DB50,W120",
                "name": "1004_loc1"
            },
            {
                "addr": "DB50,W122",
                "name": "1004_addr2"
            },
            {
                "addr": "DB50,W124",
                "name": "1004_stag3"
            },
            {
                "addr": "DB50,W126",
                "name": "1004_mark4"
            },
            {
                "addr": "DB50,W128",
                "name": "1004_return5"
            },
            {
                "addr": "DB50,W130",
                "name": "1004_reply6"
            },
            {
                "addr": "DB50,S134.6",
                "name": "1004_taskno7"
            },
            {
                "addr": "DB50,S142.5",
                "name": "1004_palletno8"
            },
            {
                "addr": "DB50,W150",
                "name": "1005_loc1"
            },
            {
                "addr": "DB50,W152",
                "name": "1005_addr2"
            },
            {
                "addr": "DB50,W154",
                "name": "1005_stag3"
            },
            {
                "addr": "DB50,W156",
                "name": "1005_mark4"
            },
            {
                "addr": "DB50,W158",
                "name": "1005_return5"
            },
            {
                "addr": "DB50,W160",
                "name": "1005_reply6"
            },
            {
                "addr": "DB50,S164.6",
                "name": "1005_taskno7"
            },
            {
                "addr": "DB50,S172.5",
                "name": "1005_palletno8"
            },
            {
                "addr": "DB50,W180",
                "name": "1006_loc1"
            },
            {
                "addr": "DB50,W182",
                "name": "1006_addr2"
            },
            {
                "addr": "DB50,W184",
                "name": "1006_stag3"
            },
            {
                "addr": "DB50,W186",
                "name": "1006_mark4"
            },
            {
                "addr": "DB50,W188",
                "name": "1006_return5"
            },
            {
                "addr": "DB50,W190",
                "name": "1006_reply6"
            },
            {
                "addr": "DB50,S194.6",
                "name": "1006_taskno7"
            },
            {
                "addr": "DB50,S202.5",
                "name": "1006_palletno8"
            },
            {
                "addr": "DB50,W210",
                "name": "1007_loc1"
            },
            {
                "addr": "DB50,W212",
                "name": "1007_addr2"
            },
            {
                "addr": "DB50,W214",
                "name": "1007_stag3"
            },
            {
                "addr": "DB50,W216",
                "name": "1007_mark4"
            },
            {
                "addr": "DB50,W218",
                "name": "1007_return5"
            },
            {
                "addr": "DB50,W220",
                "name": "1007_reply6"
            },
            {
                "addr": "DB50,S224.6",
                "name": "1007_taskno7"
            },
            {
                "addr": "DB50,S232.5",
                "name": "1007_palletno8"
            },
            {
                "addr": "DB50,W240",
                "name": "1008_loc1"
            },
            {
                "addr": "DB50,W242",
                "name": "1008_addr2"
            },
            {
                "addr": "DB50,W244",
                "name": "1008_stag3"
            },
            {
                "addr": "DB50,W246",
                "name": "1008_mark4"
            },
            {
                "addr": "DB50,W248",
                "name": "1008_return5"
            },
            {
                "addr": "DB50,W250",
                "name": "1008_reply6"
            },
            {
                "addr": "DB50,S254.6",
                "name": "1008_taskno7"
            },
            {
                "addr": "DB50,S262.5",
                "name": "1008_palletno8"
            },
            {
                "addr": "DB50,W270",
                "name": "1009_loc1"
            },
            {
                "addr": "DB50,W272",
                "name": "1009_addr2"
            },
            {
                "addr": "DB50,W274",
                "name": "1009_stag3"
            },
            {
                "addr": "DB50,W276",
                "name": "1009_mark4"
            },
            {
                "addr": "DB50,W278",
                "name": "1009_return5"
            },
            {
                "addr": "DB50,W280",
                "name": "1009_reply6"
            },
            {
                "addr": "DB50,S284.6",
                "name": "1009_taskno7"
            },
            {
                "addr": "DB50,S292.5",
                "name": "1009_palletno8"
            },
            {
                "addr": "DB50,W300",
                "name": "1010_loc1"
            },
            {
                "addr": "DB50,W302",
                "name": "1010_addr2"
            },
            {
                "addr": "DB50,W304",
                "name": "1010_stag3"
            },
            {
                "addr": "DB50,W306",
                "name": "1010_mark4"
            },
            {
                "addr": "DB50,W308",
                "name": "1010_return5"
            },
            {
                "addr": "DB50,W310",
                "name": "1010_reply6"
            },
            {
                "addr": "DB50,S314.6",
                "name": "1010_taskno7"
            },
            {
                "addr": "DB50,S322.5",
                "name": "1010_palletno8"
            },
            {
                "addr": "DB50,W330",
                "name": "1011_loc1"
            },
            {
                "addr": "DB50,W332",
                "name": "1011_addr2"
            },
            {
                "addr": "DB50,W334",
                "name": "1011_stag3"
            },
            {
                "addr": "DB50,W336",
                "name": "1011_mark4"
            },
            {
                "addr": "DB50,W338",
                "name": "1011_return5"
            },
            {
                "addr": "DB50,W340",
                "name": "1011_reply6"
            },
            {
                "addr": "DB50,S344.6",
                "name": "1011_taskno7"
            },
            {
                "addr": "DB50,S352.5",
                "name": "1011_palletno8"
            },
            {
                "addr": "DB50,W360",
                "name": "1012_loc1"
            },
            {
                "addr": "DB50,W362",
                "name": "1012_addr2"
            },
            {
                "addr": "DB50,W364",
                "name": "1012_stag3"
            },
            {
                "addr": "DB50,W366",
                "name": "1012_mark4"
            },
            {
                "addr": "DB50,W368",
                "name": "1012_return5"
            },
            {
                "addr": "DB50,W370",
                "name": "1012_reply6"
            },
            {
                "addr": "DB50,S374.6",
                "name": "1012_taskno7"
            },
            {
                "addr": "DB50,S382.5",
                "name": "1012_palletno8"
            },
            {
                "addr": "DB50,W390",
                "name": "1013_loc1"
            },
            {
                "addr": "DB50,W392",
                "name": "1013_addr2"
            },
            {
                "addr": "DB50,W394",
                "name": "1013_stag3"
            },
            {
                "addr": "DB50,W396",
                "name": "1013_mark4"
            },
            {
                "addr": "DB50,W398",
                "name": "1013_return5"
            },
            {
                "addr": "DB50,W400",
                "name": "1013_reply6"
            },
            {
                "addr": "DB50,S404.6",
                "name": "1013_taskno7"
            },
            {
                "addr": "DB50,S412.5",
                "name": "1013_palletno8"
            },
            {
                "addr": "DB50,W420",
                "name": "1014_loc1"
            },
            {
                "addr": "DB50,W422",
                "name": "1014_addr2"
            },
            {
                "addr": "DB50,W424",
                "name": "1014_stag3"
            },
            {
                "addr": "DB50,W426",
                "name": "1014_mark4"
            },
            {
                "addr": "DB50,W428",
                "name": "1014_return5"
            },
            {
                "addr": "DB50,W430",
                "name": "1014_reply6"
            },
            {
                "addr": "DB50,S434.6",
                "name": "1014_taskno7"
            },
            {
                "addr": "DB50,S442.5",
                "name": "1014_palletno8"
            },
            {
                "addr": "DB50,W450",
                "name": "1015_loc1"
            },
            {
                "addr": "DB50,W452",
                "name": "1015_addr2"
            },
            {
                "addr": "DB50,W454",
                "name": "1015_stag3"
            },
            {
                "addr": "DB50,W456",
                "name": "1015_mark4"
            },
            {
                "addr": "DB50,W458",
                "name": "1015_return5"
            },
            {
                "addr": "DB50,W460",
                "name": "1015_reply6"
            },
            {
                "addr": "DB50,S464.6",
                "name": "1015_taskno7"
            },
            {
                "addr": "DB50,S472.5",
                "name": "1015_palletno8"
            },
            {
                "addr": "DB50,W480",
                "name": "1016_loc1"
            },
            {
                "addr": "DB50,W482",
                "name": "1016_addr2"
            },
            {
                "addr": "DB50,W484",
                "name": "1016_stag3"
            },
            {
                "addr": "DB50,W486",
                "name": "1016_mark4"
            },
            {
                "addr": "DB50,W488",
                "name": "1016_return5"
            },
            {
                "addr": "DB50,W490",
                "name": "1016_reply6"
            },
            {
                "addr": "DB50,S494.6",
                "name": "1016_taskno7"
            },
            {
                "addr": "DB50,S502.5",
                "name": "1016_palletno8"
            },
            {
                "addr": "DB50,W510",
                "name": "1017_loc1"
            },
            {
                "addr": "DB50,W512",
                "name": "1017_addr2"
            },
            {
                "addr": "DB50,W514",
                "name": "1017_stag3"
            },
            {
                "addr": "DB50,W516",
                "name": "1017_mark4"
            },
            {
                "addr": "DB50,W518",
                "name": "1017_return5"
            },
            {
                "addr": "DB50,W520",
                "name": "1017_reply6"
            },
            {
                "addr": "DB50,S524.6",
                "name": "1017_taskno7"
            },
            {
                "addr": "DB50,S532.5",
                "name": "1017_palletno8"
            },
            {
                "addr": "DB50,W540",
                "name": "1018_loc1"
            },
            {
                "addr": "DB50,W542",
                "name": "1018_addr2"
            },
            {
                "addr": "DB50,W544",
                "name": "1018_stag3"
            },
            {
                "addr": "DB50,W546",
                "name": "1018_mark4"
            },
            {
                "addr": "DB50,W548",
                "name": "1018_return5"
            },
            {
                "addr": "DB50,W550",
                "name": "1018_reply6"
            },
            {
                "addr": "DB50,S554.6",
                "name": "1018_taskno7"
            },
            {
                "addr": "DB50,S562.5",
                "name": "1018_palletno8"
            },
            {
                "addr": "DB50,W570",
                "name": "1019_loc1"
            },
            {
                "addr": "DB50,W572",
                "name": "1019_addr2"
            },
            {
                "addr": "DB50,W574",
                "name": "1019_stag3"
            },
            {
                "addr": "DB50,W576",
                "name": "1019_mark4"
            },
            {
                "addr": "DB50,W578",
                "name": "1019_return5"
            },
            {
                "addr": "DB50,W580",
                "name": "1019_reply6"
            },
            {
                "addr": "DB50,S584.6",
                "name": "1019_taskno7"
            },
            {
                "addr": "DB50,S592.5",
                "name": "1019_palletno8"
            },
            {
                "addr": "DB50,W600",
                "name": "1020_loc1"
            },
            {
                "addr": "DB50,W602",
                "name": "1020_addr2"
            },
            {
                "addr": "DB50,W604",
                "name": "1020_stag3"
            },
            {
                "addr": "DB50,W606",
                "name": "1020_mark4"
            },
            {
                "addr": "DB50,W608",
                "name": "1020_return5"
            },
            {
                "addr": "DB50,W610",
                "name": "1020_reply6"
            },
            {
                "addr": "DB50,S614.6",
                "name": "1020_taskno7"
            },
            {
                "addr": "DB50,S622.5",
                "name": "1020_palletno8"
            },
            {
                "addr": "DB50,W630",
                "name": "1021_loc1"
            },
            {
                "addr": "DB50,W632",
                "name": "1021_addr2"
            },
            {
                "addr": "DB50,W634",
                "name": "1021_stag3"
            },
            {
                "addr": "DB50,W636",
                "name": "1021_mark4"
            },
            {
                "addr": "DB50,W638",
                "name": "1021_return5"
            },
            {
                "addr": "DB50,W640",
                "name": "1021_reply6"
            },
            {
                "addr": "DB50,S644.6",
                "name": "1021_taskno7"
            },
            {
                "addr": "DB50,S652.5",
                "name": "1021_palletno8"
            },
            {
                "addr": "DB50,W660",
                "name": "1022_loc1"
            },
            {
                "addr": "DB50,W662",
                "name": "1022_addr2"
            },
            {
                "addr": "DB50,W664",
                "name": "1022_stag3"
            },
            {
                "addr": "DB50,W666",
                "name": "1022_mark4"
            },
            {
                "addr": "DB50,W668",
                "name": "1022_return5"
            },
            {
                "addr": "DB50,W670",
                "name": "1022_reply6"
            },
            {
                "addr": "DB50,S674.6",
                "name": "1022_taskno7"
            },
            {
                "addr": "DB50,S682.5",
                "name": "1022_palletno8"
            },
            {
                "addr": "DB50,W690",
                "name": "1023_loc1"
            },
            {
                "addr": "DB50,W692",
                "name": "1023_addr2"
            },
            {
                "addr": "DB50,W694",
                "name": "1023_stag3"
            },
            {
                "addr": "DB50,W696",
                "name": "1023_mark4"
            },
            {
                "addr": "DB50,W698",
                "name": "1023_return5"
            },
            {
                "addr": "DB50,W700",
                "name": "1023_reply6"
            },
            {
                "addr": "DB50,S704.6",
                "name": "1023_taskno7"
            },
            {
                "addr": "DB50,S712.5",
                "name": "1023_palletno8"
            },
            {
                "addr": "DB50,W720",
                "name": "1024_loc1"
            },
            {
                "addr": "DB50,W722",
                "name": "1024_addr2"
            },
            {
                "addr": "DB50,W724",
                "name": "1024_stag3"
            },
            {
                "addr": "DB50,W726",
                "name": "1024_mark4"
            },
            {
                "addr": "DB50,W728",
                "name": "1024_return5"
            },
            {
                "addr": "DB50,W730",
                "name": "1024_reply6"
            },
            {
                "addr": "DB50,S734.6",
                "name": "1024_taskno7"
            },
            {
                "addr": "DB50,S742.5",
                "name": "1024_palletno8"
            },
            {
                "addr": "DB50,W750",
                "name": "1025_loc1"
            },
            {
                "addr": "DB50,W752",
                "name": "1025_addr2"
            },
            {
                "addr": "DB50,W754",
                "name": "1025_stag3"
            },
            {
                "addr": "DB50,W756",
                "name": "1025_mark4"
            },
            {
                "addr": "DB50,W758",
                "name": "1025_return5"
            },
            {
                "addr": "DB50,W760",
                "name": "1025_reply6"
            },
            {
                "addr": "DB50,S764.6",
                "name": "1025_taskno7"
            },
            {
                "addr": "DB50,S772.5",
                "name": "1025_palletno8"
            },
            {
                "addr": "DB50,W780",
                "name": "1026_loc1"
            },
            {
                "addr": "DB50,W782",
                "name": "1026_addr2"
            },
            {
                "addr": "DB50,W784",
                "name": "1026_stag3"
            },
            {
                "addr": "DB50,W786",
                "name": "1026_mark4"
            },
            {
                "addr": "DB50,W788",
                "name": "1026_return5"
            },
            {
                "addr": "DB50,W790",
                "name": "1026_reply6"
            },
            {
                "addr": "DB50,S794.6",
                "name": "1026_taskno7"
            },
            {
                "addr": "DB50,S802.5",
                "name": "1026_palletno8"
            },
            {
                "addr": "DB50,W810",
                "name": "1027_loc1"
            },
            {
                "addr": "DB50,W812",
                "name": "1027_addr2"
            },
            {
                "addr": "DB50,W814",
                "name": "1027_stag3"
            },
            {
                "addr": "DB50,W816",
                "name": "1027_mark4"
            },
            {
                "addr": "DB50,W818",
                "name": "1027_return5"
            },
            {
                "addr": "DB50,W820",
                "name": "1027_reply6"
            },
            {
                "addr": "DB50,S824.6",
                "name": "1027_taskno7"
            },
            {
                "addr": "DB50,S832.5",
                "name": "1027_palletno8"
            },
            {
                "addr": "DB50,W840",
                "name": "1028_loc1"
            },
            {
                "addr": "DB50,W842",
                "name": "1028_addr2"
            },
            {
                "addr": "DB50,W844",
                "name": "1028_stag3"
            },
            {
                "addr": "DB50,W846",
                "name": "1028_mark4"
            },
            {
                "addr": "DB50,W848",
                "name": "1028_return5"
            },
            {
                "addr": "DB50,W850",
                "name": "1028_reply6"
            },
            {
                "addr": "DB50,S854.6",
                "name": "1028_taskno7"
            },
            {
                "addr": "DB50,S862.5",
                "name": "1028_palletno8"
            },
            {
                "addr": "DB50,W870",
                "name": "1029_loc1"
            },
            {
                "addr": "DB50,W872",
                "name": "1029_addr2"
            },
            {
                "addr": "DB50,W874",
                "name": "1029_stag3"
            },
            {
                "addr": "DB50,W876",
                "name": "1029_mark4"
            },
            {
                "addr": "DB50,W878",
                "name": "1029_return5"
            },
            {
                "addr": "DB50,W880",
                "name": "1029_reply6"
            },
            {
                "addr": "DB50,S884.6",
                "name": "1029_taskno7"
            },
            {
                "addr": "DB50,S892.5",
                "name": "1029_palletno8"
            },
            {
                "addr": "DB50,W900",
                "name": "1030_loc1"
            },
            {
                "addr": "DB50,W902",
                "name": "1030_addr2"
            },
            {
                "addr": "DB50,W904",
                "name": "1030_stag3"
            },
            {
                "addr": "DB50,W906",
                "name": "1030_mark4"
            },
            {
                "addr": "DB50,W908",
                "name": "1030_return5"
            },
            {
                "addr": "DB50,W910",
                "name": "1030_reply6"
            },
            {
                "addr": "DB50,S914.6",
                "name": "1030_taskno7"
            },
            {
                "addr": "DB50,S922.5",
                "name": "1030_palletno8"
            },
            {
                "addr": "DB50,W930",
                "name": "1031_loc1"
            },
            {
                "addr": "DB50,W932",
                "name": "1031_addr2"
            },
            {
                "addr": "DB50,W934",
                "name": "1031_stag3"
            },
            {
                "addr": "DB50,W936",
                "name": "1031_mark4"
            },
            {
                "addr": "DB50,W938",
                "name": "1031_return5"
            },
            {
                "addr": "DB50,W940",
                "name": "1031_reply6"
            },
            {
                "addr": "DB50,S944.6",
                "name": "1031_taskno7"
            },
            {
                "addr": "DB50,S952.5",
                "name": "1031_palletno8"
            },
            {
                "addr": "DB50,W960",
                "name": "1032_loc1"
            },
            {
                "addr": "DB50,W962",
                "name": "1032_addr2"
            },
            {
                "addr": "DB50,W964",
                "name": "1032_stag3"
            },
            {
                "addr": "DB50,W966",
                "name": "1032_mark4"
            },
            {
                "addr": "DB50,W968",
                "name": "1032_return5"
            },
            {
                "addr": "DB50,W970",
                "name": "1032_reply6"
            },
            {
                "addr": "DB50,S974.6",
                "name": "1032_taskno7"
            },
            {
                "addr": "DB50,S982.5",
                "name": "1032_palletno8"
            },
            {
                "addr": "DB50,W990",
                "name": "1033_loc1"
            },
            {
                "addr": "DB50,W992",
                "name": "1033_addr2"
            },
            {
                "addr": "DB50,W994",
                "name": "1033_stag3"
            },
            {
                "addr": "DB50,W996",
                "name": "1033_mark4"
            },
            {
                "addr": "DB50,W998",
                "name": "1033_return5"
            },
            {
                "addr": "DB50,W1000",
                "name": "1033_reply6"
            },
            {
                "addr": "DB50,S1004.6",
                "name": "1033_taskno7"
            },
            {
                "addr": "DB50,S1012.5",
                "name": "1033_palletno8"
            },
            {
                "addr": "DB50,W1020",
                "name": "1034_loc1"
            },
            {
                "addr": "DB50,W1022",
                "name": "1034_addr2"
            },
            {
                "addr": "DB50,W1024",
                "name": "1034_stag3"
            },
            {
                "addr": "DB50,W1026",
                "name": "1034_mark4"
            },
            {
                "addr": "DB50,W1028",
                "name": "1034_return5"
            },
            {
                "addr": "DB50,W1030",
                "name": "1034_reply6"
            },
            {
                "addr": "DB50,S1034.6",
                "name": "1034_taskno7"
            },
            {
                "addr": "DB50,S1042.5",
                "name": "1034_palletno8"
            },
            {
                "addr": "DB50,W1050",
                "name": "1035_loc1"
            },
            {
                "addr": "DB50,W1052",
                "name": "1035_addr2"
            },
            {
                "addr": "DB50,W1054",
                "name": "1035_stag3"
            },
            {
                "addr": "DB50,W1056",
                "name": "1035_mark4"
            },
            {
                "addr": "DB50,W1058",
                "name": "1035_return5"
            },
            {
                "addr": "DB50,W1060",
                "name": "1035_reply6"
            },
            {
                "addr": "DB50,S1064.6",
                "name": "1035_taskno7"
            },
            {
                "addr": "DB50,S1072.5",
                "name": "1035_palletno8"
            },
            {
                "addr": "DB50,W1080",
                "name": "1036_loc1"
            },
            {
                "addr": "DB50,W1082",
                "name": "1036_addr2"
            },
            {
                "addr": "DB50,W1084",
                "name": "1036_stag3"
            },
            {
                "addr": "DB50,W1086",
                "name": "1036_mark4"
            },
            {
                "addr": "DB50,W1088",
                "name": "1036_return5"
            },
            {
                "addr": "DB50,W1090",
                "name": "1036_reply6"
            },
            {
                "addr": "DB50,S1094.6",
                "name": "1036_taskno7"
            },
            {
                "addr": "DB50,S1102.5",
                "name": "1036_palletno8"
            },
            {
                "addr": "DB50,W1110",
                "name": "1037_loc1"
            },
            {
                "addr": "DB50,W1112",
                "name": "1037_addr2"
            },
            {
                "addr": "DB50,W1114",
                "name": "1037_stag3"
            },
            {
                "addr": "DB50,W1116",
                "name": "1037_mark4"
            },
            {
                "addr": "DB50,W1118",
                "name": "1037_return5"
            },
            {
                "addr": "DB50,W1120",
                "name": "1037_reply6"
            },
            {
                "addr": "DB50,S1124.6",
                "name": "1037_taskno7"
            },
            {
                "addr": "DB50,S1132.5",
                "name": "1037_palletno8"
            },
            {
                "addr": "DB50,W1140",
                "name": "1038_loc1"
            },
            {
                "addr": "DB50,W1142",
                "name": "1038_addr2"
            },
            {
                "addr": "DB50,W1144",
                "name": "1038_stag3"
            },
            {
                "addr": "DB50,W1146",
                "name": "1038_mark4"
            },
            {
                "addr": "DB50,W1148",
                "name": "1038_return5"
            },
            {
                "addr": "DB50,W1150",
                "name": "1038_reply6"
            },
            {
                "addr": "DB50,S1154.6",
                "name": "1038_taskno7"
            },
            {
                "addr": "DB50,S1162.5",
                "name": "1038_palletno8"
            },
            {
                "addr": "DB50,W1170",
                "name": "1039_loc1"
            },
            {
                "addr": "DB50,W1172",
                "name": "1039_addr2"
            },
            {
                "addr": "DB50,W1174",
                "name": "1039_stag3"
            },
            {
                "addr": "DB50,W1176",
                "name": "1039_mark4"
            },
            {
                "addr": "DB50,W1178",
                "name": "1039_return5"
            },
            {
                "addr": "DB50,W1180",
                "name": "1039_reply6"
            },
            {
                "addr": "DB50,S1184.6",
                "name": "1039_taskno7"
            },
            {
                "addr": "DB50,S1192.5",
                "name": "1039_palletno8"
            },
            {
                "addr": "DB50,W1200",
                "name": "1040_loc1"
            },
            {
                "addr": "DB50,W1202",
                "name": "1040_addr2"
            },
            {
                "addr": "DB50,W1204",
                "name": "1040_stag3"
            },
            {
                "addr": "DB50,W1206",
                "name": "1040_mark4"
            },
            {
                "addr": "DB50,W1208",
                "name": "1040_return5"
            },
            {
                "addr": "DB50,W1210",
                "name": "1040_reply6"
            },
            {
                "addr": "DB50,S1214.6",
                "name": "1040_taskno7"
            },
            {
                "addr": "DB50,S1222.5",
                "name": "1040_palletno8"
            }
        ]
    },
    {
        "id": "f1042790c9a2e62b",
        "type": "steedos-config",
        "name": "steedos",
        "transporter": "redis://127.0.0.1:6379",
        "namespace": "steedos-project-template",
        "options": "{}",
        "optionsType": "json"
    },
    {
        "id": "a92c9e3a5e932e5c",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.0.16",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1500",
        "timeout": "200000",
        "name": "堆垛机",
        "vartable": [
            {
                "addr": "DB100,W0",
                "name": "upperAllow"
            },
            {
                "addr": "DB100,W2",
                "name": "FirstEnterRow"
            },
            {
                "addr": "DB100,W4",
                "name": "FirstEnterLay"
            },
            {
                "addr": "DB100,W6",
                "name": "FirstEnterCol"
            },
            {
                "addr": "DB100,S8.5",
                "name": "FirstEnterBox"
            },
            {
                "addr": "DB100,S16.5",
                "name": "FirstEnterTask"
            },
            {
                "addr": "DB100,W24",
                "name": "SecondEnterRow"
            },
            {
                "addr": "DB100,W26",
                "name": "SecondEnterLay"
            },
            {
                "addr": "DB100,W28",
                "name": "SecondEnterCol"
            },
            {
                "addr": "DB100,S30.5",
                "name": "SecondEnterBox"
            },
            {
                "addr": "DB100,S38.5",
                "name": "SecondEnterTask"
            },
            {
                "addr": "DB100,W46",
                "name": "ThirdEnterRow"
            },
            {
                "addr": "DB100,W48",
                "name": "ThirdEnterLay"
            },
            {
                "addr": "DB100,W50",
                "name": "ThirdEnterCol"
            },
            {
                "addr": "DB100,S52.5",
                "name": "ThirdEnterBox"
            },
            {
                "addr": "DB100,S60.5",
                "name": "ThirdEnterTask"
            },
            {
                "addr": "DB100,W68",
                "name": "EnterNum"
            },
            {
                "addr": "DB100,W70",
                "name": "EnterStart"
            },
            {
                "addr": "DB100,W72",
                "name": "FirstOuterRow"
            },
            {
                "addr": "DB100,W74",
                "name": "FirstOuterLay"
            },
            {
                "addr": "DB100,W76",
                "name": "FirstOuterCol"
            },
            {
                "addr": "DB100,S78.5",
                "name": "FirstOuterBox"
            },
            {
                "addr": "DB100,S86.5",
                "name": "FirstOuterTask"
            },
            {
                "addr": "DB100,W94",
                "name": "SecondOuterRow"
            },
            {
                "addr": "DB100,W96",
                "name": "SecondOuterLay"
            },
            {
                "addr": "DB100,W98",
                "name": "SecondOuterCol"
            },
            {
                "addr": "DB100,S100.5",
                "name": "SecondOuterBox"
            },
            {
                "addr": "DB100,S108.5",
                "name": "SecondOuterTask"
            },
            {
                "addr": "DB100,W116",
                "name": "ThirdOuterRow"
            },
            {
                "addr": "DB100,W118",
                "name": "ThirdOuterLay"
            },
            {
                "addr": "DB100,W120",
                "name": "ThirdOuterCol"
            },
            {
                "addr": "DB100,S122.5",
                "name": "ThirdOuterBox"
            },
            {
                "addr": "DB100,S130.5",
                "name": "ThirdOuterTask"
            },
            {
                "addr": "DB100,W138",
                "name": "OuterNum"
            },
            {
                "addr": "DB100,W140",
                "name": "OuterStart"
            },
            {
                "addr": "DB100,W142",
                "name": "lowerAllow"
            },
            {
                "addr": "DB100,W144",
                "name": "HreatBeat"
            },
            {
                "addr": "DB100,W146",
                "name": "returnCom1"
            },
            {
                "addr": "DB100,W148",
                "name": "returnCom2"
            },
            {
                "addr": "DB100,W150",
                "name": "returnCom3"
            },
            {
                "addr": "DB100,W152",
                "name": "returnCom4"
            },
            {
                "addr": "DB100,W154",
                "name": "returnCom5"
            },
            {
                "addr": "DB100,W156",
                "name": "returnCom6"
            },
            {
                "addr": "DB100,W194",
                "name": "StackerFree"
            },
            {
                "addr": "DB100,W196",
                "name": "StackerWarning"
            },
            {
                "addr": "DB100,W198",
                "name": "StackerStop"
            },
            {
                "addr": "DB100,W200",
                "name": "StackerOneEnterCom"
            },
            {
                "addr": "DB100,S202.5",
                "name": "StackerOneEnterBox"
            },
            {
                "addr": "DB100,S210.5",
                "name": "StackerOneEnterBoxTask"
            },
            {
                "addr": "DB100,W218",
                "name": "StackerTwoEnterCom"
            },
            {
                "addr": "DB100,S220.5",
                "name": "StackerTwoEnterBox"
            },
            {
                "addr": "DB100,S228.5",
                "name": "StackerTwoEnterTask"
            },
            {
                "addr": "DB100,W236",
                "name": "StackerThreeEnterCom"
            },
            {
                "addr": "DB100,S238.5",
                "name": "StackerThreeEnterBox"
            },
            {
                "addr": "DB100,S246.5",
                "name": "StackerThreeEnterTask"
            },
            {
                "addr": "DB100,W254",
                "name": "StackerOneOutCom"
            },
            {
                "addr": "DB100,S256.5",
                "name": "StackerOneOutBox"
            },
            {
                "addr": "DB100,S264.5",
                "name": "StackerOneOutTask"
            },
            {
                "addr": "DB100,W272",
                "name": "StackerTwoOutCom"
            },
            {
                "addr": "DB100,S274.5",
                "name": "StackerTwoOutBox"
            },
            {
                "addr": "DB100,S282.5",
                "name": "StackerTwoOutTask"
            },
            {
                "addr": "DB100,W290",
                "name": "StackerThreeOutCom"
            },
            {
                "addr": "DB100,S292.5",
                "name": "StackerThreeOutBox"
            },
            {
                "addr": "DB100,S300.5",
                "name": "StackerThreeOutTask"
            },
            {
                "addr": "DB100,W308",
                "name": "upperTakeCom"
            },
            {
                "addr": "DB100,W310",
                "name": "lowerReleaseCom"
            }
        ]
    },
    {
        "id": "7019babdda25135e",
        "type": "ui_tab",
        "name": "拣选区A",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad768694b1e8691b",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dce6a1fda50bd667",
        "type": "ui_group",
        "name": "1039 回库",
        "tab": "7019babdda25135e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "74db5cdab93daf8d",
        "type": "ui_tab",
        "name": "投料区B",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0103ed120ab95e94",
        "type": "ui_group",
        "name": "1026",
        "tab": "74db5cdab93daf8d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "22277025d924a320",
        "type": "ui_group",
        "name": "1025",
        "tab": "74db5cdab93daf8d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e76046450baf14ae",
        "type": "ui_group",
        "name": "1023",
        "tab": "74db5cdab93daf8d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "941cf37c152f868c",
        "type": "ui_group",
        "name": "1022",
        "tab": "74db5cdab93daf8d",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97a359f23ebbe33f",
        "type": "ui_group",
        "name": "1020",
        "tab": "74db5cdab93daf8d",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "27b078e87a46e5b7",
        "type": "ui_group",
        "name": "1019",
        "tab": "74db5cdab93daf8d",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "08f274ea81561c42",
        "type": "ui_group",
        "name": "1017",
        "tab": "74db5cdab93daf8d",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5b0275dedb1b1c7d",
        "type": "ui_group",
        "name": "1016",
        "tab": "74db5cdab93daf8d",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e4cbb354bcfbff7",
        "type": "ui_tab",
        "name": "出库任务",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "de58f7a77abfb6dd",
        "type": "ui_group",
        "name": "A  原料 * 3",
        "tab": "9e4cbb354bcfbff7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "34bbe66c4327554f",
        "type": "ui_group",
        "name": "B 原料 * 4",
        "tab": "9e4cbb354bcfbff7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "67b4b243cee4443e",
        "type": "ui_group",
        "name": "B 配餐 * 8",
        "tab": "9e4cbb354bcfbff7",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc23429482dbe98f",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据 ~ 领料单出库查询库中原料",
        "func": "const broker = flow.get('broker'); \nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\n\n\n\n\n\nconst fDocs = (await broker.call('@pc_erp_data__c.find', {\n    filters: [['doc_type__c', '=', \"领料单\"]]\n})).filter(v => v.name == \"\" || v.name == undefined)\n\nif (!fDocs.length) return;\n\n \nconst { \n    _id: id, \n    material_code__c, \n    material_name__c, \n    specifications__c,\n    project_attr__c, \n    arrive_number__c: QTY, // 领料数量\n    document_number__c, \n    doc_type__c\n } = fDocs[0];\n// 领料单查找库中是否有该物料，如果有分配箱子和个数，如果没有标记erp数据为查找失败，库中无该物料\n\n// node.warn(material_code__c);\n\n// 是否带项目属性的\nif (project_attr__c){\n\n\n    //排、列、层、箱号、项目属性、放入数量，箱内数量\n    async function addDataProject(row, col, lay, boxNumber, Need, boxNum) {\n        // node.warn(\"执行次数\"); \n        let newDoc3 = {\n            // 执行时间：time__c\n            time__c: time,\n            container_type__c: '料箱',\n            row__c: row,\n            col__c: col,\n            lay__c: lay,\n            container_number__c: boxNumber, //箱号\n            container_use__c: '原料领料',\n            material_code__c: material_code__c,\n            material_name__c: material_name__c,\n            specifications__c: specifications__c,\n            project_number__c: project_attr__c, // 项目号\n            box_number__c: Need, // 领料数量\n            materialnum__c: boxNum, // 箱内数量\n            document_number__c: document_number__c || \"\", // erp单号\n            operation__c: doc_type__c || \"\", // 单据类型\n            picking_areas__c: '投料区', // 拣货区域\n            eid__c: id,\n            space: spaceId,\n            created: new Date(),\n            created_by: userId,\n            owner: userId,\n        }\n        await broker.call('@pc_auto_picking__c.insert', { doc: newDoc3 });\n    }\n    \n    let query = [\n        ['material_code__c', '=', material_code__c],\n        ['material_name__c', '=', material_name__c],\n        ['specifications__c', '=', specifications__c],\n        ['project_number__c', '=', project_attr__c]\n    ];\n    const arr = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n    // node.warn(arr);\n    // return\n    if (arr.length){\n        // 判断库中数量是否满足出库条件\n        const totalNum = arr.reduce((curr, prev) => { return curr + prev.now_number__c}, 0) \n        if (totalNum >= QTY){\n            // 判断需要有几箱，每箱要拿多少，写入立库货架-领料单出库表中\n            // name: \"分配成功\"\n            \n\n            let need = QTY;\n            let box = 0;\n            let num = 0;\n            for (let i = 0; i < arr.length; i++) {\n                if (num >= need) { \n                    break\n                }\n                else {\n                    box++\n                    num += arr[i].now_number__c\n                }\n            }\n            // node.warn(box);\n            // node.warn(arr[0].now_number__c);\n            // return\n            if (box === 1) {\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[0].container_number__c]]\n                }))[0]\n                addDataProject(row__c, col__c, lay__c, arr[0].container_number__c, need, arr[0].now_number__c)\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            }\n            if (box === 2) {\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[0].container_number__c]]\n                }))[0]\n                const { row__c: row2, col__c: col2, lay__c: lay2 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[1].container_number__c]]\n                }))[0]\n                addDataProject(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n                addDataProject(row2, col2, lay2, arr[1].container_number__c, need - arr[0].now_number__c, arr[1].now_number__c)\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            }\n            if (box === 3) {\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[0].container_number__c]]\n                }))[0]\n                const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[1].container_number__c]]\n                }))[0]\n                const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[2].container_number__c]]\n                }))[0]\n                addDataProject(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n                addDataProject(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n                addDataProject(r3, c3, l3, arr[2].container_number__c, need - arr[1].now_number__c - arr[0].now_number__c, arr[2].now_number__c)\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n                // node.warn(\"第三箱数量是\"); \n            }\n            if (box === 4) {\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[0].container_number__c]]\n                }))[0]\n                const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[1].container_number__c]]\n                }))[0]\n                const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[2].container_number__c]]\n                }))[0]\n                const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[3].container_number__c]]\n                }))[0]\n                addDataProject(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n                addDataProject(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n                addDataProject(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n                addDataProject(r4, c4, l4, arr[3].container_number__c, need - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[3].now_number__c)\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            }\n            if (box === 5) {\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[0].container_number__c]]\n                }))[0]\n                const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[1].container_number__c]]\n                }))[0]\n                const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[2].container_number__c]]\n                }))[0]\n                const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[3].container_number__c]]\n                }))[0]\n                const { row__c: r5, col__c: c5, lay__c: l5 } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', arr[4].container_number__c]]\n                }))[0]\n                addDataProject(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n                addDataProject(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n                addDataProject(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n                addDataProject(r4, c4, l4, arr[3].container_number__c, arr[3].now_number__c, arr[3].now_number__c)\n                addDataProject(r5, c5, l5, arr[4].container_number__c, need - arr[3].now_number__c - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[4].now_number__c)\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            }\n\n        }\n        else{\n            // 库中有物料，所有箱内总数量不足\n            await broker.call('@pc_erp_data__c.update', {\n                id, doc: {\n                    name: '分配失败',\n                    other__c: '库中有物料，所有箱内总数量不足'\n                }\n            });\n        }\n    }\n    else{\n        // 在库中未找到数据\n        await broker.call('@pc_erp_data__c.update', {\n            id, doc: {\n                name: '分配失败',\n                other__c: '库中无该物料'\n            }\n        });\n    }\n}\nelse{\n\n    //排、列、层、箱号、项目属性、放入数量，箱内数量\n    async function addData(row, col, lay, boxNumber, Need, boxNum) { // Need: 领料数量      boxNum: 箱内数量\n        // node.warn(\"执行次数\"); \n        let newDoc3 = {\n            // 执行时间：time__c\n            time__c: time,\n            container_type__c: '料箱',\n            row__c: row,\n            col__c: col,\n            lay__c: lay,\n            container_number__c: boxNumber, //箱号\n            container_use__c: '原料领料',\n            material_code__c: material_code__c,\n            material_name__c: material_name__c,\n            specifications__c: specifications__c,\n            // project_number__c: project_attr__c, // 项目号\n            box_number__c: Need, // 领料数量\n            materialnum__c: boxNum, // 箱内数量\n            document_number__c: document_number__c || \"\", // erp单号\n            operation__c: doc_type__c || \"\", // 单据类型\n            picking_areas__c: '投料区', // 拣货区域\n            eid__c: id,\n            space: spaceId,\n            created: new Date(),\n            created_by: userId,\n            owner: userId,\n        }\n        await broker.call('@pc_auto_picking__c.insert', { doc: newDoc3 });\n    }\n\n\n    let query = [\n        ['material_code__c', '=', material_code__c],\n        ['material_name__c', '=', material_name__c],\n        ['specifications__c', '=', specifications__c],\n        ['project_number__c', '=', undefined]\n    ];\n    const arr = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n    // node.warn(arr);\n    if (arr.length) {\n        // 判断库中数量是否满足出库条件\n        const totalNum = arr.reduce((curr, prev) => { return curr + prev.now_number__c }, 0);\n\n        if (totalNum >= QTY) {\n            // 判断需要有几箱，每箱要拿多少，写入立库货架-领料单出库表中\n            // name: \"分配成功\" \n            let need = QTY;    // 总数\n            let box = 0;\n            let num = 0;\n            for (let i = 0; i < arr.length; i++) {\n                if (num >= need) {\n                    break;\n                }\n                else {\n                    box++\n                    num += arr[i].now_number__c\n                }\n            } \n\n\n            for (let index = 0; index < box; index++) {\n                // node.warn(arr[index]); \n\n                if ((box - 1) === index) { // 最后一箱\n                    // node.warn(123);\n                    // node.warn(need);\n                    let { container_number__c, now_number__c } = arr[index];\n                    const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                        filters: [['container_number__c', '=', container_number__c]]\n                    }))[0]\n                    addData(row__c, col__c, lay__c, container_number__c, need, now_number__c);\n                    await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n                }\n                else {\n                    need -= arr[index].now_number__c;\n                    // node.warn(arr[index]);\n                    let { container_number__c, now_number__c } = arr[index];\n                    const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                        filters: [['container_number__c', '=', container_number__c]]\n                    }))[0]\n                    // node.warn(arr[index].now_number__c);\n                    addData(row__c, col__c, lay__c, container_number__c, now_number__c, now_number__c)\n                }\n\n            }\n\n\n\n            \n            // node.warn(box);\n            // node.warn(num);\n            // // return\n            // if (box === 1) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c, need, arr[0].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            // }\n            // if (box === 2) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     const { row__c: row2, col__c: col2, lay__c: lay2 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n            //     }))[0]\n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c,     arr[0].now_number__c, arr[0].now_number__c)\n            //     addData(row2, col2, lay2, arr[1].container_number__c,           need - arr[0].now_number__c, arr[1].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } }); \n            // }\n            // if (box === 3) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n            //     }))[0]\n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c,    arr[0].now_number__c, arr[0].now_number__c)\n            //     addData(r2, c2, l2, arr[1].container_number__c,                arr[1].now_number__c, arr[1].now_number__c)\n            //     addData(r3, c3, l3, arr[2].container_number__c,                need - arr[1].now_number__c - arr[0].now_number__c, arr[2].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            //     // node.warn(\"第三箱数量是\"); \n            // }\n            //  if (box === 4) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n            //     }))[0] \n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n            //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n            //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n            //     addData(r4, c4, l4, arr[3].container_number__c, need - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[3].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            // }\n            // if (box === 5) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r5, col__c: c5, lay__c: l5 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[4].container_number__c]]\n            //     }))[0]\n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n            //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n            //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n            //     addData(r4, c4, l4, arr[3].container_number__c, arr[3].now_number__c, arr[3].now_number__c)\n            //     addData(r5, c5, l5, arr[4].container_number__c, need - arr[3].now_number__c - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[4].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            // }\n            // if (box === 6) {\n            //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r5, col__c: c5, lay__c: l5 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[4].container_number__c]]\n            //     }))[0]\n            //     const { row__c: r6, col__c: c6, lay__c: l6 } = (await broker.call('@pc_auto_status__c.find', {\n            //         filters: [['container_number__c', '=', arr[5].container_number__c]]\n            //     }))[0]\n            //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n            //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n            //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n            //     addData(r4, c4, l4, arr[3].container_number__c, arr[3].now_number__c, arr[3].now_number__c)\n            //     addData(r5, c5, l5, arr[4].container_number__c, arr[4].now_number__c, arr[4].now_number__c)\n            //     addData(r6, c6, l6, arr[5].container_number__c, need - arr[4].now_number__c - arr[3].now_number__c - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[5].now_number__c)\n            //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            // }\n        }\n        else {\n            // 库中有物料，所有箱内总数量不足\n            await broker.call('@pc_erp_data__c.update', {\n                id, doc: {\n                    name: '分配失败',\n                    other__c: '库中有物料，所有箱内总数量不足'\n                }\n            });\n        }\n    }\n    else {\n        // 在库中未找到数据\n        await broker.call('@pc_erp_data__c.update', {\n            id, doc: {\n                name: '分配失败',\n                other__c: '库中无该物料'\n            }\n        });\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "9d0f65b28d624864"
            ]
        ]
    },
    {
        "id": "0eda17f0f4c8b8bf",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据区分 普通库和立库",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n// 功能\n// **erp数据详情表中新增加的的数据需要区分立库和普通库**\n// 1. 新增加的数据为普通库、区分是否是项目属性的物料\n//    1. 错误提示1：如果基础物料没有该物料、就提示未查找到该物料\n// 2. 新增加的数据为立体库\n//    1. 物料信息维护表中带有装箱量\n//    2. 需要根据到货数量去查找表有是否有该原料\n//    3. 如果有、是否带项目属性\n//    4. 来区分该分配几个空箱并写到WMS分配表中\n//    5. 提示错误1：数据详情表中是否有该原料、如果没有在erp数据详情中提示、未找到该物料\n//    6. 提示错误2：库中是否有空箱、如果没有、那么提示库中没有多余的空箱了\n\n \n\n \n\n// node.warn((await broker.call('@pc_erp_data__c.find', { filters: [['doc_type__c', '=', \"采购订单\"]] })));\n\n\n// erp数据详情表 查找条件为 name 为 初始 | 采购订单\nconst Arr = (await broker.call('@pc_erp_data__c.find', { filters: [['doc_type__c', '=', \"采购订单\"]] })).filter(v => v.name == \"\" || v.name == undefined)\n\n// node.warn(222);\n// node.warn(Arr);\n// return\nif (!Arr.length) return;\n\n// return\n\n\n\nconst documentNumber = Arr[0].document_number__c; // erp单号\nconst docType = Arr[0].doc_type__c; // 单据类型：采购订单...\nconst id = Arr[0]._id; // 635bddb2ba8ddd4d1068aadb\nconst materialCode = Arr[0].material_code__c.trim(); // 物料代码：B.004.004.026 \nconst materialName = Arr[0].material_name__c.trim(); // 物料名称：8PT3599 \nconst specification = Arr[0].specifications__c.trim(); // 规格型号：转接件（上） \nconst arrivalQuantity = Arr[0].arrive_number__c; // 到货数量: 80 \nconst projectAttr = Arr[0].project_attr__c; // 项目属性: P20015\n// 维护表中的数据千万不能有空格啊 真坑\n// node.warn(123);\n\nlet query = [\n    ['material_code__c', '=', materialCode],\n    ['material_name__c', '=', materialName],\n    ['specifications__c', '=', specification]\n];\nconst fDocs = await broker.call('@pc_material_data__c.find', { filters: [...query] }); // 物料基础信息表\n// node.warn(fDocs[0]);\n// return\n\n\n\nif (fDocs.length === 1) {\n    // 如果是立体库\n    if (fDocs[0].warehouse_name__c === '立库') {\n        // 如果是立库就有装箱量\n        // TODO: 1 更新erp-数据详情表\n        // TODO: 2 查询WMS容器操作记录表 是否有该原料及项目情况\n        // TODO: 3 写入xxx表中分配几个空箱\n        // TODO: 4 库中是否有空箱、如果没有、那么提示库中没有多余的空箱了 \n\n        // node.warn(111);\n        // 装箱量 - 立库才有装箱量 - 根据物料基础数据维护表中\n        const QTY = fDocs[0].binning_number__c;\n\n        //排、列、层、箱号、项目属性、放入数量\n        async function addDataProject(row, col, lay, boxNumber, projectAttribute, Quantity, maNum) {\n            // node.warn(\"执行次数\"); \n            let newDoc3 = {\n                // 执行时间：time__c\n                time__c: time,\n                container_type__c: '料箱',\n                row__c: row,\n                col__c: col,\n                lay__c: lay,\n                container_number__c: boxNumber, //箱号\n                container_use__c: '原料',\n                material_code__c: materialCode,\n                material_name__c: materialName,\n                specifications__c: specification,\n                project_number__c: projectAttribute,\n                box_number__c: Quantity, // 放入数量\n                document_number__c: documentNumber, // erp单号\n                operation__c: docType, // 单据类型\n                picking_areas__c: '投料区', // 拣货区域\n                material_num__c: maNum, // 原料箱内数量\n                finnum__c: Quantity + maNum, // 最终回库的数量\n                eid__c: id,\n                space: spaceId,\n                created: new Date(),\n                created_by: userId,\n                owner: userId,\n            }\n            await broker.call('@pc_erp_data__c.update', { id, doc: { name:\"已分配\", ware_attr__c: '立体库' } });\n            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n        }\n\n\n\n\n\n\n\n        if (projectAttr) { // 表示带有项目属性的 - 查找库中是否有相同箱子的 \n\n            // node.warn(222);\n            // 第一次 query\n            let query = [\n                ['material_code__c', '=', materialCode],\n                ['material_name__c', '=', materialName],\n                ['specifications__c', '=', specification],\n                ['project_number__c', '=', projectAttr]\n            ];\n            const pcMaterial = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n            // node.warn(pcMaterial);\n\n\n            if (pcMaterial.length) {// 表示立库中存在物料代码、规格型号、项目属性相同的箱子 - 计算属性\n                // node.warn(\"库中存在物料代码、规格型号、项目属性相同的箱子\");\n                // 计算数量、要出哪个箱子和分配几个空箱\n                // 分配空箱和箱号、判断库中箱子是否匹配成功\n                // 如何分配：\n                //      1 根据当前数量和装箱量来判断数组中哪个条件不满足\n                //      2 用装箱量 - 当前数量 = 这个箱子要装几个\n                //      2 到货数量 - 这个箱子要装几个 = 剩余数量(除了分配库中的还是分配多少个空箱)\n                //      3 Math.ceil(剩余数量/装箱) = 表示分配几个空箱 - 向上取整\n                //      3 剩余数量 % 装箱 = X个并取余(最后一个箱子放的个数)    20/40=0.5    12/5=2.4\n                // node.warn(123);\n                // return  \n\n                //  先查询哪个箱子缺多少，最后计算空箱\n                // // 过滤新数组\n                // let earlyMaterial = pcMaterial.filter(v => v.now_number__c != QTY)\n                // node.warn(earlyMaterial);\n\n                for (let i = 0; i < pcMaterial.length; i++) {\n                    if (pcMaterial[i].now_number__c < QTY) {  // 当前数量 小于 装箱量\n                        // const row = pcMaterial[i].row__c;\n                        // node.warn(row);\n                        // const col = pcMaterial[i].col__c;\n                        // const lay = pcMaterial[i].lay__c;\n                        const containerNumber = pcMaterial[i].container_number__c; // 箱号\n                        const materialCode = pcMaterial[i].material_code__c; // 物料代码\n                        const materialName = pcMaterial[i].material_name__c; // 物料名称\n                        const specifications = pcMaterial[i].specifications__c; // 规格型号\n                        const projectNumber = pcMaterial[i].project_number__c; // 项目编号\n                        const maNum = pcMaterial[i].now_number__c;\n\n                        // 标记出这个箱子并计算还要几个箱子\n                        const differ = QTY - pcMaterial[i].now_number__c;\n                        const surplus = arrivalQuantity - differ; // surplus是原料箱放的数量\n                        // node.warn(surplus);\n                        if (surplus > 0) {\n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n\n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                                top: emptyBox,\n                                sort: 'col__c asc',\n                            });\n                            // node.warn(rs);\n                            // 1 2 3\n                            if (rs.length === emptyBox) { // 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n\n                                // 1 更新erp-数据详情表\n                                // await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                                // 1. 原料箱子、先更新再增加\n                                // 1.1 更新立库货架-容器状态表的数据 - 先查再更新\n                                const findOnw = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', containerNumber]] });\n                                const row = findOnw[0].row__c;\n                                const col = findOnw[0].col__c;\n                                const lay = findOnw[0].lay__c;\n                                await broker.call('@pc_auto_status__c.update', { id: findOnw[0]._id, doc: { container_status__c: '预占用' } });\n                                // 1.2 排、列、层、箱号、项目属性、放入数量\n                                addDataProject(row, col, lay, containerNumber, projectNumber, differ, maNum)\n\n                                // 2. 空箱子\n                                if (surplus > QTY) {\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let i = 0; i < rs.length; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let i = 0; i < rs.length - 1; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                                        }\n                                        // 3 更新最后一个空箱的状态\n                                        await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                                        // 4 排、列、层、箱号、项目属性、放入数量\n                                        addDataProject(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, projectAttr, rest, 0)\n                                    }\n                                } else if (surplus == QTY) {//放入的数量是剩余数量\n                                    // 更新状态再增加\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, surplus, 0)\n                                } else if (surplus < QTY) {//放入箱子里面的是余数\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, rest, 0)\n                                }\n\n\n\n                            } else {\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', {\n                                    id, doc: {\n                                        ware_attr__c: '立体库',\n                                        other__c: '分配失败,空箱不足,库中存在相同物料'\n                                    }\n                                });\n                            }\n\n                        } else {\n                            // 小于0 表示只出这个箱子即可、不用再分配新的空箱了 - 标记库中空箱不足、分配失败\n                            // TODO: 1 更新erp表\n                            // TODO: 2 将这个原料箱子写入 待上架原料表中 \n                            // 1 更新erp-数据详情表\n                            await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                            // 3 将分配的所有箱子都写入待入库表 - pc_auto_waiting__c \n                            // 先查找再增加\n\n                            const findOnw = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', containerNumber]] });\n                            const row = findOnw[0].row__c;\n                            const col = findOnw[0].col__c;\n                            const lay = findOnw[0].lay__c;\n                            // // 原料箱子\n                            addDataProject(row, col, lay, containerNumber, projectNumber, arrivalQuantity, maNum)\n                        }\n\n\n                        break;\n                    }\n\n                    if (pcMaterial[i].now_number__c === QTY){\n                        // 直接分配空箱\n                        // 跳出循环\n                        const surplus = arrivalQuantity; // surplus是原料箱放的数量 \n                        if (surplus > 0) {\n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n\n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                                top: emptyBox,\n                                sort: 'col__c asc',\n                            }); \n                            if (rs.length === emptyBox) { // 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n\n                  \n                                // 2. 空箱子\n                                if (surplus > QTY) {\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let i = 0; i < rs.length; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let i = 0; i < rs.length - 1; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                                        }\n                                        // 3 更新最后一个空箱的状态\n                                        await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                                        // 4 排、列、层、箱号、项目属性、放入数量\n                                        addDataProject(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, projectAttr, rest, 0)\n                                    }\n                                } else if (surplus == QTY) {//放入的数量是剩余数量\n                                    // 更新状态再增加\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, surplus, 0)\n                                } else if (surplus < QTY) {//放入箱子里面的是余数\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, rest, 0)\n                                }\n\n\n\n                            } else {\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', {\n                                    id, doc: {\n                                        ware_attr__c: '立体库',\n                                        other__c: '分配失败,空箱不足,库中存在相同物料'\n                                    }\n                                });\n                            }\n                        }\n                        break;\n                    }\n\n\n\n                }//for循环结束\n\n\n                //1\n            } else {// 库中不存在物料代码、规格型号、项目属性相同的箱子 - 直接分配空箱\n                // node.warn(\"库中不存在物料代码、规格型号、项目属性相同的箱子\"); \n                // return\n                // 同上、要分配几个空箱、最后一个取余、要放的余数 ? 错误的\n                // Math.ceil(到货数量/装箱量) = 箱数\n                // 到货数量%装箱量 = 最后一箱的数量\n                // 分配空箱和箱号、判断库中箱子是否匹配成功 - 成功、失败\n                const emptyBox = Math.ceil(arrivalQuantity / QTY); // 3/40=1, 20/6=4, 40/40=1\n                const rest = arrivalQuantity % QTY;\n                const rs = await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                    top: emptyBox,\n                    sort: 'col__c asc',\n                });\n                if (rs.length === emptyBox) {// 要获取的箱子个数是没问题的、下面要处理箱数的问题 \n                    // 1 更新erp-数据详情表\n                    \n                    if (arrivalQuantity > QTY) {//这里面还要判断、余数是否等于0的问题\n                        if (rest === 0) {//取余===0、// 10,10,10 \n                            for (let i = 0; i < rs.length; i++) {\n                                await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                // 排、列、层、箱号、项目属性、放入数量 \n                                addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                            }\n                        } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                            // node.warn(\"取余不为0\");\n                            for (let i = 0; i < rs.length - 1; i++) {\n                                await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY, 0)\n                            }\n                            await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                            // 空箱 最后体格 第x个 rs[rs.length-1]\n                            addDataProject(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, projectAttr, rest, 0)\n                        }\n                    } else if (arrivalQuantity == QTY) {//分配一个空箱即可，放入数量为 到货数量\n                        await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                        addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, arrivalQuantity, 0)\n                    } else if (arrivalQuantity < QTY) {//分配一个空箱即可，放入数量为 余数  \n                        await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                        addDataProject(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, projectAttr, rest, 0)\n                    }\n\n\n\n                } else {\n                    // 分配失败、空箱数量不足\n                    await broker.call('@pc_erp_data__c.update', {\n                        id, doc: {\n                            name: \"分配失败\",\n                            // ware_attr__c: '立体库',\n                            other__c: '分配失败,库中空箱不足,库中不存在相同物料,直接分配空箱'\n                        }\n                    });\n                }\n            }\n\n\n\n\n\n\n\n\n        } else {// 表示不带项目属性的 - 查找库中是否有相同箱子的\n\n\n\n            //排、列、层、箱号、放入数量\n            async function addData(row, col, lay, boxNumber, Quantity, maNum) {\n                // node.warn(\"执行次数\"); \n                let newDoc31 = {\n                    // 执行时间：time__c\n                    time__c: time,\n                    container_type__c: '料箱',\n                    row__c: row,\n                    col__c: col,\n                    lay__c: lay,\n                    container_number__c: boxNumber, //箱号\n                    container_use__c: '原料',\n                    material_code__c: materialCode,\n                    material_name__c: materialName,\n                    specifications__c: specification,\n                    // project_number__c: projectAttribute,\n                    box_number__c: Quantity, // 放入数量\n                    document_number__c: documentNumber || \"\", // erp单号\n                    operation__c: docType || \"\", // 单据类型\n                    picking_areas__c: '投料区', // 拣货区域\n                    material_num__c: maNum, // 原料箱内数量\n                    finnum__c: Quantity + maNum, // 最终回库的数量\n                    eid__c: id,\n                    space: spaceId,\n                    created: new Date(),\n                    created_by: userId,\n                    owner: userId,\n                }\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: \"已分配\", ware_attr__c: '立体库' } });\n                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc31 });\n            }\n\n\n\n            let query = [\n                ['material_code__c', '=', materialCode],\n                ['material_name__c', '=', materialName],\n                ['specifications__c', '=', specification],\n                ['project_number__c', '=', undefined]\n            ];\n            const pcMaterial = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n            node.warn(pcMaterial);\n            // return\n            if (pcMaterial.length) {// 表示立库中存在物料代码、规格型号、项目属性相同的箱子 - 计算属性\n                // node.warn(\"库中存在物料代码、规格型号、项目属性相同的箱子\");\n                // 计算数量、要出哪个箱子和分配几个空箱\n                // 分配空箱和箱号、判断库中箱子是否匹配成功\n                // 如何分配：\n                //      1 根据当前数量和装箱量来判断数组中哪个条件不满足\n                //      2 用装箱量 - 当前数量 = 这个箱子要装几个\n                //      2 到货数量 - 这个箱子要装几个 = 剩余数量(除了分配库中的还是分配多少个空箱)\n                //      3 Math.ceil(剩余数量/装箱) = 表示分配几个空箱 - 向上取整\n                //      3 剩余数量 % 装箱 = X个并取余(最后一个箱子放的个数)    20/40=0.5    12/5=2.4\n                // node.warn(123);\n                // return  \n\n                //  先查询哪个箱子缺多少，最后计算空箱\n                // // 过滤新数组\n                // let earlyMaterial = pcMaterial.filter(v => v.now_number__c != QTY)\n                // node.warn(earlyMaterial);\n\n                for (let i = 0; i < pcMaterial.length; i++) {\n                    if (pcMaterial[i].now_number__c < QTY) {  // 当前数量 小于 装箱量\n                        // const row = pcMaterial[i].row__c;\n                        // node.warn(row);\n                        // const col = pcMaterial[i].col__c;\n                        // const lay = pcMaterial[i].lay__c;\n                        const containerNumber = pcMaterial[i].container_number__c; // 箱号\n                        // const materialCode = pcMaterial[i].material_code__c; // 物料代码\n                        // const materialName = pcMaterial[i].material_name__c; // 物料名称\n                        // const specifications = pcMaterial[i].specifications__c; // 规格型号\n                        // const projectNumber = pcMaterial[i].project_number__c; // 项目编号\n                        const maNum = pcMaterial[i].now_number__c;\n\n\n                        // 标记出这个箱子并计算还要几个箱子\n                        const differ = QTY - pcMaterial[i].now_number__c;\n                        const surplus = arrivalQuantity - differ;\n                        // node.warn(surplus);\n                        if (surplus > 0) {\n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n\n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                                top: emptyBox,\n                                sort: 'col__c asc',\n                            });\n                            // node.warn(rs);\n                            // 1 2 3\n                            if (rs.length === emptyBox) {// 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n\n                                // 1 更新erp-数据详情表\n                                \n\n                                // 1. 原料箱子、先更新再增加\n                                // 1.1 更新立库货架-容器状态表的数据 - 先查再更新\n                                const findOnw = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', containerNumber]] });\n                                const row = findOnw[0].row__c;\n                                const col = findOnw[0].col__c;\n                                const lay = findOnw[0].lay__c;\n                                await broker.call('@pc_auto_status__c.update', { id: findOnw[0]._id, doc: { container_status__c: '预占用' } });\n                                // 1.2 排、列、层、箱号、项目属性、放入数量\n                                addData(row, col, lay, containerNumber, differ, maNum)\n\n                                // 2. 空箱子\n                                if (surplus > QTY) {\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let i = 0; i < rs.length; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let i = 0; i < rs.length - 1; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                                        }\n                                        // 3 更新最后一个空箱的状态\n                                        await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                                        // 4 排、列、层、箱号、项目属性、放入数量\n                                        addData(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, rest, 0)\n                                    }\n                                } else if (surplus == QTY) {//放入的数量是剩余数量\n                                    // 更新状态再增加\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, surplus, 0)\n                                } else if (surplus < QTY) {//放入箱子里面的是余数\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, rest, 0)\n                                }\n\n\n\n                            } else {\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', {\n                                    id, doc: {\n                                        ware_attr__c: '立体库',\n                                        other__c: '分配失败,空箱不足,库中存在相同物料'\n                                    }\n                                });\n                            }\n\n                        } else {\n                            // 小于0 表示只出这个箱子即可、不用再分配新的空箱了 - 标记库中空箱不足、分配失败\n                            // TODO: 1 更新erp表\n                            // TODO: 2 将这个原料箱子写入 待上架原料表中 \n                            // 1 更新erp-数据详情表\n                            // await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                            // 3 将分配的所有箱子都写入待入库表 - pc_auto_waiting__c \n                            // 先查找再增加\n\n                            const findOnw = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', containerNumber]] });\n                            const row = findOnw[0].row__c;\n                            const col = findOnw[0].col__c;\n                            const lay = findOnw[0].lay__c;\n                            // // 原料箱子\n                            addData(row, col, lay, containerNumber, arrivalQuantity, maNum )\n                        }\n\n\n                        break;\n                    }\n\n                    if (pcMaterial[i].now_number__c === QTY){\n                        const surplus = arrivalQuantity;\n                        // node.warn(surplus);\n                        if (surplus > 0) {\n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n\n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                                top: emptyBox,\n                                sort: 'col__c asc',\n                            }); \n                            if (rs.length === emptyBox) {// 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n \n                                // 2. 空箱子\n                                if (surplus > QTY) {\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let i = 0; i < rs.length; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let i = 0; i < rs.length - 1; i++) {\n                                            // 1 更新空箱的状态\n                                            await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                            // 2 排、列、层、箱号、项目属性、放入数量\n                                            addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                                        }\n                                        // 3 更新最后一个空箱的状态\n                                        await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                                        // 4 排、列、层、箱号、项目属性、放入数量\n                                        addData(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, rest, 0)\n                                    }\n                                } else if (surplus == QTY) {//放入的数量是剩余数量\n                                    // 更新状态再增加\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, surplus, 0)\n                                } else if (surplus < QTY) {//放入箱子里面的是余数\n                                    await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                                    addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, rest, 0)\n                                }\n\n\n\n                            } else {\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', {\n                                    id, doc: {\n                                        ware_attr__c: '立体库',\n                                        other__c: '分配失败,空箱不足,库中存在相同物料'\n                                    }\n                                });\n                            }\n\n                        }   \n                        break;\n                    }\n\n\n                }//for循环结束\n\n\n                //1\n            } else {// 库中不存在物料代码、规格型号、项目属性相同的箱子 - 直接分配空箱\n                // node.warn(\"库中不存在物料代码、规格型号、项目属性相同的箱子\"); \n                // return\n                // 同上、要分配几个空箱、最后一个取余、要放的余数 ? 错误的\n                // Math.ceil(到货数量/装箱量) = 箱数\n                // 到货数量%装箱量 = 最后一箱的数量\n                // 分配空箱和箱号、判断库中箱子是否匹配成功 - 成功、失败\n                const emptyBox = Math.ceil(arrivalQuantity / QTY); // 3/40=1, 20/6=4, 40/40=1\n                const rest = arrivalQuantity % QTY;\n                const rs = await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                    top: emptyBox,\n                    sort: 'col__c asc',\n                });\n                if (rs.length === emptyBox) {// 要获取的箱子个数是没问题的、下面要处理箱数的问题 \n                    // 1 更新erp-数据详情表\n                    await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n                    if (arrivalQuantity > QTY) {//这里面还要判断、余数是否等于0的问题\n                        if (rest === 0) {//取余===0、// 10,10,10 \n                            for (let i = 0; i < rs.length; i++) {\n                                await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                // 排、列、层、箱号、项目属性、放入数量 \n                                addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                            }\n                        } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                            // node.warn(\"取余不为0\");\n                            for (let i = 0; i < rs.length - 1; i++) {\n                                await broker.call('@pc_auto_status__c.update', { id: rs[i]._id, doc: { container_status__c: '预占用' } });\n                                addData(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, QTY, 0)\n                            }\n                            await broker.call('@pc_auto_status__c.update', { id: rs[rs.length - 1]._id, doc: { container_status__c: '预占用' } });\n                            // 空箱 最后体格 第x个 rs[rs.length-1]\n                            addData(rs[rs.length - 1].row__c, rs[rs.length - 1].col__c, rs[rs.length - 1].lay__c, rs[rs.length - 1].container_number__c, rest, 0)\n                        }\n                    } else if (arrivalQuantity == QTY) {//分配一个空箱即可，放入数量为 到货数量\n                        await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                        addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, arrivalQuantity, 0)\n                    } else if (arrivalQuantity < QTY) {//分配一个空箱即可，放入数量为 余数  \n                        await broker.call('@pc_auto_status__c.update', { id: rs[0]._id, doc: { container_status__c: '预占用' } });\n                        addData(rs[0].row__c, rs[0].col__c, rs[0].lay__c, rs[0].container_number__c, rest, 0)\n                    }\n\n\n\n                } else {\n                    // 分配失败、空箱数量不足\n                    await broker.call('@pc_erp_data__c.update', {\n                        id, doc: {\n                            name: \"分配失败\",\n                            // ware_attr__c: '立体库',\n                            other__c: '分配失败,库中空箱不足,库中不存在相同物料,直接分配空箱'\n                        }\n                    });\n                }\n            }\n\n\n\n\n\n\n        }// 不带项目属性的物料结束\n\n    } else {\n        // 表示：普通库、不用计算箱子、直接放到货架上即可\n        // 表示：其他种类：普通库、钣金、铜...\n        // 更新数据详情表中的[仓库属性字段]为[ware_attr__c]\n        await broker.call('@pc_erp_data__c.update', {\n            id, doc: {\n                name: \"已分配\",\n                ware_attr__c: fDocs[0].warehouse_name__c\n            }\n        });\n    }\n} else {\n    // 表示：在物料基础分类表中未找到该物料\n    // 更新该条查找的数据\n    // 仓库属性为 数据不存在或数据不唯一\n    // 更新数据详情表中的[仓库属性字段]为[数据不存在或数据不唯一]\n    // node.warn(\"数据不存在或数据不唯一\"); \n    await broker.call('@pc_erp_data__c.update', {\n        id, doc: {\n            name: '分配失败',\n            // ware_attr__c: '未在物料信息表中找到数据'\n            other__c: '未在物料信息表中找到数据'\n        }\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "da39ed97c3f471d0"
            ]
        ]
    },
    {
        "id": "bca6466bdb7b166d",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "0eda17f0f4c8b8bf"
            ]
        ]
    },
    {
        "id": "da39ed97c3f471d0",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 280,
        "wires": []
    },
    {
        "id": "8e13fef1b662b62c",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "cc23429482dbe98f"
            ]
        ]
    },
    {
        "id": "9d0f65b28d624864",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "96fc4f541f2380d8",
        "type": "steedos-instance",
        "z": "b256984b2a814225",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "f8ebb7da3d427752",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "79edfa7455c28733"
            ]
        ]
    },
    {
        "id": "79edfa7455c28733",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "function 1 - test",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\n \n\n\n\n// erp数据详情表 查找条件为 name 为 初始 | 采购订单\nconst Arr = (await broker.call('@pc_erp_data__c.find', { \n    filters: [['doc_type__c', '=', \"采购订单\"]]\n })).filter(v => v.name == \"\" || v.name == undefined)\n\nnode.warn(Arr[0]);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "df89bc05bdaaa3ed",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "6887452e3e8192df"
            ]
        ]
    },
    {
        "id": "6887452e3e8192df",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "function 2 - test",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\nlet arr = [3]\nlet QTY = 3\nfor (let i = 0; i < arr.length; i++) {\n    if (arr[i] < QTY){\n        node.warn(123);\n    }\n    if(arr[arr.length - 1] === QTY){\n        node.warn(\"相等\");\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "48d7743aac67d4cb",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据历史任务 - 领料单",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n \nconst pick_arr = await broker.call('@pc_erp_data__c.find', { filters: [['doc_type__c', '=', \"领料单\"], ['name', '=', '成功']] })\nnode.warn(pick_arr);\nif (!pick_arr.length) return;\n\n\npick_arr.forEach(async item => {\n\n    const fDocs = await broker.call('@pc_auto_picking__c.find', {\n        filters: [\n            ['eid__c', '=', item._id],\n            ['is_finished__c', '=', '已完成']\n        ]\n    })\n    if (fDocs.length) {\n        fDocs.forEach(async function (element) {\n            await broker.call('@pc_his_auto_picking__c.insert', { doc: { ...element, _id: null } });\n            await broker.call('@pc_auto_picking__c.delete', { id: element._id });\n        });\n        await broker.call('@pc_his_erp_data__c.insert', { doc: { ...item, time__c: time, _id: null } });\n        await broker.call('@pc_erp_data__c.delete', { id: item._id });\n\n    }\n\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 260,
        "wires": [
            [
                "d16352f492d005a2"
            ]
        ]
    },
    {
        "id": "7b45390dbfb46f08",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 260,
        "wires": [
            [
                "48d7743aac67d4cb"
            ]
        ]
    },
    {
        "id": "d16352f492d005a2",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 260,
        "wires": []
    },
    {
        "id": "a66b97dc14960685",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据历史任务 - 采购入库",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\n\n\n\nconst pick_arr = await broker.call('@pc_erp_data__c.find', { filters: [['doc_type__c', '=', \"采购订单\"], ['name', '=', '已分配']] })\nnode.warn(pick_arr);\nif (!pick_arr.length) return;\n \n\npick_arr.forEach(async item => {\n     \n    const fDocs = await broker.call('@pc_auto_waiting__c.find', { \n        filters: [\n            ['eid__c', '=', item._id],  \n            ['is_finished__c', '=', '已完成']\n        ]\n    })\n    if (fDocs.length){\n        fDocs.forEach(async function(element) {\n            await broker.call('@pc_his_auto_waiting__c.insert', { doc: { ...element, _id: null } });\n            await broker.call('@pc_auto_waiting__c.delete', { id: element._id });\n        }); \n        await broker.call('@pc_his_erp_data__c.insert', { doc: { ...item, time__c: time, _id: null } });\n        await broker.call('@pc_erp_data__c.delete', { id: item._id });\n       \n    }\n\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 220,
        "wires": [
            [
                "fe373bf6728dfc0c"
            ]
        ]
    },
    {
        "id": "993e3fc2904877fb",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 220,
        "wires": [
            [
                "a66b97dc14960685"
            ]
        ]
    },
    {
        "id": "fe373bf6728dfc0c",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 220,
        "wires": []
    },
    {
        "id": "13b29afa67d09c94",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据 ~ 领料单出库查询库中原料",
        "func": "const broker = flow.get('broker'); \nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\nconst fDocs = (await broker.call('@pc_erp_data__c.find', {\n    filters: [['doc_type__c', '=', \"领料单\"]]\n})).filter(v => v.name == \"\" || v.name == undefined)\n\nif (!fDocs.length) return;\n\n \nconst { \n    _id: id, \n    material_code__c, \n    material_name__c, \n    specifications__c,\n    project_attr__c, \n    arrive_number__c: QTY, // 领料数量\n    document_number__c, \n    doc_type__c\n } = fDocs[0];\n// 领料单查找库中是否有该物料，如果有分配箱子和个数，如果没有标记erp数据为查找失败，库中无该物料\n\n\n\n//排、列、层、箱号、项目属性、放入数量，箱内数量\nasync function addData(row, col, lay, boxNumber, Need, boxNum) { // Need: 领料数量      boxNum: 箱内数量\n    // node.log(\"-----------------------------\");\n    // node.log(row,);\n    // node.log(col,);\n    // node.log(lay,);\n    // node.log(boxNumber,);\n    // node.log(Need,);\n    // node.log(boxNum,);\n\n    // node.warn(\"执行次数\"); \n    let newDoc3 = {\n        // 执行时间：time__c\n        time__c: time,\n        container_type__c: '料箱',\n        row__c: row,\n        col__c: col,\n        lay__c: lay,\n        container_number__c: boxNumber, //箱号\n        container_use__c: '原料领料',\n        material_code__c: material_code__c,\n        material_name__c: material_name__c,\n        specifications__c: specifications__c,\n        // project_number__c: project_attr__c, // 项目号\n        box_number__c: Need, // 领料数量\n        materialnum__c: boxNum, // 箱内数量\n        document_number__c: document_number__c || \"\", // erp单号\n        operation__c: doc_type__c || \"\", // 单据类型\n        picking_areas__c: '投料区', // 拣货区域\n        eid__c: id,\n        space: spaceId,\n        created: new Date(),\n        created_by: userId,\n        owner: userId,\n    }\n    await broker.call('@pc_auto_picking__c.insert', { doc: newDoc3 });\n}\n\n\nlet query = [\n    ['material_code__c', '=', material_code__c],\n    ['material_name__c', '=', material_name__c],\n    ['specifications__c', '=', specifications__c],\n    ['project_number__c', '=', undefined]\n];\nconst arr = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n// node.warn(arr);\nif (arr.length) {\n    // 判断库中数量是否满足出库条件\n    const totalNum = arr.reduce((curr, prev) => { return curr + prev.now_number__c }, 0);\n\n    if (totalNum >= QTY) {\n        // 判断需要有几箱，每箱要拿多少，写入立库货架-领料单出库表中\n        // name: \"分配成功\" \n        let need = QTY;    // 总数\n        let box = 0;\n        let num = 0;\n        for (let i = 0; i < arr.length; i++) {\n            if (num >= need) {\n                node.warn(123);\n                // node.warn(need); \n                // node.warn(num);\n                // await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n                break;\n            }\n            else {\n                box++\n                num += arr[i].now_number__c\n                // node.warn(arr[i].now_number__c);\n                // node.warn(arr[i]);\n                // node.warn(box);\n                // if()\n            }\n        } \n        // node.warn(box);  // 需要箱子个数  10\n        // node.warn(need); // 需求数量   72\n        // node.warn(num);  // 总数      74\n\n        // let fini = 0;\n        for (let index = 0; index < box; index++) {\n            // node.warn(arr[index]); \n            \n            if ((box - 1) === index){ // 最后一箱\n                // node.warn(123);\n                // node.warn(need);\n                let { container_number__c, now_number__c } = arr[index];\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', container_number__c]]\n                }))[0]\n                addData(row__c, col__c, lay__c, container_number__c, need, now_number__c);\n                await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n            }\n            else{\n                need -= arr[index].now_number__c; \n                // node.warn(arr[index]);\n                let { container_number__c, now_number__c } = arr[index];\n                const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_number__c', '=', container_number__c]]\n                }))[0]\n                // node.warn(arr[index].now_number__c);\n                addData(row__c, col__c, lay__c, container_number__c, now_number__c, now_number__c)\n            }\n            \n        }\n        \n\n\n\n        // return\n        // if (box === 1) {\n        //     \n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, need, arr[0].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        // }\n        // if (box === 2) {\n        //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n        //     }))[0]\n        //     const { row__c: row2, col__c: col2, lay__c: lay2 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n        //     }))[0]\n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n        //     addData(row2, col2, lay2, arr[1].container_number__c, need - arr[0].now_number__c, arr[1].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        // }\n        // if (box === 3) {\n        //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n        //     }))[0]\n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n        //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n        //     addData(r3, c3, l3, arr[2].container_number__c, need - arr[1].now_number__c - arr[0].now_number__c, arr[2].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        //     // node.warn(\"第三箱数量是\"); \n        // }\n        // if (box === 4) {\n        //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n        //     }))[0]\n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n        //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n        //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n        //     addData(r4, c4, l4, arr[3].container_number__c, need - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[3].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        // }\n        // if (box === 5) {\n        //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r5, col__c: c5, lay__c: l5 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[4].container_number__c]]\n        //     }))[0]\n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n        //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n        //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n        //     addData(r4, c4, l4, arr[3].container_number__c, arr[3].now_number__c, arr[3].now_number__c)\n        //     addData(r5, c5, l5, arr[4].container_number__c, need - arr[3].now_number__c - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[4].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        // }\n        // if (box === 6) {\n        //     const { row__c, col__c, lay__c } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[0].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r2, col__c: c2, lay__c: l2 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[1].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r3, col__c: c3, lay__c: l3 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[2].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r4, col__c: c4, lay__c: l4 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[3].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r5, col__c: c5, lay__c: l5 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[4].container_number__c]]\n        //     }))[0]\n        //     const { row__c: r6, col__c: c6, lay__c: l6 } = (await broker.call('@pc_auto_status__c.find', {\n        //         filters: [['container_number__c', '=', arr[5].container_number__c]]\n        //     }))[0]\n        //     addData(row__c, col__c, lay__c, arr[0].container_number__c, arr[0].now_number__c, arr[0].now_number__c)\n        //     addData(r2, c2, l2, arr[1].container_number__c, arr[1].now_number__c, arr[1].now_number__c)\n        //     addData(r3, c3, l3, arr[2].container_number__c, arr[2].now_number__c, arr[2].now_number__c)\n        //     addData(r4, c4, l4, arr[3].container_number__c, arr[3].now_number__c, arr[3].now_number__c)\n        //     addData(r5, c5, l5, arr[4].container_number__c, arr[4].now_number__c, arr[4].now_number__c)\n        //     addData(r6, c6, l6, arr[5].container_number__c, need - arr[4].now_number__c - arr[3].now_number__c - arr[2].now_number__c - arr[1].now_number__c - arr[0].now_number__c, arr[5].now_number__c)\n        //     await broker.call('@pc_erp_data__c.update', { id, doc: { name: '成功', } });\n        // }\n    }\n    else {\n        // 库中有物料，所有箱内总数量不足\n        await broker.call('@pc_erp_data__c.update', {\n            id, doc: {\n                name: '分配失败',\n                other__c: '库中有物料，所有箱内总数量不足'\n            }\n        });\n    }\n}\nelse {\n    // 在库中未找到数据\n    await broker.call('@pc_erp_data__c.update', {\n        id, doc: {\n            name: '分配失败',\n            other__c: '库中无该物料'\n        }\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "4a24e2dbe3ddcbca"
            ]
        ]
    },
    {
        "id": "33dc51d061e36e86",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "13b29afa67d09c94"
            ]
        ]
    },
    {
        "id": "4a24e2dbe3ddcbca",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d2254b2c9c1b5e82",
        "type": "function",
        "z": "b256984b2a814225",
        "name": "ERP详情数据 ~ 配餐数据写入MES",
        "func": "const broker = flow.get('broker'); \nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\n\n\n\n\n\nconst fDocs = (await broker.call('@pc_erp_data__c.find', {\n    filters: [['doc_type__c', '=', \"配餐\"]]\n})).filter(v => v.name == \"\" || v.name == undefined)\n\nif (!fDocs.length) return;\n// node.warn(fDocs);\n// return\n \nfDocs.forEach(async function(element) {\n    const {\n        _id: id,\n        document_number__c, // 项目号+柜号\n        specifications__c,\n        arrive_number__c: allTotle, // 领料数量 \n    } = element;\n    \n    let newDoc = {\n        bomtype: '1',\n        boxnum: \"\",\n        boxrecord: '',\n        productnum: document_number__c,\n        specification: specifications__c,\n        quantity: Number(allTotle),\n        processquantity: 0\n    }\n    \n    \n    await broker.call('@mes_bom.insert', { doc: newDoc });\n    await broker.call('@pc_erp_data__c.update', { id, doc: { name: \"配餐成功\" } });\n});\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "7b1ecf1cd47dea75"
            ]
        ]
    },
    {
        "id": "f6db3a8c9db7118b",
        "type": "inject",
        "z": "b256984b2a814225",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "d2254b2c9c1b5e82"
            ]
        ]
    },
    {
        "id": "7b1ecf1cd47dea75",
        "type": "debug",
        "z": "b256984b2a814225",
        "name": "debug 93",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 440,
        "wires": []
    },
    {
        "id": "e2b054b6557be161",
        "type": "steedos-instance",
        "z": "bf5593c3c002083d",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "7afe859db5c2d4ed",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "f014357b5df24f81"
            ]
        ]
    },
    {
        "id": "f014357b5df24f81",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "普通货架读取",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\nlet newDoc = [\n    ['_id', '=', \"6300ea52ab764340d0d047f1\"],\n    ['_id', '=', '6300ea7fab764340d0d047f2']\n] \nconst res = await broker.call('@common_record__c.find', { filters: [...newDoc] } ); \n\n\n\n\nconst outStock = await broker.call('@pc_wcs_out_route__c.find', {\n    fields: ['_id', 'name', 'row__c', 'col__c', 'lay__c', 'status__c', 'con__c'],\n    filters: [['pallet_number__c', '=', 'pallet']],\n    top: 1,\n    sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n}); ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "12a45d7c5769da59"
            ]
        ]
    },
    {
        "id": "12a45d7c5769da59",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 520,
        "wires": []
    },
    {
        "id": "1aef9559200ae10e",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "立库货架-货位初始化",
        "func": "const broker = flow.get('broker');\n// 联想笔记本本机的Steedos数据库\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\n// 1880个项目\nfor (let i = 1; i < 3; i++) {\n    for (let j = 1; j < 95; j++) {\n        for (let k = 1; k < 11; k++) {\n            const res = '第' + i + '排' + j + '列' + k + '层'; \n            let newDoc = {\n                name: res,\n                row__c: i,\n                col__c: j,\n                lay__c: k,\n                status__c: '空',\n                con__c: '空',\n\n                space: spaceId,\n                created: new Date(),\n                created_by: userId,\n                owner: userId,\n            }\n            // node.warn(newDoc);\n            const ress = await broker.call('@pc_auto__c.insert', { doc: newDoc });\n            node.warn(ress);\n\n        }\n    }\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "831073cae38fb381"
            ]
        ]
    },
    {
        "id": "7d506f28f1519c3f",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "1aef9559200ae10e"
            ]
        ]
    },
    {
        "id": "831073cae38fb381",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 160,
        "wires": []
    },
    {
        "id": "8765a318f7a547a8",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "出库物料查询  排序-列-层-排",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n\n\nconst res = await broker.call('@pc_auto_status__c.find', {\n    fields: ['number__c'],\n    filters: [['use__c', '=', '空箱']],\n    top: 1,\n    sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\nif(res.length){\n    node.warn(res);\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 560,
        "wires": [
            [
                "c2ea326dd6d228b9"
            ]
        ]
    },
    {
        "id": "a337fe35fd14ad66",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "8765a318f7a547a8"
            ]
        ]
    },
    {
        "id": "c2ea326dd6d228b9",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "665bccf837885e70",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "前台提交要绑定的数据-后台要处理MES数据和空箱进行绑定",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n// 选择空箱和MES表进行绑定\nlet arr = [\n        '6304e1c35f109f35c4b87683',\n        '6304e1d75f109f35c4b87684',\n        '630771ed77aa5e33c07d1502',\n        '6307720077aa5e33c07d1503'\n    ];\n\nconst Num = await broker.call('@pc_auto_status__c.find', {\n    fields: ['number__c'],\n    filters: [['use__c', '=', '空箱']],\n    top: 1,\n    sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\n// if (Num.length) {\n//     node.warn(res);\n//     return msg;\n// }\n\nfor (let index = 0; index < arr.length; index++) {\n    const res = await broker.call('@pc_mes_bom__c.find', { filters: [['_id', '=', arr[index] ]] });\n    let newDoc = {\n        name: '',\n        type__c: '料箱',\n        use__c: '配餐',\n        number__c: Num[0].number__c,\n        project_number__c: res[0].project__c,\n        cupboard_number__c: res[0].cupboard__c,\n        material_number__c: res[0].material__c,\n        demand_number__c: res[0].demand__c,\n        select_number: 0,\n\n        space: spaceId,\n        created: new Date(),\n        created_by: userId,\n        owner: userId,\n    }\n    await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n    // node.warn(res2);\n    await broker.call('@pc_auto_status__c.update', { id: Num[0]._id, doc: { use__c: '配餐' } });\n}\n\n\n\n// node.warn(arr);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "40c910b8bd91fa0b"
            ]
        ]
    },
    {
        "id": "577d7d1113162e0f",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "665bccf837885e70"
            ]
        ]
    },
    {
        "id": "40c910b8bd91fa0b",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 600,
        "wires": []
    },
    {
        "id": "9085308618429dc4",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "配餐箱和原料箱进行数据绑定",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n\nconst Arr = await broker.call('@pc_auto_config_record__c.find', {});\n// node.warn(Arr);\n\n\n// [\"A1\",\"B1\",\"C1\",\"D1\",\"A1\",\"E1\",\"A1\"]\n// let materialName = [];\n// Arr.map((v)=> {\n//     return materialName.push(v.material_number__c) \n// })\n// node.warn(materialName);\n\n\n//提示消息 返回到前台\nconst warning = [];\nconst prompt = [];\n// for循环中\nfor (let index = 0; index < Arr.length; index++) {\n    const auto_record = await broker.call('@pc_auto_record__c.find', {\n        fields: ['_id', 'container_use__c', 'container_number__c', 'material_number__c','now_number__c'],\n        filters: [['material_number__c', '=', Arr[index].material_number__c]],\n        sort: 'col__c asc',\n    });\n    \n    // 如果前台的提交的数据查找到原料表中的数据\n    if (auto_record.length) {\n    // node.warn(auto_record);\n        \n            // 可以找到该物料号\n            let num = auto_record[0].now_number__c;\n            for (let j = 0; j < auto_record.length; j++) {\n                try {\n                    if (num >= Arr[index].demand_number__c) {\n                        const success = await broker.call('@pc_auto_record__c.find', {\n                            fields: ['_id', 'container_use__c', 'container_number__c', 'material_number__c', 'now_number__c'],\n                            filters: [['material_number__c', '=', Arr[index].material_number__c]],\n                            top: j+1,\n                            sort: 'col__c asc',\n                        });\n                        // node.warn(success);\n                        for (let k = 0; k < success.length; k++) {\n                            prompt.push(`查找成功！匹配的物料名称为：${Arr[index].material_number__c}需要的数量为${Arr[index].demand_number__c}, 在库存中查找到的容器号为：${success[k].container_number__c},物料号为：${success[k].material_number__c},数量为：${success[k].now_number__c} `);\n                            \n                        }\n                        \n                        \n                        break;\n                    } else {\n                        num += auto_record[j + 1].now_number__c;\n\n                    }\n                } catch (e) {\n                    // node.warn(num);\n                    // node.warn(j);\n                    // node.warn(e);\n                    warning.push(`物料不足！需求的物料${Arr[index].material_number__c},总库存中缺少${Arr[index].demand_number__c - num}件?位置 箱号, 其中库存中有${j+1}个箱子被找到`);\n                }\n\n            }\n        \n\n\n        // node.warn(num);\n        // if (auto_record[0].now_number__c >= Arr[index].material_number__c) {\n        //     node.warn(auto_record);//原料大于配餐的选择的物料\n        // } else {\n        //     // 物料不足 循环判断到底要几个箱子\n        //     reMsg.push(`物料不足！所选的物料编号${Arr[index].material_number__c}的数量为${Arr[index].demand_number__c}, 原料的物料编号${auto_record[0].material_number__c}数量为${auto_record[0].now_number__c}`)\n        // }\n\n    //库中没有该物料对应的原料\n    } else {\n        warning.push(`物料总库存为0! 原料${Arr[index].material_number__c}未找到`)\n    } \n}\n\n// if (warning.length){\n//     node.warn(\"存在缺料情况\"); //{message: '存在缺料情况'}\n\n    node.warn(warning);  //{data: reMsg}\n    node.warn(prompt)\n// }else{\n//     // node.warn(\"物料准备齐全, 开始出库\"); //{ message: '物料准备齐全, 开始出库'}\n    \n// }\n\n\n\n\n\n\n\n\n\n\n\n\n// var _arr = ['旅行箱', '旅行箱', '小米', '大米'];\n// var _res = []; //   \n// _arr.sort();\n// for (var i = 0; i < _arr.length;) {\n//     var count = 0;\n//     for (var j = i; j < _arr.length; j++) {\n//         if (_arr[i] == _arr[j]) {\n//             count++;\n//         }\n//     }\n//     _res.push([_arr[i], count]);\n//     i += count;\n// }\n// node.warn(_res);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 640,
        "wires": [
            [
                "cc4ee4454bb3caf3"
            ]
        ]
    },
    {
        "id": "06874e3e07f5e16b",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "9085308618429dc4"
            ]
        ]
    },
    {
        "id": "cc4ee4454bb3caf3",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "849efbd3bc5da764",
        "type": "comment",
        "z": "bf5593c3c002083d",
        "name": "初始化数据",
        "info": "",
        "x": 120,
        "y": 120,
        "wires": []
    },
    {
        "id": "f5253749a0a287e8",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "MES数据 - 新增",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\nconst arr = ['P1', 'P2']\nconst arr2 = ['01', '02', '03']\nconst arr3 = ['隔离开关', '断路器', '铜排', '铝板', '端板', '标记条', '色带', '号管', '热缩管', '护套', '铜鼻子', '电线', '阻燃缠绕管',]\nfor (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr2.length; j++) {\n        for (let k = 0; k < arr2.length; k++) {\n            const val = arr3[Math.floor(Math.random() * arr3.length)]\n            const ran1 = (Math.random() * 1000).toFixed(0)\n            const ran2 = (Math.random() * 50).toFixed(0)\n            \n            let newDoc = {\n                name: '',\n                id__c: ran1,\n                project__c: arr[i],\n                cupboard__c: arr2[j],\n                material__c: val,\n                demand__c: ran2,\n\n                space: spaceId,\n                created: new Date(),\n                created_by: userId,\n                owner: userId,\n            }\n            const res2 = await broker.call('@pc_mes_bom__c.insert', { doc: newDoc });\n            node.warn(res2);\n        }\n        \n        \n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "bb3febf24aba74ea"
            ]
        ]
    },
    {
        "id": "9193234a54100f03",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "f5253749a0a287e8"
            ]
        ]
    },
    {
        "id": "bb3febf24aba74ea",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 240,
        "wires": []
    },
    {
        "id": "0e0c90cf5947ad68",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "18c18c086749ad91"
            ]
        ]
    },
    {
        "id": "b6f579cf9b7a5179",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 280,
        "wires": []
    },
    {
        "id": "18c18c086749ad91",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "普通货架-货位初始化",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\nconst arr = ['A', 'B', 'C', 'D']\nfor (let i = 0; i < arr.length; i++) {\n    for (let j = 1; j < 3; j++) {\n        for (let k = 1; k < 5; k++) {\n            for (let p = 1; p < 3; p++) {\n                const res = i +'区' + j + '排' + k + '列' + p + '层';\n                let newDoc = {\n                    name: res,\n                    zone__c: arr[i],\n                    row__c: j,\n                    col__c: k,\n                    lay__c: p,\n                    goods_status__c: '空闲',\n                    container_number__c: '',\n\n                    space: spaceId,\n                    created: new Date(),\n                    created_by: userId,\n                    owner: userId,\n                }\n                const res2 = await broker.call('@pc_common__c.insert', { doc: newDoc });\n                node.warn(res2);\n                \n            }\n\n        }\n    }\n}\n\n\n// return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "b6f579cf9b7a5179"
            ]
        ]
    },
    {
        "id": "c571c4585c9db66a",
        "type": "comment",
        "z": "bf5593c3c002083d",
        "name": "功能测试",
        "info": "",
        "x": 120,
        "y": 480,
        "wires": []
    },
    {
        "id": "223b1ef98407b406",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "立库货架-容器状态 - 新增",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\nlet num = 10;\nfor (let i = 1; i < 3; i++) {\n    for (let j = 1; j < 3; j++) {\n        for (let k = 1; k < 8; k++) { \n            num++\n            const res = 'S00' + num;\n            let newDoc = {\n                name: '',\n                row__c: i,\n                col__c: j,\n                lay__c: k,\n                container_type__c: '料箱',\n                container_number__c: res,\n                container_use__c:'空箱',\n                container_zone__c:'立体库',\n                container_status__c:'0',\n\n                space: spaceId,\n                created: new Date(),\n                created_by: userId,\n                owner: userId,\n            }\n            const res2 = await broker.call('@pc_auto_status__c.insert', { doc: newDoc });\n            node.warn(res2);\n\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "cd7c1fcec904d89a"
            ]
        ]
    },
    {
        "id": "c3ac4fdec3289f8d",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "223b1ef98407b406"
            ]
        ]
    },
    {
        "id": "cd7c1fcec904d89a",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "c93e84ddb489d108",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "模拟堆垛机正在执行的任务 - 测试",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\nlet number1 = 3 //状态为远程自动\nlet number2 = 0 //状态为待机\n\nif (number1 === 3 && number2 === 0){//表示堆垛机状态可以进行发任务\n    const res = await broker.call('@pc_wcs_stacker__c.find',  { filters: ['status__c', '=', '1'] });\n    // node.warn(res);\n    node.warn('return 前');\n    if(res.length >= 1 ) return; // 表示如果有状态为1时,  return;\n    node.warn('return 后');\n    // 查找优先级为2的  如果有值先执行优先级为2的\n    const Outer = await broker.call('@pc_wcs_stacker__c.find', { filters: ['pri__c', '=', '2'] });\n    // node.warn(res);\n    if (Outer.length >= 1){\n        node.warn(\"代码块1\");\n            //  循环判断这里面的数据即可 - 出库任务\n        if (Outer[0].loc_dest__c.toString() === '1025'   ) {\n            node.warn('代码块2');\n            \n                await broker.call('@pc_wcs_stacker__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n            \n            }\n            \n       \n    } else {\n        // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n        // 这里全部为 优先级为1的数据\n        // 加断点\n        let str1 = 11;\n        let str2 = 12;\n        let doc = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pri__c', '=', '1']] });\n        for (let i = 0; i < doc.length; i++) {\n            const res = await broker.call('@pc_wcs_stacker__c.find', { filters: ['status__c', '=', '1'] }); \n            if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n            \n            if (doc[i].loc_dest__c.toString() === \"1019\" && str1 === 111) {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n               \n            }else if (doc[i].loc_dest__c.toString() === \"2025\" && str2 === 5) {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n               \n            } else if (doc[i].loc_start__c.toString() === \"1022\") {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                \n            } else if (doc[i].loc_start__c.toString() === \"2019\") {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                \n            } else if (doc[i].loc_start__c.toString() === \"1037\") {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                \n            } else if (doc[i].loc_start__c.toString() === \"1032\") {\n                await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                \n            } else {/**结束循环 */}\n        }\n\n\n\n\n    }//优先级为1的 else 结束\n  \n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1560,
        "wires": [
            [
                "55ca1a98ee0339d7"
            ]
        ]
    },
    {
        "id": "5ccda2e6f5140673",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1560,
        "wires": [
            [
                "c93e84ddb489d108"
            ]
        ]
    },
    {
        "id": "55ca1a98ee0339d7",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1560,
        "wires": []
    },
    {
        "id": "a8f2e9b61457a71e",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "四号堆垛机 - 改",
        "func": "// const broker = flow.get('broker');\n// var arr_50 = global.get('arr_50');\n// var arr = global.get('arr');\n// // node.warn(arr)\n// var arr_11 = global.get('arr_11');\n// // node.warn(arr_50)\n\n\n// try {\n\n\n//     if (arr_50[1] === 3 && arr_50[2] === 0) {//表示堆垛机状态可以进行发任务\n//         const res = await broker.call('@stacker4__c.find', { filters: ['status__c', '=', '1'] });\n//         // node.warn(res);\n//         node.warn('return 前');\n//         if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n//         node.warn('return 后');\n//         // 查找优先级为2的  如果有值先执行优先级为2的\n//         const Outer = await broker.call('@stacker4__c.find', { filters: ['pri__c', '=', '2'] });\n//         // node.warn(res); \n//         if (Outer.length >= 1) {\n//             node.warn(\"代码块1\");\n//             //  循环判断这里面的数据即可 - 出库任务\n//             if (Outer[0].loc_dest__c.toString() === \"1025\" && arr[99] === 0) {\n//                 await broker.call('@stacker4__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n//                 let OrderId = Outer[0].plctask__c;\n//                 let PalletId = Outer[0].pallet_id__c;\n//                 let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                 if (fDocs.length >= 1) {\n//                     await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '四号堆垛机正在取货' } });\n//                 }\n//                 let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                 if (fDocs2.length >= 1) {\n//                     await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '四号堆垛机正在取货' } });\n//                 }\n//                 let dos2 = Outer[0].loc_start__c;\n//                 let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n//                 let dos4 = Number(dos2.substring(2, 4));//排\n//                 let dos5 = Number(dos2.substring(4, 6));//层\n//                 let dos6 = Number(dos2.substring(6, 8));//列\n//                 let dos7 = dos2.substring(2, 8);//堆垛机校验\n//                 let From_Row = dos4;\n//                 let From_Floor = dos5;\n//                 let From_Column = dos6;\n//                 let To_Row = 01;\n//                 let To_Floor = 01;\n//                 let To_Column = 01;\n//                 let Check_Num = dos7 + '010101';\n//                 let msg1 = { payload: PalletId }\n//                 let msg2 = { payload: From_Row }\n//                 let msg3 = { payload: From_Floor }\n//                 let msg4 = { payload: From_Column }\n//                 let msg5 = { payload: To_Row }\n//                 let msg6 = { payload: To_Floor }\n//                 let msg7 = { payload: To_Column }\n//                 let msg8 = { payload: Check_Num }\n//                 let msg9 = { payload: OrderId }\n//                 return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//             }\n\n\n//         } else {\n//             // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n//             // 这里全部为 优先级为1的数据\n//             let doc = await broker.call('@stacker4__c.find', { filters: [['pri__c', '=', '1']] });\n//             for (let i = 0; i < doc.length; i++) {\n//                 const res = await broker.call('@stacker4__c.find', { filters: ['status__c', '=', '1'] });\n//                 if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n\n//                 if (doc[i].loc_dest__c.toString() === \"1019\" && arr[99] === 0) {\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let OrderId = doc[i].plctask__c;\n//                     let PalletId = doc[i].pallet_id__c;\n//                     let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '四号堆垛机正在取货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '四号堆垛机正在取货' } });\n//                     }\n//                     let dos2 = doc[i].loc_start__c;\n//                     let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n//                     let dos4 = Number(dos2.substring(2, 4));//排\n//                     let dos5 = Number(dos2.substring(4, 6));//层\n//                     let dos6 = Number(dos2.substring(6, 8));//列\n//                     let dos7 = dos2.substring(2, 8);//堆垛机校验\n//                     let From_Row = dos4;\n//                     let From_Floor = dos5;\n//                     let From_Column = dos6;\n//                     let To_Row = 01;\n//                     let To_Floor = 01;\n//                     let To_Column = 01;\n//                     let Check_Num = dos7 + '010101';\n//                     let msg1 = { payload: PalletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else if (doc[i].loc_dest__c.toString() === '2025' && arr_11[47] === 0) {\n\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let OrderId = doc[i].plctask__c;\n//                     let PalletId = doc[i].pallet_id__c;\n//                     let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '四号堆垛机正在取货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '四号堆垛机正在取货' } });\n//                     }\n//                     let dos2 = doc[i].loc_start__c;\n//                     let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n//                     let dos4 = Number(dos2.substring(2, 4));//排\n//                     let dos5 = Number(dos2.substring(4, 6));//层\n//                     let dos6 = Number(dos2.substring(6, 8));//列\n//                     let dos7 = dos2.substring(2, 8);//堆垛机校验\n//                     let From_Row = dos4;\n//                     let From_Floor = dos5;\n//                     let From_Column = dos6;\n//                     let To_Row = 02;\n//                     let To_Floor = 07;\n//                     let To_Column = 48;\n//                     let Check_Num = dos7 + '020748';\n//                     let msg1 = { payload: PalletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else if (doc[i].loc_start__c.toString() === \"1022\") {\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let palletId = doc[i].pallet_id__c;\n//                     let OrderId = doc[i].plctask__c;\n//                     let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n//                     let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n//                     let doc3 = Number(doc1.substring(2, 4));//排\n//                     let doc4 = Number(doc1.substring(4, 6));//层\n//                     let doc5 = Number(doc1.substring(6, 8));//列\n//                     let doc6 = doc1.substring(2, 8);\n//                     let From_Row = 02;\n//                     let From_Floor = 01;\n//                     let From_Column = 01;\n//                     let To_Row = doc3;\n//                     let To_Floor = doc4;\n//                     let To_Column = doc5;\n//                     let Check_Num = '020101' + doc6;\n//                     let msg1 = { payload: palletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else if (doc[i].loc_start__c.toString() === \"2019\") {\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let palletId = doc[i].pallet_id__c;\n//                     let OrderId = doc[i].plctask__c;\n//                     let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n//                     let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n//                     let doc3 = Number(doc1.substring(2, 4));//排\n//                     let doc4 = Number(doc1.substring(4, 6));//层\n//                     let doc5 = Number(doc1.substring(6, 8));//列\n//                     let doc6 = doc1.substring(2, 8);\n//                     let From_Row = 01;\n//                     let From_Floor = 07;\n//                     let From_Column = 48;\n//                     let To_Row = doc3;\n//                     let To_Floor = doc4;\n//                     let To_Column = doc5;\n//                     let Check_Num = '010748' + doc6;\n//                     let msg1 = { payload: palletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else if (doc[i].loc_start__c.toString() === \"1037\") {\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let palletId = doc[i].pallet_id__c;\n//                     let OrderId = doc[i].plctask__c;\n//                     let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n//                     let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n//                     let doc3 = Number(doc1.substring(2, 4));//排\n//                     let doc4 = Number(doc1.substring(4, 6));//层\n//                     let doc5 = Number(doc1.substring(6, 8));//列\n//                     let doc6 = doc1.substring(2, 8);\n//                     let From_Row = 02;\n//                     let From_Floor = 01;\n//                     let From_Column = 01;\n//                     let To_Row = doc3;\n//                     let To_Floor = doc4;\n//                     let To_Column = doc5;\n//                     let Check_Num = '020101' + doc6;\n//                     let msg1 = { payload: palletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else if (doc[i].loc_start__c.toString() === \"1032\") {\n//                     await broker.call('@stacker4__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n//                     let palletId = doc[i].pallet_id__c;\n//                     let OrderId = doc[i].plctask__c;\n//                     let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs.length >= 1) {\n//                         await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n//                     if (fDocs2.length >= 1) {\n//                         await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '四号堆垛机正在接货' } });\n//                     }\n//                     let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n//                     let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n//                     let doc3 = Number(doc1.substring(2, 4));//排\n//                     let doc4 = Number(doc1.substring(4, 6));//层\n//                     let doc5 = Number(doc1.substring(6, 8));//列\n//                     let doc6 = doc1.substring(2, 8);\n//                     let From_Row = 02;\n//                     let From_Floor = 01;\n//                     let From_Column = 01;\n//                     let To_Row = doc3;\n//                     let To_Floor = doc4;\n//                     let To_Column = doc5;\n//                     let Check_Num = '020101' + doc6;\n//                     let msg1 = { payload: palletId }\n//                     let msg2 = { payload: From_Row }\n//                     let msg3 = { payload: From_Floor }\n//                     let msg4 = { payload: From_Column }\n//                     let msg5 = { payload: To_Row }\n//                     let msg6 = { payload: To_Floor }\n//                     let msg7 = { payload: To_Column }\n//                     let msg8 = { payload: Check_Num }\n//                     let msg9 = { payload: OrderId }\n//                     return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n//                 } else {/**结束循环 */ }\n//             }\n\n\n\n\n//         }//优先级为1的 else 结束\n\n//     }\n// } catch (e) { }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1640,
        "wires": [
            [
                "09992c0e18bae7c7"
            ]
        ]
    },
    {
        "id": "2bbf9eb77e9595c8",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1640,
        "wires": [
            [
                "a8f2e9b61457a71e"
            ]
        ]
    },
    {
        "id": "09992c0e18bae7c7",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1640,
        "wires": []
    },
    {
        "id": "4e63eb16d67a968c",
        "type": "comment",
        "z": "bf5593c3c002083d",
        "name": "飞鹤现场代码改动",
        "info": "",
        "x": 150,
        "y": 1520,
        "wires": []
    },
    {
        "id": "693b4e0a249c6228",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "三号堆垛机 - 改",
        "func": "const broker = flow.get('broker');\nvar arr_40 = global.get('arr_40');\nvar arr = global.get('arr');\nvar arr_11 = global.get('arr_11');\n\n\ntry{\n\n    if (arr_40[1] === 3 && arr_40[2] === 0) {//表示堆垛机状态可以进行发任务\n        const res = await broker.call('@stacker3__c.find', { filters: ['status__c', '=', '1'] });\n        // node.warn('return 前');\n        if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n        // node.warn('return 后');\n\n\n        // 查找优先级为2的  如果有值先执行优先级为2的\n        const Outer = await broker.call('@stacker3__c.find', { filters: ['pri__c', '=', '2'] });\n        // node.warn(res);\n        if (Outer.length >= 1) {\n\n            if (Outer[0].loc_dest__c.toString() === \"1025\" && arr[93] === 0) {\n                await broker.call('@stacker3__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n                let OrderId = Outer[0].plctask__c;\n                let PalletId = Outer[0].pallet_id__c;\n                let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs.length >= 1) {\n                    await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '三号堆垛机正在取货' } });\n                }\n                let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs2.length >= 1) {\n                    await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '三号堆垛机正在取货' } });\n                }\n                let dos2 = Outer[0].loc_start__c;\n                let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                let dos4 = Number(dos2.substring(2, 4));//排\n                let dos5 = Number(dos2.substring(4, 6));//层\n                let dos6 = Number(dos2.substring(6, 8));//列\n                let dos7 = dos2.substring(2, 8);//堆垛机校验\n                let From_Row = dos4;\n                let From_Floor = dos5;\n                let From_Column = dos6;\n                let To_Row = 1;\n                let To_Floor = 1;\n                let To_Column = 1;\n                let Check_Num = dos7 + '010101';\n                let msg1 = { payload: PalletId }\n                let msg2 = { payload: From_Row }\n                let msg3 = { payload: From_Floor }\n                let msg4 = { payload: From_Column }\n                let msg5 = { payload: To_Row }\n                let msg6 = { payload: To_Floor }\n                let msg7 = { payload: To_Column }\n                let msg8 = { payload: Check_Num }\n                let msg9 = { payload: OrderId }\n                return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n            }\n\n\n        } else {\n            // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n            // 这里全部为 优先级为1的数据\n            // 加断点\n\n            let doc = await broker.call('@stacker3__c.find', { filters: [['pri__c', '=', '1']] });\n            for (let i = 0; i < doc.length; i++) {\n                const res = await broker.call('@stacker3__c.find', { filters: ['status__c', '=', '1'] });\n                if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n\n\n                if (doc[i].loc_dest__c.toString() === \"1019\" && arr[93] === 0) {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '三号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '三号堆垛机正在取货' } });\n                    }\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = dos7 + '010101';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_dest__c.toString() === \"2025\" && arr_11[53] === 0) {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '三号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '三号堆垛机正在取货' } });\n                    }\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 48;\n                    let Check_Num = dos7 + '020748';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1022\") {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"2019\") {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 48;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '010748' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1037\") {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1032\") {\n                    await broker.call('@stacker3__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '三号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else { /**结束判断 */ }\n\n\n            }//for 结束循环\n\n\n\n\n        }//优先级为1的 else 结束\n\n    } \n\n\n}catch(e){}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1680,
        "wires": [
            [
                "6265ba20534afacf"
            ]
        ]
    },
    {
        "id": "545a9fce9ae8a53c",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1680,
        "wires": [
            [
                "693b4e0a249c6228"
            ]
        ]
    },
    {
        "id": "6265ba20534afacf",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d4034013260af2a4",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "三号堆垛机模板",
        "func": "const broker = flow.get('broker');\nvar arr_40 = global.get('arr_40');\nvar arr = global.get('arr');\nvar arr_11 = global.get('arr_11');\n\n\ntry{\n\n    if (arr_40[1] === 3 && arr_40[2] === 0) {//表示堆垛机状态可以进行发任务\n        const res = await broker.call('@stacker3__c.find', { filters: ['status__c', '=', '1'] });\n        // node.warn(res);\n        node.warn('return 前');\n        if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n        node.warn('return 后');\n\n\n        // 查找优先级为2的  如果有值先执行优先级为2的\n        const Outer = await broker.call('@stacker3__c.find', { filters: ['pri__c', '=', '2'] });\n        // node.warn(res);\n        if (Outer.length >= 1) {\n\n            if (Outer[0].loc_dest__c.toString() === '1025') {\n                node.warn('代码块2');\n\n                await broker.call('@stacker3__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n\n            }\n\n\n        } else {\n            // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n            // 这里全部为 优先级为1的数据\n            // 加断点\n\n            let doc = await broker.call('@stacker3__c.find', { filters: [['pri__c', '=', '1']] });\n            for (let i = 0; i < doc.length; i++) {\n                const res = await broker.call('@stacker3__c.find', { filters: ['status__c', '=', '1'] });\n                if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n\n                if (doc[i].loc_dest__c.toString() === \"1019\" && 111 === 111) {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else if (doc[i].loc_dest__c.toString() === \"2025\" && 5 === 5) {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else if (doc[i].loc_start__c.toString() === \"1022\") {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else if (doc[i].loc_start__c.toString() === \"2019\") {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else if (doc[i].loc_start__c.toString() === \"1037\") {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else if (doc[i].loc_start__c.toString() === \"1032\") {\n                    await broker.call('@pc_wcs_stacker__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n\n                } else {/**结束循环 */ }\n\n\n\n\n            }//for 结束循环\n \n        }//优先级为1的 else 结束\n\n    } \n\n\n}catch(e){}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1600,
        "wires": [
            [
                "666d65f0f0a08723"
            ]
        ]
    },
    {
        "id": "cac067be2b932e89",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1600,
        "wires": [
            [
                "d4034013260af2a4"
            ]
        ]
    },
    {
        "id": "666d65f0f0a08723",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1600,
        "wires": []
    },
    {
        "id": "9a08fafd6e4e30da",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "二号堆垛机 - 改",
        "func": "const broker = flow.get('broker');\nvar arr_30 = global.get('arr_30');\n// node.warn(arr_30)\nvar arr = global.get('arr');\n// node.warn(arr)\nvar arr_11 = global.get('arr_11');\n// node.warn(arr_30)\n\ntry{\n\n    if (arr_30[1] === 3 && arr_30[2] === 0) {//表示堆垛机状态可以进行发任务\n        const res = await broker.call('@stacker2__c.find', { filters: ['status__c', '=', '1'] });\n        // node.warn(res);\n        node.warn('return 前');\n        if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n        node.warn('return 后');\n\n\n        // 查找优先级为2的  如果有值先执行优先级为2的\n        const Outer = await broker.call('@stacker2__c.find', { filters: ['pri__c', '=', '2'] });\n        // node.warn(res);\n        if (Outer.length >= 1) {\n\n            if (Outer[0].loc_dest__c.toString() === \"1025\" && arr[87] === 0) {\n                await broker.call('@stacker2__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n                let OrderId = Outer[0].plctask__c;\n                let PalletId = Outer[0].pallet_id__c;\n                let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs.length >= 1) {\n                    await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '二号堆垛机正在取货' } });\n                }\n                let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs2.length >= 1) {\n                    await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '二号堆垛机正在取货' } });\n                }\n                let dos2 = Outer[0].loc_start__c;\n                let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                let dos4 = Number(dos2.substring(2, 4));//排\n                let dos5 = Number(dos2.substring(4, 6));//层\n                let dos6 = Number(dos2.substring(6, 8));//列\n                let dos7 = dos2.substring(2, 8);//堆垛机校验\n                let From_Row = dos4;\n                let From_Floor = dos5;\n                let From_Column = dos6;\n                let To_Row = 1;\n                let To_Floor = 1;\n                let To_Column = 1;\n                let Check_Num = dos7 + '010101';\n                let msg1 = { payload: PalletId }\n                let msg2 = { payload: From_Row }\n                let msg3 = { payload: From_Floor }\n                let msg4 = { payload: From_Column }\n                let msg5 = { payload: To_Row }\n                let msg6 = { payload: To_Floor }\n                let msg7 = { payload: To_Column }\n                let msg8 = { payload: Check_Num }\n                let msg9 = { payload: OrderId }\n                return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n            }\n\n\n        } else {\n            // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n            // 这里全部为 优先级为1的数据\n            // 加断点\n\n            let doc = await broker.call('@stacker2__c.find', { filters: [['pri__c', '=', '1']] });\n            for (let i = 0; i < doc.length; i++) {\n                const res = await broker.call('@stacker2__c.find', { filters: ['status__c', '=', '1'] });\n                if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n\n                if (doc[i].loc_dest__c.toString() === \"1019\" && arr[87] === 0) {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '二号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '二号堆垛机正在取货' } });\n                    }\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = dos7 + '010101';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_dest__c.toString() === \"2025\" && arr_11[59] === 0) {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '二号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '二号堆垛机正在取货' } });\n                    }\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = dos7 + '020748';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1022\") {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"2019\" && doc[i].loc_dest__c.toString() !== \"1019\" && arr[87] === 0) {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '010748' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"2019\" && doc[i].loc_dest__c.toString() === \"1019\" && arr[87] === 0) {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1', pri__c: '2' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = '010748010101';\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1037\") {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1032\") {\n                    await broker.call('@stacker2__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '二号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else { /**判断结束 */ }\n\n\n\n            }//for 结束循环\n \n        }//优先级为1的 else 结束\n\n    } \n\n\n}catch(e){}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1720,
        "wires": [
            [
                "9843ccf2af31dbab"
            ]
        ]
    },
    {
        "id": "72f6a2df8bd8d74e",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "9a08fafd6e4e30da"
            ]
        ]
    },
    {
        "id": "9843ccf2af31dbab",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1720,
        "wires": []
    },
    {
        "id": "299c0fe4a678dac4",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "一号堆垛机 - 改",
        "func": "const broker = flow.get('broker');\nvar arr_20 = global.get('arr_20');\n// node.warn(arr_20)\nvar arr = global.get('arr');\nvar arr_11 = global.get('arr_11');\n\n\ntry{\n\n    if (arr_20[1] == 3 && arr_20[2] == 0) {//表示堆垛机状态可以进行发任务\n        const res = await broker.call('@stacker1__c.find', { filters: ['status__c', '=', '1'] }); \n        node.warn('return 前');\n        if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n        node.warn('return 后');\n\n\n        // 查找优先级为2的  如果有值先执行优先级为2的\n        const Outer = await broker.call('@stacker1__c.find', { filters: ['pri__c', '=', '2'] });\n        // node.warn(res);\n        if (Outer.length >= 1) {\n\n            if (Outer[0].loc_dest__c.toString() === \"1025\" && arr[81] === 0) {\n                await broker.call('@stacker1__c.update', { id: Outer[0]._id, doc: { status__c: '1' } });\n                let OrderId = Outer[0].plctask__c;\n                let PalletId = Outer[0].pallet_id__c;\n                let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs.length >= 1) {\n                    await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '一号堆垛机正在取货' } });\n                }\n                let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                if (fDocs2.length >= 1) {\n                    await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '二号堆垛机正在取货' } });\n                }\n                let dos2 = Outer[0].loc_start__c;\n                let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                let dos4 = Number(dos2.substring(2, 4));//排\n                let dos5 = Number(dos2.substring(4, 6));//层\n                let dos6 = Number(dos2.substring(6, 8));//列\n                let dos7 = dos2.substring(2, 8);//堆垛机校验\n                let From_Row = dos4;\n                let From_Floor = dos5;\n                let From_Column = dos6;\n                let To_Row = 1;\n                let To_Floor = 1;\n                let To_Column = 1;\n                let Check_Num = dos7 + '010101';\n                let msg1 = { payload: PalletId }\n                let msg2 = { payload: From_Row }\n                let msg3 = { payload: From_Floor }\n                let msg4 = { payload: From_Column }\n                let msg5 = { payload: To_Row }\n                let msg6 = { payload: To_Floor }\n                let msg7 = { payload: To_Column }\n                let msg8 = { payload: Check_Num }\n                let msg9 = { payload: OrderId }\n                return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n            }\n\n\n        } else {\n            // 如果没有优先级为2的   这里全部为优先级为1的数据  逐个判断条件是否能满足即可\n            // 这里全部为 优先级为1的数据\n            // 加断点\n\n            let doc = await broker.call('@stacker1__c.find', { filters: [['pri__c', '=', '1']] });\n            for (let i = 0; i < doc.length; i++) {\n                const res = await broker.call('@stacker1__c.find', { filters: ['status__c', '=', '1'] });\n                if (res.length >= 1) return; // 表示如果有状态为1时,  return;\n\n\n                if (doc[i].loc_dest__c.toString() === \"1019\" && arr[81] === 0) {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '一号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '一号堆垛机正在取货' } });\n                    }\n\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = dos7 + '010101';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_dest__c.toString() === \"2025\" && arr_11[65] === 0) {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let OrderId = doc[i].plctask__c;\n                    let PalletId = doc[i].pallet_id__c;\n                    let fDocs = await broker.call('@feihe_th__c.find', { filters: [['name', '=', '13'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_th__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '一号堆垛机正在取货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual2__c.find', { filters: [['name', '=', '12'], ['pallet_id__c', '=', PalletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual2__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '一号堆垛机正在取货' } });\n                    }\n                    let dos2 = doc[i].loc_start__c;\n                    let dos3 = Number(dos2.substring(0, 2)); //堆垛机号\n                    let dos4 = Number(dos2.substring(2, 4));//排\n                    let dos5 = Number(dos2.substring(4, 6));//层\n                    let dos6 = Number(dos2.substring(6, 8));//列\n                    let dos7 = dos2.substring(2, 8);//堆垛机校验\n                    let From_Row = dos4;\n                    let From_Floor = dos5;\n                    let From_Column = dos6;\n                    let To_Row = 1;\n                    let To_Floor = 1;\n                    let To_Column = 1;\n                    let Check_Num = dos7 + '020748';\n                    let msg1 = { payload: PalletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1022\" && doc[i].loc_dest__c.toString() !== \"2025\") {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1022\" && doc[i].loc_dest__c.toString() === \"2025\" && arr_11[65] === 0) {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1', pri__c: '2' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '14', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    //这里点对点 人工出库\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let From_Row = 1;\n                    let From_Floor = 1;\n                    let From_Column = 1;\n                    let To_Row = 102;\n                    let To_Floor = 107;\n                    let To_Column = 148;\n                    let Check_Num = '020101020748';\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1037\") {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row =102;\n                    let From_Floor = 101;\n                    let From_Column = 101;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1032\" && doc[i].loc_dest__c.toString() !== \"2025\") {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    let fDocs = await broker.call('@feihe_one__c.find', { filters: [['name', '=', '5'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs.length >= 1) {\n                        await broker.call('@feihe_one__c.update', { id: fDocs[0]._id, doc: { name: '6', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '4', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let doc1 = doc[i].loc_dest__c;//终点位置 010101030000000000    01堆垛机  01 排 01 层 03 列\n                    let doc2 = Number(doc1.substring(0, 2)); //堆垛机号\n                    let doc3 = Number(doc1.substring(2, 4));//排\n                    let doc4 = Number(doc1.substring(4, 6));//层\n                    let doc5 = Number(doc1.substring(6, 8));//列\n                    let doc6 = doc1.substring(2, 8);\n                    let From_Row = 102;\n                    let From_Floor = 101;\n                    let From_Column = 101;\n                    let To_Row = doc3;\n                    let To_Floor = doc4;\n                    let To_Column = doc5;\n                    let Check_Num = '020101' + doc6;\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                } else if (doc[i].loc_start__c.toString() === \"1032\" && doc[i].loc_dest__c.toString() === \"2025\" && arr_11[65] === 0) {\n                    await broker.call('@stacker1__c.update', { id: doc[i]._id, doc: { status__c: '1', pri__c: '2' } });\n                    let palletId = doc[i].pallet_id__c;\n                    let OrderId = doc[i].plctask__c;\n                    // let fDocs = await broker.call('@feihe_one__c.find',{filters:[['name','=','5'],['pallet_id__c','=',palletId],['plctask__c','=',OrderId]]});\n                    // if(fDocs.length >= 1){\n                    //     await broker.call('@feihe_one__c.update',{id: fDocs[0]._id, doc:{name: '14',line_3__c: '一号堆垛机正在接货'}});\n                    // }\n                    // //这里点对点 人工出库\n                    let fDocs2 = await broker.call('@manual__c.find', { filters: [['name', '=', '3'], ['pallet_id__c', '=', palletId], ['plctask__c', '=', OrderId]] });\n                    if (fDocs2.length >= 1) {\n                        await broker.call('@manual__c.update', { id: fDocs2[0]._id, doc: { name: '13', line_3__c: '一号堆垛机正在接货' } });\n                    }\n                    let From_Row = 102;\n                    let From_Floor = 101;\n                    let From_Column = 101;\n                    let To_Row = 102;\n                    let To_Floor = 107;\n                    let To_Column = 148;\n                    let Check_Num = '020101020748';\n                    let msg1 = { payload: palletId }\n                    let msg2 = { payload: From_Row }\n                    let msg3 = { payload: From_Floor }\n                    let msg4 = { payload: From_Column }\n                    let msg5 = { payload: To_Row }\n                    let msg6 = { payload: To_Floor }\n                    let msg7 = { payload: To_Column }\n                    let msg8 = { payload: Check_Num }\n                    let msg9 = { payload: OrderId }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9];\n                }\n\n\n\n\n            }//for 结束循环\n \n        }//优先级为1的 else 结束\n\n    } \n\n\n}catch(e){}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1760,
        "wires": [
            [
                "68d895d4b03ddccb"
            ]
        ]
    },
    {
        "id": "46b7d489926166b1",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1760,
        "wires": [
            [
                "299c0fe4a678dac4"
            ]
        ]
    },
    {
        "id": "68d895d4b03ddccb",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e58bcca06d2c0367",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "立库货架-容器状态初始化",
        "func": "const broker = flow.get('broker');\n// 联想笔记本本机的Steedos数据库\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\n// 2000个项目 - 2000个空箱\n// 托盘号从 123400001 开始计算 123400980 - 123401230 - 123400520\nlet num = 1901;\n// 4001\nfor (let i = 1901; i <= 4000; i++) {\n     \n    let cont = `L${num}` \n    // node.warn(cont);\n    // node.log(cont);\n    \n    let newDoc = {\n        name: '',\n        row__c: '',\n        col__c: '',\n        lay__c: '',\n        container_type__c: '料箱',\n        container_number__c: cont,\n        container_use__c: '空箱',\n        container_zone__c: '立体库',\n        container_status__c: '空', // 状态为 空、 在库\n\n        space: spaceId,\n        created: new Date(),\n        created_by: userId,\n        owner: userId,\n    }\n    // node.warn(newDoc);\n    await broker.call('@pc_auto_status__c.insert', { doc: newDoc });\n    \n    num++\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "9084e8a8e137f463"
            ]
        ]
    },
    {
        "id": "fa2f91b709560939",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "e58bcca06d2c0367"
            ]
        ]
    },
    {
        "id": "9084e8a8e137f463",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 200,
        "wires": []
    },
    {
        "id": "a4f163594be50b5a",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "ERP详情数据区分 普通库和立库 - 备份",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n// 功能\n// **erp数据详情表中新增加的的数据需要区分立库和普通库**\n// 1. 新增加的数据为普通库、区分是否是项目属性的物料\n//    1. 错误提示1：如果基础物料没有该物料、就提示未查找到该物料\n// 2. 新增加的数据为立体库\n//    1. 物料信息维护表中带有装箱量\n//    2. 需要根据到货数量去查找表有是否有该原料\n//    3. 如果有、是否带项目属性\n//    4. 来区分该分配几个空箱并写到WMS分配表中\n//    5. 提示错误1：数据详情表中是否有该原料、如果没有在erp数据详情中提示、未找到该物料\n//    6. 提示错误2：库中是否有空箱、如果没有、那么提示库中没有多余的空箱了\n \n\nconst Arr = await broker.call('@pc_erp_data__c.find'); // 数据详情表\n// node.warn(Arr[4]);  // Arr[4] === req.query\nconst documentNumber = Arr[4].document_number__c; // erp单号\nconst docType = Arr[4].doc_type__c; // 单据类型：采购订单...\nconst id = Arr[4]._id; // 635bddb2ba8ddd4d1068aadb \nconst materialCode = Arr[4].material_code__c.trim(); // 物料代码：B.004.004.026 \nconst materialName = Arr[4].material_name__c.trim(); // 物料名称：8PT3599 \nconst specification = Arr[4].specifications__c.trim(); // 规格型号：转接件（上） \nconst arrivalQuantity = Arr[4].arrive_number__c; // 到货数量: 80 \nconst projectAttr = Arr[4].project_attr__c.trim(); // 项目属性: P20015\n// 维护表中的数据千万不能有空格啊 真坑\n\nlet query = [\n    ['material_code__c', '=', materialCode], \n    ['material_name__c', '=', materialName], \n    ['specifications__c', '=', specification]\n];\nconst fDocs = await broker.call('@pc_material_data__c.find', { filters: [...query] } );\n// node.warn(fDocs[0]);\n\nif(fDocs.length === 1){\n    if (fDocs[0].warehouse_name__c === '立体库'){\n        // 如果是立库就有装箱量\n        // TODO: 1 更新erp-数据详情表\n        // TODO: 2 查询WMS容器操作记录表 是否有该原料及项目情况\n        // TODO: 3 写入xxx表中分配几个空箱\n        // TODO: 4 库中是否有空箱、如果没有、那么提示库中没有多余的空箱了 \n\n\n        // 装箱量 - 立库才有装箱量 - 根据物料基础数据维护表中\n        const QTY = fDocs[0].binning_number__c;\n\n        async function addDataProject(row,col,lay,boxNumber, projectAttribute, Quantity) { //箱号、项目属性、放入数量\n            // node.warn(\"执行次数\"); \n            let newDoc3 = {\n                container_type__c: '料箱',\n                container_number__c: boxNumber, //箱号\n                row__c: row,\n                col__c: col,\n                lay__c: lay,\n                container_use__c: '原料',\n                material_code__c: materialCode,\n                material_name__c: materialName,\n                specifications__c: specification,\n                project_number__c: projectAttribute,\n                box_number__c: Quantity, // 放入数量\n                document_number__c: documentNumber, // erp单号\n                operation__c: docType, // 单据类型\n                picking_areas__c: '投料区', // 拣货区域\n\n                space: spaceId,\n                created: new Date(),\n                created_by: userId,\n                owner: userId,\n            }\n            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n        }\n\n\n\n\n\n\n\n        if (projectAttr){// 表示带有项目属性的 - 查找库中是否有相同箱子的 \n\n\n            // 第一次 query\n            let query = [\n                ['material_code__c', '=', materialCode],\n                ['material_name__c', '=', materialName],\n                ['specifications__c', '=', specification],\n                ['project_number__c', '=', projectAttr]\n            ];\n            const pcMaterial = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n            // node.warn(pcMaterial);\n \n\n            if (pcMaterial.length) {// 表示立库中存在物料代码、规格型号、项目属性相同的箱子 - 计算属性\n                // node.warn(\"库中存在物料代码、规格型号、项目属性相同的箱子\");\n                // 计算数量、要出哪个箱子和分配几个空箱\n                // 分配空箱和箱号、判断库中箱子是否匹配成功\n                // 如何分配：\n                //      1 根据当前数量和装箱量来判断数组中哪个条件不满足\n                //      2 用装箱量 - 当前数量 = 这个箱子要装几个\n                //      2 到货数量 - 这个箱子要装几个 = 剩余数量(除了分配库中的还是分配多少个空箱)\n                //      3 Math.ceil(剩余数量/装箱) = 表示分配几个空箱 - 向上取整\n                //      3 剩余数量 % 装箱 = X个并取余(最后一个箱子放的个数)    20/40=0.5    12/5=2.4\n\n\n                // 不能用forEach、应该使用for循环\n                pcMaterial.forEach(async function(item) {\n                    // node.warn(item);\n                    if (item.now_number__c < QTY){// 当前数量 小于 装箱量\n                        const containerNumber = item.container_number__c; // 箱号\n                        const materialCode = item.material_code__c; // 物料代码\n                        const materialName = item.material_name__c; // 物料名称\n                        const specifications = item.specifications__c; // 规格型号\n                        const projectNumber = item.project_number__c; // 项目编号\n\n                        // 标记出这个箱子并计算还要几个箱子\n                        const differ = QTY - item.now_number__c; \n                        const surplus =  arrivalQuantity - differ;\n                        // node.warn(surplus);\n                        if (surplus > 0){ \n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n                            \n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['row__c', '!=', '']],\n                                top: emptyBox,\n                                // sort: 'col__c asc',\n                            });\n                            // node.warn(rs);\n                            // 1 2 3\n                            if (rs.length === emptyBox){// 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n\n                                // 1 更新erp-数据详情表\n                                await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                                // 1. 原料箱子 \n                                let newDoc = {\n                                    container_type__c: '料箱',\n                                    container_number__c: containerNumber,\n                                    container_use__c: '原料',\n                                    material_code__c: materialCode,\n                                    material_name__c: materialName,\n                                    specifications__c: specifications,\n                                    project_number__c: projectNumber,\n                                    box_number__c: differ, // 放入数量\n                                    document_number__c: documentNumber, // erp单号\n                                    operation__c: docType, // 单据类型\n\n                                    space: spaceId,\n                                    created: new Date(),\n                                    created_by: userId,\n                                    owner: userId,\n                                }\n                                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc });\n\n                                // 2. 空箱子\n                                if(surplus > QTY){\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let index = 0; index < rs.length; index++) {\n                                            let newDoc3 = {\n                                                container_type__c: '料箱',\n                                                container_number__c: rs[index].container_number__c,\n                                                container_use__c: '原料',\n                                                material_code__c: materialCode,\n                                                material_name__c: materialName,\n                                                specifications__c: specification,\n                                                project_number__c: projectAttr,\n                                                box_number__c: QTY, // 放入数量\n                                                document_number__c: documentNumber, // erp单号\n                                                operation__c: docType, // 单据类型\n\n                                                space: spaceId,\n                                                created: new Date(),\n                                                created_by: userId,\n                                                owner: userId,\n                                            }\n                                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let index = 0; index < rs.length - 1; index++) {\n                                            // 增加x个 \n                                            let newDoc2 = {\n                                                container_type__c: '料箱',\n                                                container_number__c: rs[index].container_number__c,\n                                                container_use__c: '原料',\n                                                material_code__c: materialCode,\n                                                material_name__c: materialName,\n                                                specifications__c: specification,\n                                                project_number__c: projectAttr,\n                                                box_number__c: QTY, // 放入数量\n                                                document_number__c: documentNumber, // erp单号\n                                                operation__c: docType, // 单据类型\n\n                                                space: spaceId,\n                                                created: new Date(),\n                                                created_by: userId,\n                                                owner: userId,\n                                            }\n                                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc2 });\n                                        }\n                                        // 空箱 最后体格 第x个 rs[rs.length-1]\n                                        let newDoc3 = {\n                                            container_type__c: '料箱',\n                                            container_number__c: rs[rs.length - 1].container_number__c,\n                                            container_use__c: '原料',\n                                            material_code__c: materialCode,\n                                            material_name__c: materialName,\n                                            specifications__c: specification,\n                                            project_number__c: projectAttr,\n                                            box_number__c: rest, // 放入数量\n                                            document_number__c: documentNumber, // erp单号\n                                            operation__c: docType, // 单据类型\n\n                                            space: spaceId,\n                                            created: new Date(),\n                                            created_by: userId,\n                                            owner: userId,\n                                        }\n                                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                    }\n                                }else if(surplus == QTY){//放入的数量是剩余数量\n                                    let newDoc3 = {\n                                        container_type__c: '料箱',\n                                        container_number__c: rs[0].container_number__c,\n                                        container_use__c: '原料',\n                                        material_code__c: materialCode,\n                                        material_name__c: materialName,\n                                        specifications__c: specification,\n                                        project_number__c: projectAttr,\n                                        box_number__c: surplus, // 放入数量\n                                        document_number__c: documentNumber, // erp单号\n                                        operation__c: docType, // 单据类型\n\n                                        space: spaceId,\n                                        created: new Date(),\n                                        created_by: userId,\n                                        owner: userId,\n                                    }\n                                    await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                }else if(surplus < QTY){//放入箱子里面的是余数\n                                    let newDoc3 = {\n                                        container_type__c: '料箱',\n                                        container_number__c: rs[0].container_number__c,\n                                        container_use__c: '原料',\n                                        material_code__c: materialCode,\n                                        material_name__c: materialName,\n                                        specifications__c: specification,\n                                        project_number__c: projectAttr,\n                                        box_number__c: rest, // 放入数量\n                                        document_number__c: documentNumber, // erp单号\n                                        operation__c: docType, // 单据类型\n\n                                        space: spaceId,\n                                        created: new Date(),\n                                        created_by: userId,\n                                        owner: userId,\n                                    }\n                                    await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                }\n\n \n\n                            }else{\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', { id, doc: {\n                                    ware_attr__c: '立体库', \n                                    other__c: '分配失败,空箱不足,库中存在相同物料'\n                                } });\n                            }\n\n                        }else{\n                            // 小于0 表示只出这个箱子即可、不用再分配新的空箱了 - 标记库中空箱不足、分配失败\n                            // TODO: 1 更新erp表\n                            // TODO: 2 将这个原料箱子写入 待上架原料表中 \n                            // 1 更新erp-数据详情表\n                            await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                            // 3 将分配的所有箱子都写入待入库表 - pc_auto_waiting__c \n                            // // 原料箱子\n                            let newDoc = {\n                                container_type__c: '料箱',\n                                container_number__c: containerNumber,\n                                container_use__c: '原料',\n                                material_code__c: materialCode,\n                                material_name__c: materialName,\n                                specifications__c: specifications,\n                                project_number__c: projectNumber,\n                                box_number__c: arrivalQuantity, // 放入数量\n                                document_number__c: documentNumber, // erp单号\n                                operation__c: docType, // 单据类型\n\n                                space: spaceId,\n                                created: new Date(),\n                                created_by: userId,\n                                owner: userId,\n                            }\n                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc });\n                        }\n\n\n                        // break\n                    }\n                })\n\n\n            } else {// 库中不存在物料代码、规格型号、项目属性相同的箱子 - 直接分配空箱\n                // node.warn(\"库中不存在物料代码、规格型号、项目属性相同的箱子\"); \n\n                // 同上、要分配几个空箱、最后一个取余、要放的余数 ? 错误的\n                // Math.ceil(到货数量/装箱量) = 箱数\n                // 到货数量%装箱量 = 最后一箱的数量\n                // 分配空箱和箱号、判断库中箱子是否匹配成功 - 成功、失败\n                const emptyBox = Math.ceil(arrivalQuantity / QTY); // 3/40=1, 20/6=4, 40/40=1\n                const rest = arrivalQuantity % QTY; \n                const rs = await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                    top: emptyBox,\n                    // sort: 'col__c asc',\n                });\n                // node.warn(rs);\n                if (rs.length === emptyBox){// 要获取的箱子个数是没问你的、下面要处理箱数的问题 \n                    // 1 更新erp-数据详情表\n                    await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n                    if (arrivalQuantity > QTY){//这里面还要判断、余数是否等于0的问题\n                        if (rest === 0) {//取余===0、// 10,10,10\n                            node.warn(\"取余===0\");\n\n                            for (let i = 0; i < rs.length; i++) {  \n                                // 排、列、层、箱号、项目属性、放入数量\n                                addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY)\n                            }\n                        } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                            for (let i = 0; i < rs.length - 1; i++) {\n                                // 增加x个 \n                                let newDoc2 = {\n                                    container_type__c: '料箱',\n                                    container_number__c: rs[i].container_number__c,\n                                    container_use__c: '原料',\n                                    material_code__c: materialCode,\n                                    material_name__c: materialName,\n                                    specifications__c: specification,\n                                    project_number__c: projectAttr,\n                                    box_number__c: QTY, // 放入数量\n                                    document_number__c: documentNumber, // erp单号\n                                    operation__c: docType, // 单据类型\n\n                                    space: spaceId,\n                                    created: new Date(),\n                                    created_by: userId,\n                                    owner: userId,\n                                }\n                                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc2 });\n                                addDataProject(rs[i].row__c, rs[i].col__c, rs[i].lay__c, rs[i].container_number__c, projectAttr, QTY)\n                            }\n                            // 空箱 最后体格 第x个 rs[rs.length-1]\n                            let newDoc3 = {\n                                container_type__c: '料箱',\n                                container_number__c: rs[rs.length - 1].container_number__c,\n                                container_use__c: '原料',\n                                material_code__c: materialCode,\n                                material_name__c: materialName,\n                                specifications__c: specification,\n                                project_number__c: projectAttr,\n                                box_number__c: rest, // 放入数量\n                                document_number__c: documentNumber, // erp单号\n                                operation__c: docType, // 单据类型\n\n                                space: spaceId,\n                                created: new Date(),\n                                created_by: userId,\n                                owner: userId,\n                            }\n                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                        }\n                    } else if (arrivalQuantity == QTY) {//分配一个空箱即可，放入数量为 到货数量\n                        let newDoc3 = {\n                            container_type__c: '料箱',\n                            container_number__c: rs[0].container_number__c,\n                            container_use__c: '原料',\n                            material_code__c: materialCode,\n                            material_name__c: materialName,\n                            specifications__c: specification,\n                            project_number__c: projectAttr,\n                            box_number__c: arrivalQuantity, // 放入数量\n                            document_number__c: documentNumber, // erp单号\n                            operation__c: docType, // 单据类型\n\n                            space: spaceId,\n                            created: new Date(),\n                            created_by: userId,\n                            owner: userId,\n                        }\n                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                    } else if (arrivalQuantity < QTY) {//分配一个空箱即可，放入数量为 余数 \n                        let newDoc3 = {\n                            container_type__c: '料箱',\n                            container_number__c: rs[0].container_number__c,\n                            container_use__c: '原料',\n                            material_code__c: materialCode,\n                            material_name__c: materialName,\n                            specifications__c: specification,\n                            project_number__c: projectAttr,\n                            box_number__c: rest, // 放入数量\n                            document_number__c: documentNumber, // erp单号\n                            operation__c: docType, // 单据类型\n\n                            space: spaceId,\n                            created: new Date(),\n                            created_by: userId,\n                            owner: userId,\n                        }\n                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                    }\n                   \n\n\n                }else{\n                    // 分配失败、空箱数量不足\n                    await broker.call('@pc_erp_data__c.update', {\n                        id, doc: {\n                            ware_attr__c: '立体库',\n                            other__c: '分配失败,空箱不足,库中不存在相同物料'\n                        }\n                    });\n                }\n            }\n            \n        } else {// 表示不带项目属性的 - 查找库中是否有相同箱子的\n            \n\n            // 第二次 query\n            let query = [\n                ['material_code__c', '=', materialCode],\n                ['material_name__c', '=', materialName],\n                ['specifications__c', '=', specification],\n            ];\n            const pcMaterial = await broker.call('@pc_auto_record__c.find', { filters: [...query] });\n            // node.warn(pcMaterial);\n\n\n            if (pcMaterial.length) {// 表示立库中存在物料代码、规格型号、项目属性相同的箱子 - 计算属性\n                // node.warn(\"库中存在物料代码、规格型号、项目属性相同的箱子\");\n                // 计算数量、要出哪个箱子和分配几个空箱\n                // 分配空箱和箱号、判断库中箱子是否匹配成功\n                // 如何分配：\n                //      1 根据当前数量和装箱量来判断数组中哪个条件不满足\n                //      2 用装箱量 - 当前数量 = 这个箱子要装几个\n                //      2 到货数量 - 这个箱子要装几个 = 剩余数量(除了分配库中的还是分配多少个空箱)\n                //      3 Math.ceil(剩余数量/装箱) = 表示分配几个空箱 - 向上取整\n                //      3 剩余数量 % 装箱 = X个并取余(最后一个箱子放的个数)    20/40=0.5    12/5=2.4\n                pcMaterial.forEach(async function (item) {\n                    // node.warn(item);\n                    if (item.now_number__c < QTY) {// 当前数量 小于 装箱量\n                        const containerNumber = item.container_number__c; // 箱号\n                        const materialCode = item.material_code__c; // 物料代码\n                        const materialName = item.material_name__c; // 物料名称\n                        const specifications = item.specifications__c; // 规格型号\n\n                        // 标记出这个箱子并计算还要几个箱子\n                        const differ = QTY - item.now_number__c;\n                        const surplus = arrivalQuantity - differ;\n                        // node.warn(surplus);\n                        if (surplus > 0) {\n                            const emptyBox = Math.ceil(surplus / QTY);\n                            // 最后一个箱子放入的数量\n                            const rest = surplus % QTY;\n\n                            // 表中查询过滤条件为emptyBox数即可\n                            const rs = await broker.call('@pc_auto_status__c.find', {\n                                filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                                top: emptyBox,\n                                // sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n                            });\n                            // node.warn(rs);\n                            // 1 2 3\n                            if (rs.length === emptyBox) {// 库中空箱数量 === 查找的空箱数\n                                // 操作哪些表\n                                // TODO: 1 已找到库中空箱个数\n                                // TODO: 2 标记立库货架容器状态表及获取箱号 - 原料入库\n                                // TODO: 3 获取立库货架容器操作记录表中要出库的箱号及要放入原料的数量\n                                // TODO: 4 更新erp-数据详情表中的仓库属性为立体库\n                                // TODO: 5 最终写入到立库货架-待上架原料表中erp及单号及要进行的原料放入数量及空箱个数及原料个数\n\n                                // 1 更新erp-数据详情表\n                                await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                                // 1. 原料箱子 \n                                let newDoc = {\n                                    container_type__c: '料箱',\n                                    container_number__c: containerNumber,\n                                    container_use__c: '原料',\n                                    material_code__c: materialCode,\n                                    material_name__c: materialName,\n                                    specifications__c: specifications,\n                                    box_number__c: differ, // 放入数量\n                                    document_number__c: documentNumber, // erp单号\n                                    operation__c: docType, // 单据类型\n\n                                    space: spaceId,\n                                    created: new Date(),\n                                    created_by: userId,\n                                    owner: userId,\n                                }\n                                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc });\n\n                                // 2. 空箱子\n                                if (surplus > QTY) {\n                                    if (rest === 0) {//取余===0、// 10,10,10\n                                        for (let index = 0; index < rs.length; index++) {\n                                            let newDoc3 = {\n                                                container_type__c: '料箱',\n                                                container_number__c: rs[index].container_number__c,\n                                                container_use__c: '原料',\n                                                material_code__c: materialCode,\n                                                material_name__c: materialName,\n                                                specifications__c: specification,\n                                                box_number__c: QTY, // 放入数量\n                                                document_number__c: documentNumber, // erp单号\n                                                operation__c: docType, // 单据类型\n\n                                                space: spaceId,\n                                                created: new Date(),\n                                                created_by: userId,\n                                                owner: userId,\n                                            }\n                                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                        }\n                                    } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                                        for (let index = 0; index < rs.length - 1; index++) {\n                                            // 增加x个 \n                                            let newDoc2 = {\n                                                container_type__c: '料箱',\n                                                container_number__c: rs[index].container_number__c,\n                                                container_use__c: '原料',\n                                                material_code__c: materialCode,\n                                                material_name__c: materialName,\n                                                specifications__c: specification,\n                                                box_number__c: QTY, // 放入数量\n                                                document_number__c: documentNumber, // erp单号\n                                                operation__c: docType, // 单据类型\n\n                                                space: spaceId,\n                                                created: new Date(),\n                                                created_by: userId,\n                                                owner: userId,\n                                            }\n                                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc2 });\n                                        }\n                                        // 空箱 最后体格 第x个 rs[rs.length-1]\n                                        let newDoc3 = {\n                                            container_type__c: '料箱',\n                                            container_number__c: rs[rs.length - 1].container_number__c,\n                                            container_use__c: '原料',\n                                            material_code__c: materialCode,\n                                            material_name__c: materialName,\n                                            specifications__c: specification,\n                                            box_number__c: rest, // 放入数量\n                                            document_number__c: documentNumber, // erp单号\n                                            operation__c: docType, // 单据类型\n\n                                            space: spaceId,\n                                            created: new Date(),\n                                            created_by: userId,\n                                            owner: userId,\n                                        }\n                                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                    }\n                                } else if (surplus == QTY) {//放入的数量是剩余数量\n                                    let newDoc3 = {\n                                        container_type__c: '料箱',\n                                        container_number__c: rs[0].container_number__c,\n                                        container_use__c: '原料',\n                                        material_code__c: materialCode,\n                                        material_name__c: materialName,\n                                        specifications__c: specification,\n                                        box_number__c: surplus, // 放入数量\n                                        document_number__c: documentNumber, // erp单号\n                                        operation__c: docType, // 单据类型\n\n                                        space: spaceId,\n                                        created: new Date(),\n                                        created_by: userId,\n                                        owner: userId,\n                                    }\n                                    await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                } else if (surplus < QTY) {//放入箱子里面的是余数\n                                    let newDoc3 = {\n                                        container_type__c: '料箱',\n                                        container_number__c: rs[0].container_number__c,\n                                        container_use__c: '原料',\n                                        material_code__c: materialCode,\n                                        material_name__c: materialName,\n                                        specifications__c: specification,\n                                        box_number__c: rest, // 放入数量\n                                        document_number__c: documentNumber, // erp单号\n                                        operation__c: docType, // 单据类型\n\n                                        space: spaceId,\n                                        created: new Date(),\n                                        created_by: userId,\n                                        owner: userId,\n                                    }\n                                    await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                                }\n\n\n\n                            } else {\n                                // 更新失败即可 - 分配失败 - 其他字段为库中空箱个数不足 - erp数据详情表\n                                // 更新表 - 不做处理\n                                await broker.call('@pc_erp_data__c.update', {\n                                    id, doc: {\n                                        ware_attr__c: '立体库',\n                                        other__c: '分配失败,空箱不足,库中存在相同物料'\n                                    }\n                                });\n                            }\n\n                        } else {\n                            // 小于0 表示只出这个箱子即可、不用再分配新的空箱了 - 标记库中空箱不足、分配失败\n                            // TODO: 1 更新erp表\n                            // TODO: 2 将这个原料箱子写入 待上架原料表中 \n                            // 1 更新erp-数据详情表\n                            await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n\n                            // 3 将分配的所有箱子都写入待入库表 - pc_auto_waiting__c \n                            // // 原料箱子\n                            let newDoc = {\n                                container_type__c: '料箱',\n                                container_number__c: containerNumber,\n                                container_use__c: '原料',\n                                material_code__c: materialCode,\n                                material_name__c: materialName,\n                                specifications__c: specifications,\n                                box_number__c: arrivalQuantity, // 放入数量\n                                document_number__c: documentNumber, // erp单号\n                                operation__c: docType, // 单据类型\n\n                                space: spaceId,\n                                created: new Date(),\n                                created_by: userId,\n                                owner: userId,\n                            }\n                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc });\n                        }\n\n                    }\n                })\n\n\n            } else {// 库中不存在物料代码、规格型号、项目属性相同的箱子 - 直接分配空箱\n                // node.warn(\"库中不存在物料代码、规格型号、项目属性相同的箱子\"); \n\n                // 同上、要分配几个空箱、最后一个取余、要放的余数 ? 错误的\n                // Math.ceil(到货数量/装箱量) = 箱数\n                // 到货数量%装箱量 = 最后一箱的数量\n                // 分配空箱和箱号、判断库中箱子是否匹配成功 - 成功、失败\n                const emptyBox = Math.ceil(arrivalQuantity / QTY); // 3/40=1, 20/6=4, 40/40=1\n                // node.warn(emptyBox);\n                const rest = arrivalQuantity % QTY;\n                // node.warn(rest);\n                // return\n                const rs = await broker.call('@pc_auto_status__c.find', {\n                    filters: [['container_use__c', '=', '空箱'], ['container_status__c', '=', '在库']],\n                    top: emptyBox,\n                    // sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n                });\n                // node.warn(rs);\n                if (rs.length === emptyBox) {// 要获取的箱子个数是没问你的、下面要处理箱数的问题 \n                    // 1 更新erp-数据详情表\n                    await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '立体库' } });\n                    if (arrivalQuantity > QTY) {//这里面还要判断、余数是否等于0的问题\n                        if (rest === 0) {//取余===0、// 10,10,10\n                            for (let index = 0; index < rs.length; index++) {\n                                let newDoc3 = {\n                                    container_type__c: '料箱',\n                                    container_number__c: rs[index].container_number__c,\n                                    container_use__c: '原料',\n                                    material_code__c: materialCode,\n                                    material_name__c: materialName,\n                                    specifications__c: specification,\n                                    box_number__c: QTY, // 放入数量\n                                    document_number__c: documentNumber, // erp单号\n                                    operation__c: docType, // 单据类型\n\n                                    space: spaceId,\n                                    created: new Date(),\n                                    created_by: userId,\n                                    owner: userId,\n                                }\n                                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                            }\n                        } else {//取余!==0、18,18,6、前两个正常、最后一个为余数\n                            for (let index = 0; index < rs.length - 1; index++) {\n                                // 增加x个 \n                                let newDoc2 = {\n                                    container_type__c: '料箱',\n                                    container_number__c: rs[index].container_number__c,\n                                    container_use__c: '原料',\n                                    material_code__c: materialCode,\n                                    material_name__c: materialName,\n                                    specifications__c: specification,\n                                    box_number__c: QTY, // 放入数量\n                                    document_number__c: documentNumber, // erp单号\n                                    operation__c: docType, // 单据类型\n\n                                    space: spaceId,\n                                    created: new Date(),\n                                    created_by: userId,\n                                    owner: userId,\n                                }\n                                await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc2 });\n                            }\n                            // 空箱 最后体格 第x个 rs[rs.length-1]\n                            let newDoc3 = {\n                                container_type__c: '料箱',\n                                container_number__c: rs[rs.length - 1].container_number__c,\n                                container_use__c: '原料',\n                                material_code__c: materialCode,\n                                material_name__c: materialName,\n                                specifications__c: specification,\n                                box_number__c: rest, // 放入数量\n                                document_number__c: documentNumber, // erp单号\n                                operation__c: docType, // 单据类型\n\n                                space: spaceId,\n                                created: new Date(),\n                                created_by: userId,\n                                owner: userId,\n                            }\n                            await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                        }\n                    } else if (arrivalQuantity == QTY) {//分配一个空箱即可，放入数量为 到货数量\n                        let newDoc3 = {\n                            container_type__c: '料箱',\n                            container_number__c: rs[0].container_number__c,\n                            container_use__c: '原料',\n                            material_code__c: materialCode,\n                            material_name__c: materialName,\n                            specifications__c: specification,\n                            box_number__c: arrivalQuantity, // 放入数量\n                            document_number__c: documentNumber, // erp单号\n                            operation__c: docType, // 单据类型\n\n                            space: spaceId,\n                            created: new Date(),\n                            created_by: userId,\n                            owner: userId,\n                        }\n                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                    } else if (arrivalQuantity < QTY) {//分配一个空箱即可，放入数量为 余数\n                        let newDoc3 = {\n                            container_type__c: '料箱',\n                            container_number__c: rs[0].container_number__c,\n                            container_use__c: '原料',\n                            material_code__c: materialCode,\n                            material_name__c: materialName,\n                            specifications__c: specification,\n                            box_number__c: rest, // 放入数量\n                            document_number__c: documentNumber, // erp单号\n                            operation__c: docType, // 单据类型\n\n                            space: spaceId,\n                            created: new Date(),\n                            created_by: userId,\n                            owner: userId,\n                        }\n                        await broker.call('@pc_auto_waiting__c.insert', { doc: newDoc3 });\n                    }\n\n\n\n                } else {\n                    // 分配失败、空箱数量不足\n                    await broker.call('@pc_erp_data__c.update', {\n                        id, doc: {\n                            ware_attr__c: '立体库',\n                            other__c: '分配失败,空箱不足,库中不存在相同物料'\n                        }\n                    });\n                }\n            }\n\n\n\n\n        }// 不带项目属性的物料结束\n\n    }else{\n        // 表示：普通库、不用计算箱子、直接放到货架上即可\n        // 表示：其他种类：普通库、钣金、铜...\n        // 更新数据详情表中的[仓库属性字段]为[ware_attr__c]\n        await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: fDocs[0].warehouse_name__c } });\n    }\n}else{\n    // 表示：在物料基础分类表中未找到该物料\n    // 更新该条查找的数据\n    // 仓库属性为 数据不存在或数据不唯一\n    // 更新数据详情表中的[仓库属性字段]为[数据不存在或数据不唯一]\n    // node.warn(\"数据不存在或数据不唯一\"); \n    await broker.call('@pc_erp_data__c.update', { id, doc: { ware_attr__c: '未找到' } });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "10faee5e0fde24fb",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "查询物料代码是否有相同的",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n \nconst res = await broker.call('@pc_material_data__c.find');\nnode.warn(res.length)\n// node.warn(res)\nconst newListLength = new Set(res.map(item => item.material_code__c)).size;\nnode.warn(newListLength);\nif (res.length > newListLength){\n    node.warn('重复');\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 680,
        "wires": [
            [
                "5b8a1c5c6357ed85"
            ]
        ]
    },
    {
        "id": "c27556f8bcbba08d",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "10faee5e0fde24fb"
            ]
        ]
    },
    {
        "id": "5b8a1c5c6357ed85",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 680,
        "wires": []
    },
    {
        "id": "12de9bb49a19d0a9",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "5db3c24566827bcb"
            ]
        ]
    },
    {
        "id": "5db3c24566827bcb",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "普通库数据包含普通条件",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\nconst findData = await broker.call('@pc_erp_data__c.find');\n\nconst fDocs = findData.filter(item => {\n    // 仓库属性包含 普通   item.ware_attr__c\n    if (item.ware_attr__c){\n        return item.ware_attr__c.indexOf('普通') != -1;\n    }\n})\n\nnode.warn(fDocs)\n\n \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "fe7e2a3495889fd3"
            ]
        ]
    },
    {
        "id": "fe7e2a3495889fd3",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 720,
        "wires": []
    },
    {
        "id": "ed7dd0793b502166",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1840,
        "wires": [
            [
                "83c02e3b26d73c3b"
            ]
        ]
    },
    {
        "id": "83c02e3b26d73c3b",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "删除入库申请111的任务 - 时间超过24小时的",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n// 操作WCS入库任务\n// 查询条件为funcode===111\n// 一层\nconst arr = await broker.call('@pc_wcs_route__c.find', { filters: ['types__c', '=', '入库']});\narr.forEach(async function(item) {\n    if ((new Date().getTime() - new Date(item['created']).getTime()) / 86400000 > 1){\n        // 删除这个item即可 \n        await broker.call('@pc_wcs_route__c.delete', { id: item._id });\n    }\n});\n\n\n// 三层\nconst arr2 = await broker.call('@pc_wcs_route__c.find', { filters: ['types__c', '=', '入库'] });\n// node.warn(rest);\narr2.forEach(async function (item) {\n    if ((new Date().getTime() - new Date(item['created']).getTime()) / 86400000 > 1) {\n        // 删除这个item即可 \n        await broker.call('@pc_wcs_route__c.delete', { id: item._id });\n    }\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1840,
        "wires": [
            [
                "b87c15704aab2863"
            ]
        ]
    },
    {
        "id": "b87c15704aab2863",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1840,
        "wires": []
    },
    {
        "id": "ddcf14ba041b9445",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1880,
        "wires": [
            [
                "d59adf5d82ca3745"
            ]
        ]
    },
    {
        "id": "d59adf5d82ca3745",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "删除码垛任务大于5天的任务",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n// // 操作WCS入库任务\n// // 查询条件为funcode===111\n// // 一层\n// const arr = await broker.call('@pc_wcs_route__c.find', { filters: ['types__c', '=', '入库']});\n// arr.forEach(async function(item) {\n//     if ((new Date().getTime() - new Date(item['created']).getTime()) / 86400000 > 1){\n//         // 删除这个item即可 \n//         await broker.call('@pc_wcs_route__c.delete', { id: item._id });\n//     }\n// });\n\n\n// // 三层\n// const arr2 = await broker.call('@pc_wcs_route__c.find', { filters: ['types__c', '=', '入库'] });\n// // node.warn(rest);\n// arr2.forEach(async function (item) {\n//     if ((new Date().getTime() - new Date(item['created']).getTime()) / 86400000 > 1) {\n//         // 删除这个item即可 \n//         await broker.call('@pc_wcs_route__c.delete', { id: item._id });\n//     }\n// });\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1880,
        "wires": [
            [
                "fdee3213f7f04484"
            ]
        ]
    },
    {
        "id": "fdee3213f7f04484",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1880,
        "wires": []
    },
    {
        "id": "d561c7b390f80df0",
        "type": "comment",
        "z": "bf5593c3c002083d",
        "name": "更换NodeId及SpaceId",
        "info": "",
        "x": 600,
        "y": 60,
        "wires": []
    },
    {
        "id": "351fd80249e7ff05",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "momentjs",
        "func": "const moment = global.get('moment')\nnode.warn(moment);\nconst time = '2022-08-30 00:56:20.687Z';\nvar mtime = moment(time).format('YYYY-MM-DD hh:mm:ss')\nnode.warn('最后修改时间 = ' + mtime);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e391444f56e20960",
        "type": "inject",
        "z": "bf5593c3c002083d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "136f09e4c9b992ed"
            ]
        ]
    },
    {
        "id": "136f09e4c9b992ed",
        "type": "function",
        "z": "bf5593c3c002083d",
        "name": "普通货架读取",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\nlet newDoc = [\n    ['_id', '=', \"6300ea52ab764340d0d047f1\"],\n    ['_id', '=', '6300ea7fab764340d0d047f2']\n] \nconst res = await broker.call('@mes_bom.find' ); \n\nnode.warn(res);\n\n\nconst outStock = await broker.call('@pc_wcs_out_route__c.find', {\n    fields: ['_id', 'name', 'row__c', 'col__c', 'lay__c', 'status__c', 'con__c'],\n    filters: [['pallet_number__c', '=', 'pallet']],\n    top: 1,\n    sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n}); ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "ae541f9891442dfb"
            ]
        ]
    },
    {
        "id": "ae541f9891442dfb",
        "type": "debug",
        "z": "bf5593c3c002083d",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 880,
        "wires": []
    },
    {
        "id": "2cb3b4a1debd02bd",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "48fcfb59d3228af8"
            ]
        ]
    },
    {
        "id": "48fcfb59d3228af8",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "待上架原料出库处理 - 通过按钮发送请求",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n// 模拟人员选择原料表中要出库的数据\nconst selectRows = await broker.call('@pc_auto_waiting__c.find');  \n// node.warn(selectRows);\n\n\n// 使用filter函数处理selectRows数组、返回没有已选择的新数组\nconst newRows = selectRows.filter(item => item.name !== '已选择') \n// const newRows = selectRows.filter(item => item.name === '已选择') \n// node.warn(newRows);\n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n}\n\n\nnewRows.forEach(async function(item) {\n    // node.warn(item);\n    // 1.写入WCS入库任务\n    // 2.写入堆垛机表\n    // 3.标记name值为'已选择' \n    const { container_number__c, row__c, col__c, lay__c, } = item; \n    // 排列层是字符串格式的\n    \n\n    const plctask = '8' + Math.random().toString().substring(2, 10); // 9位 \n\n    // let startLoc = ''; \n    // if (row__c.toString().length === 1) { startLoc += `0${row__c}` };\n    // if (col__c.toString().length === 1) { startLoc += `0${col__c}` } else { startLoc += col__c.toString() }\n    // if (lay__c.toString().length === 1) { startLoc += `0${lay__c}` } else { startLoc += lay__c.toString() }\n    // startLoc += '0000';\n\n    let startLoc = '';\n    startLoc += `0${row__c}`;\n    startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n    startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n    startLoc += '0000';\n\n    const isHas =  item.container_use__c == '空箱' ? '无' : '有';\n\n    \n    // 写入一条WCS出库任务、优先级\n    await broker.call('@pc_wcs_out_route__c.insert', {\n        doc: {\n            time__c: time,\n            types__c: '出库',\n            // is_success__c: '是',\n            container_use__c: '原料',\n            box_quantity__c: isHas,\n            pallet_number__c: container_number__c, // WCS获取的托盘号\n            plctask_number__c: plctask, // 下发任务号 生成\n            start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n            dest_loc__c: '投料区',  // 最终要去到哪个位置的终点位置  \n\n            ...baseInfo\n        }\n    });\n\n    // 往堆垛机表中写一条数据\n    // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n    await broker.call('@pc_wcs_stacker__c.insert', {\n        doc: {\n            time__c: time,\n            pallet_id__c: container_number__c,\n            plctask__c: plctask,\n            loc_start__c: startLoc,\n            loc_dest__c: '2022',\n            cmdtype__c: '出库',\n            status__c: '',\n            pri__c: '1',\n\n            ...baseInfo\n        }\n    });\n\n    // 更新待上架原料表中的name值为已选择\n    await broker.call('@pc_auto_waiting__c.update', {id: item._id, doc: { name: '已选择' }});\n    \n}); ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "c0e124a349b19b91"
            ]
        ]
    },
    {
        "id": "16c07f8b5272d748",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "配餐空箱及原料出库 - 通过选择库中数据后是否进行出库",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n// [[ ]]\n\n\n// if (req.query == 1) { node.warn(\"出库==> 将所有数据发送给WCS\"); }\n// if (req.query == 2) { node.warn(\"不出库=> 将空箱在立库中的操作 置空\"); }\n\n\n// 出库\nif(1 === 1){\n    let fDocs = await broker.call('@pc_auto_config_relation__c.find');\n    \n\n    // 过滤空箱数据 \n    const FilterNullBox = new Set(fDocs.map(item => item.config_container_number__c)) \n\n    // 过滤原料数据\n    const FilterMaterials = new Set(fDocs.map(item => item.container_number__c)) \n\n    const baseInfo = {\n        space: spaceId,\n        created: new Date(),\n        created_by: userId,\n        owner: userId,\n    }\n    // 过滤后的空箱数据查找[[ 立库货架 ]]或[[ 立库货架容器状态 ]]中找具体的位置发送给WCS\n    // 处理数据发送到[[ WCS出库任务 ]]及[[ WCS堆垛机 ]]\n    FilterNullBox.forEach(async function(element) { \n        const FindLoc = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', element]] }); \n        if (FindLoc.length === 1) { \n            const { con__c: PalletNo, row__c, col__c, lay__c } = FindLoc[0];\n            let startLoc = '';  \n            startLoc+=`0${row__c}`;\n            startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n            startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n            startLoc += '0000';\n\n            const plctask = '8' + Math.random().toString().substring(2, 10); // 9位 \n\n            // 将数据写到WCS出库表 \n            await broker.call('@pc_wcs_out_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '出库',\n                    // is_success__c: '是',\n                    container_use__c: '配餐',\n                    box_quantity__c: '无',\n                    pallet_number__c: PalletNo, // WCS获取的托盘号\n                    plctask_number__c: plctask, // 下发任务号 生成\n                    start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                    dest_loc__c: '投料区',  // 最终要去到哪个位置的终点位置  \n                    return_to_storage__c: '未开始',\n\n                    ...baseInfo\n                }\n            });\n\n            // 将数据写到WCS堆垛机表 \n            await broker.call('@pc_wcs_stacker__c.insert', {\n                doc: {\n                    time__c: time,\n                    pallet_id__c: PalletNo,\n                    plctask__c: plctask,\n                    loc_start__c: startLoc,\n                    loc_dest__c: '2022',\n                    cmdtype__c: '出库',\n                    status__c: '',\n                    pri__c: '2',\n\n                    ...baseInfo\n                }\n            });\n\n \n\n\n        }\n\n    }); \n\n\n    // 原料箱数据\n    FilterMaterials.forEach(async function (element) {\n        const FindLoc = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', element]] }); \n        if (FindLoc.length === 1) { \n            const { con__c: PalletNo, row__c, col__c, lay__c } = FindLoc[0];\n            let startLoc = '';\n            startLoc += `0${row__c}`;\n            startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n            startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n            startLoc += '0000';\n\n            const plctask = '8' + Math.random().toString().substring(2, 10); // 9位 \n\n            // 将数据写到WCS出库表 \n            await broker.call('@pc_wcs_out_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '出库',\n                    // is_success__c: '是',\n                    container_use__c: '原料',\n                    box_quantity__c: '有',\n                    pallet_number__c: PalletNo, // WCS获取的托盘号\n                    plctask_number__c: plctask, // 下发任务号 生成\n                    start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                    dest_loc__c: '拣选区',  // 最终要去到哪个位置的终点位置  \n                    return_to_storage__c: '未开始',\n                    \n                    ...baseInfo\n                }\n            });\n\n            // 将数据写到WCS堆垛机表 \n            await broker.call('@pc_wcs_stacker__c.insert', {\n                doc: {\n                    time__c: time,\n                    pallet_id__c: PalletNo,\n                    plctask__c: plctask,\n                    loc_start__c: startLoc,\n                    loc_dest__c: '2022',\n                    cmdtype__c: '出库',\n                    status__c: '',\n                    pri__c: '1',\n\n                    ...baseInfo\n                }\n            });\n\n\n\n\n        }\n\n    });\n\n\n }\n \n\n\n\n \n\n\n\n\n\n\n\n\n\n// 不出库\n// if(2 === 2){\n//     node.warn(\"my warning\");\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "ad02d2d4e90ac94a"
            ]
        ]
    },
    {
        "id": "4f68faecc3ab9bd5",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "16c07f8b5272d748"
            ]
        ]
    },
    {
        "id": "12bcc9ae5396fd7e",
        "type": "comment",
        "z": "7497f7881f1d0d2c",
        "name": "后台接口测试",
        "info": "",
        "x": 330,
        "y": 120,
        "wires": []
    },
    {
        "id": "dd9c1f8297af222c",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "后台接口原料入库 - 根据位置查找WCS出库任务 - 根据托盘查找待上架原料数据",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n// [[ ]]\n\n\n\n\n// 根据前台参数的Loc去WCS出库中查找对应的这条数据\nlet loc = '3003'\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', loc], ['return_to_storage__c', '=', '未开始']]\n});\nif (outOfStock.length !== 1) { return }\n \n\nconst findData = await broker.call('@pc_auto_waiting__c.find', { filters: [['container_number__c', '=', outOfStock[0].pallet_number__c]] });\n\nif (findData.length !== 1) { return }\n// 返回这个findData给前台的数据\n\nnode.warn(findData);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "4b542767f6cdb480"
            ]
        ]
    },
    {
        "id": "ead4d8316e9323db",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "dd9c1f8297af222c"
            ]
        ]
    },
    {
        "id": "c0e124a349b19b91",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 160,
        "wires": []
    },
    {
        "id": "ad02d2d4e90ac94a",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "4b542767f6cdb480",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 280,
        "wires": []
    },
    {
        "id": "2edcc25d4a420a48",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "34cb36ea16be058c"
            ]
        ]
    },
    {
        "id": "34cb36ea16be058c",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "一、查找MES数据、绑定箱子过滤",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n// Mes中创建时间：created: \"2022-09-08T07:54:06.851Z\"\nconst findData = await broker.call('@pc_mes_bom__c.find');\nnode.warn(findData); \nconst res = await broker.call('@pc_mes_bom__c.update', { id: findData[0]._id, doc: {\n    bind_box_time__c: new Date() \n} });\nnode.warn(res);\n// 更新的Mes时间为：\"2022-11-30T05:51:45.697Z\"\n \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "1683d5841e146523"
            ]
        ]
    },
    {
        "id": "1683d5841e146523",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 380,
        "wires": []
    },
    {
        "id": "433fe8c816bf81f6",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 420,
        "wires": [
            [
                "b76802fdb1a8b49f"
            ]
        ]
    },
    {
        "id": "b76802fdb1a8b49f",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "二、前台提交Mes数据到后台处理 - 绑定空箱",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n// 模拟post请求提交的Mes数据\nconst mesData = await broker.call('@pc_mes_bom__c.find',{top: 4} );\nnode.warn(mesData);\n\nlet doc = { filters: [[\"container_use__c\", \"=\", \"空箱\"], [\"container_status__c\", \"=\", \"在库\"]], top: 1, sort: \"created asc\", };\nconst autoStatusData = await broker.call('@pc_auto_status__c.find', { ...doc });\n// node.warn(!!res); // 没有数据时、 [empty] 为true\n// node.warn(autoStatusData);\nif (autoStatusData.length) {\n    // 库中还存在空箱数据 \n    mesData.forEach(async function (item) {\n        // node.warn(item.id__c); \n        // 1.将这个空箱绑定到Mes上、更新Mes数据[摘要为箱号]和[标记字段为record1]\n        // 注意：更新的id为主键、需要测试\n        await broker.call('@pc_mes_bom__c.update', {\n            id: item._id, doc: {\n                remarks__c: autoStatusData[0].container_number__c,\n                mark__c: 'record1'\n            }\n        });\n        // node.warn(res)\n    });\n    // 2.更新状态表为预占用\n    await broker.call('@pc_auto_status__c.update', { id: autoStatusData[0]._id, doc: { container_status__c: '预占用' } });\n    // 3.相应一个message=ok\n} else {\n    // 库中不存在空箱了\n    // 绑定失败\n\n}\n\n// return\n// const Num = await objectql.getObject(\"pc_auto_status__c\").find(query);\n\n// for (let index = 0; index < req.body.data.length; index++) {\n//     // const res = await broker.call('@pc_mes_bom__c.find', { filters: [['_id', '=', req.body.data[index] ]] });\n//     const res = await objectql.getObject(\"pc_mes_bom__c\")\n//         .find({ filters: [[\"_id\", \"=\", req.body.data[index]]] });\n//     let newDoc = {\n//         name: \"\",\n//         container_type__c: \"料箱\",\n//         container_use__c: \"配餐\",\n//         box_location__c: req.body.loc,\n//         container_number__c: Num[0].container_number__c,\n//         project_number__c: res[0].project__c,\n//         cupboard_number__c: res[0].cupboard__c,\n//         material_number__c: res[0].material__c,\n//         demand_number__c: res[0].demand__c,\n//         select_number: 0,\n\n//         space: spaceId,\n//         created: new Date(),\n//         created_by: userId,\n//         owner: userId,\n//     };\n//     await objectql.getObject(\"pc_auto_config_record__c\").insert(newDoc);\n//     // node.warn(res2);\n//     await objectql.getObject(\"pc_auto_status__c\").update(Num[0]._id, { container_use__c: \"配餐\" });\n// }\n//     }\n \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 420,
        "wires": [
            [
                "e049e4ead17896fd"
            ]
        ]
    },
    {
        "id": "e049e4ead17896fd",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 420,
        "wires": []
    },
    {
        "id": "9f1990aae62617c9",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "三、查找Mes中标记字段为record的字段、按绑定时间排序",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n\nconst result = await broker.call('@pc_mes_bom__c.find', {\n    // fields: ['id__c'],\n    filters: [['mark__c', '=', 'record']],\n    // top: 1,\n    sort: 'bind_box_time__c desc',// 根据绑定时间降序\n});\n// node.warn(result); // array[6]\n// 处理数组：如果需求数量=完成数量时、不返回给前台该数组\nconst results = result.filter(function(item){ \n    // 如果需求数量=完成数量、就不返回该条数据\n    return item.demand__c == item.complete__c ? false : true\n    \n})\nnode.warn(results);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "c25f5ff70cb9b7a6"
            ]
        ]
    },
    {
        "id": "b856b86b908fb1dc",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 460,
        "wires": [
            [
                "9f1990aae62617c9"
            ]
        ]
    },
    {
        "id": "c25f5ff70cb9b7a6",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "6c49d26a778d886c",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "四、前台提交空箱数据到后台在库中查找有无多少数量、并返回给前台",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n\n// 开始：模拟前台传递的Mes数据、传递的是选择好的空箱带有Mes数据的\n// Mes中要在立库查找的字段为：\n    // 项目号：project__c\n    // 物料名称：material__c\n    // 规格型号：specifications__c\nconst MesData = await broker.call('@pc_mes_bom__c.find', { filters: [['mark__c', '=', 'record']],  });\n// node.warn(MesData);\n// return\n\n// 处理Mes数据\nlet MesArray = MesData.map(item => {\n    return{\n        id: item._id,\n        Project: item.project__c,\n        cupboard: item.cupboard__c, \n        specifications: item.specifications__c,\n        materialName: item.material__c,\n        DemandQuantity: Number(item.demand__c), // 需求数量\n        TotalQuantity: 0,\n        PalletNumber: item.remarks__c, // 托盘号\n    }\n})\n// node.warn(MesArray);\n\n\nconst findRecordAll = await broker.call('@pc_auto_record__c.find');\n// node.warn(findRecordAll);\nconst findRecordRetrun = findRecordAll.map(item => {\n    return {\n        num: Number(item.now_number__c),\n        remarkNum: 0,\n        useNum: Number(item.now_number__c),\n        pallet: item.container_number__c,\n        project: item.project_number__c,\n        materialCode: item.material_code__c,\n        materialName: item.material_name__c,\n        specifications: item.specifications__c\n    }\n})\n// node.warn(findRecordRetrun);\n// return\n// TODO: Mes的需求数据到原料表中查询是否有、再查询配餐关系表是否有、如果没有就COTY一份、如果有就不写入到配餐关系表\n\n\nconst newMesArr = [];\nconst newArr = []\n\n// node.warn(123);\nMesArray.forEach(function (mesObj) {\n    // node.warn(mesObj);\n    let array = findRecordRetrun.filter(item => {\n        // return mesObj.Project === item.project && mesObj.materialName === item.materialName && mesObj.specifications === item.specifications\n        // 只需要根据项目号及规格型号选择即可\n        return mesObj.Project === item.project && mesObj.specifications === item.specifications\n    })\n    // node.warn(array);\n    // console.log(mesObj)\n    // return\n    if (array.length) {\n        // 根据Mes表中的每一条数据去配餐关系表中处理每一条数据即可\n        let prev = 0;\n        let count = 0;\n        for (let index = 0; index < array.length; index++) {\n            const num = array[index].useNum;\n            if (prev >= mesObj.DemandQuantity) {\n                break;\n            }\n            else {\n                prev += num;\n                count++\n            }\n        }\n        // console.log('可用数量===========', prev)\n        // console.log('箱子个数===========', count)\n        // console.log('需求数量===========', mesObj.DemandQuantity)\n        if (prev >= mesObj.DemandQuantity) {\n            console.dir('(=======================================满足========================================)')\n\n            if (count >= 1) {\n                let MesTotal = 0;\n                array.forEach((item, index, arr) => {\n                    const demand = mesObj.DemandQuantity - MesTotal;\n                    // console.log(demand) \n                    // console.log(item)\n                    /**--- 这段表示配餐表中没有数据 length===0 ---**/\n                    if (item.num === item.useNum) {// 表示箱子没有被用过\n                        let newObj = {};\n                        Object.assign(newObj, item)\n                        if (demand >= item.useNum) {// 原料箱无剩余\n                            newObj.remarkNum = newObj.useNum\n                            newObj.useNum = 0;\n                            newObj.NullBox = mesObj.PalletNumber\n                            newObj.cupboard = mesObj.cupboard\n                        }\n                        else {// 原料箱有剩余\n                            newObj.remarkNum = demand\n                            newObj.useNum = newObj.useNum - newObj.remarkNum;\n                            newObj.NullBox = mesObj.PalletNumber\n                            newObj.cupboard = mesObj.cupboard\n                        }\n                        Object.assign(item, newObj)\n                        // console.log(item)\n                        MesTotal += item.remarkNum;\n                        // console.log('newObj', newObj)\n                        if (newObj.remarkNum !== 0) { newArr.push(newObj) }\n                    }\n                    /**--- 表示配餐表中有数据、箱子被使用过 length!==0 ---**/\n                    else { // 箱子被使用过, 需要copy一条数据\n                        // console.log(999999999)\n                        let oldObj = {}\n                        Object.assign(oldObj, item)\n                        // console.log(item)\n                        if (demand >= item.useNum) {// 原料箱无剩余\n                            oldObj.remarkNum = item.useNum\n                            oldObj.useNum = 0;\n                            item.useNum = 0;\n                            oldObj.pallet = oldObj.pallet;\n                            oldObj.NullBox = mesObj.PalletNumber\n                            oldObj.cupboard = mesObj.cupboard\n                        }\n                        else {// 原料箱有剩余 \n                            // console.log('demand', demand)\n                            oldObj.remarkNum = demand\n                            oldObj.useNum = item.useNum - oldObj.remarkNum;\n                            item.useNum = 0;\n                            oldObj.pallet = oldObj.pallet\n                            oldObj.NullBox = mesObj.PalletNumber\n                            oldObj.cupboard = mesObj.cupboard\n                        }\n                        // console.log(oldObj)\n                        // array.push(oldObj)\n                        Object.assign(item, oldObj)\n                        MesTotal += oldObj.remarkNum\n                        // console.log('oldObj', oldObj)\n                        if (oldObj.remarkNum !== 0) { newArr.push(oldObj) }\n                    }\n                });\n                // console.log(MesTotal)\n                // 在这里更新Mes数据\n                mesObj.TotalQuantity = MesTotal\n            }\n            // newArr.push(newObj)\n            newMesArr.push(mesObj)\n        } else {\n            console.dir('(=======================================不满足========================================)')\n            if (count == 0) {\n                console.log('不满足条件、一个箱子')\n                // // 一、库中就一个箱子、不满足Mes的需求数量、判断count是否为1、如果是一条直接处理1条数据即可\n                // // 1.判断原始数量和可用数量是否相等、如果相等那么这条数据没有被使用过\n                //     // 1.1 如果相等、更新该条数据托盘号为Mes空箱号、标记数量为(箱内总数)、可用数量为(原始数-箱内总数=0)\n                //     let failedobj = array[0];\n                //     console.log(failedobj)\n                //     if(failedobj.num === failedobj.useNum){\n                //         // 拷贝数组中的对象、处理完这个对象后、用数据库更新这个对象即可\n                //         failedobj.remarkNum = failedobj.useNum \n                //         failedobj.useNum = 0\n                //         failedobj.parrlet = mesObj.PalletNumber;\n\n                //         mesObj.TotalQuantity = mesObj.TotalQuantity+failedobj.useNum\n                //     }\n                //     // 1.2 如果不相等、将查找到的这条数据复制一条\n                //         // 1.2.1 托盘号、原始数量不变, 标记数量为(查找的这条数据的数量), 可用数量为(可用数量-查找这条数据的数量)\n                //     else {\n                //         // 拷贝数组中的对象、处理完这个对象后、用数据库更新这个对象即可\n                //         array[0].parrlet = '042111'\n                //         let obj = {}  \n                //         Object.assign(obj, array[0])\n\n                //         const out = obj.useNum;\n                //         obj.remarkNum = out\n                //         obj.useNum = obj.useNum - out;\n                //         obj.parrlet = mesObj.PalletNumber\n\n                //         mesObj.TotalQuantity = out; // 更新mes数据库\n\n                //         // array[1] = obj// 更新数据库\n                //     }\n\n                // // 二、如果count是多条、先判断第一条数据原始数量和可用数量\n            }\n            if (count >= 1) {\n                console.log('不满足条件、多个箱子')\n                mesObj.info = '库中原料数量不足'\n                newMesArr.push(mesObj)\n            }\n\n        }\n        // console.dir('(=======================================结果========================================)')\n        // console.log('mes===>', mesObj)\n        // console.log('array=>', array)\n\n\n    }\n    else {\n        // console.log('不满足条件') \n        mesObj.info = '库中无该项目号数据'\n        newMesArr.push(mesObj)\n    }\n\n})// 循环Mes数据结束 \n\nnode.warn(\"最终结果为====>\");\nnode.warn(newMesArr);\nnode.warn(newArr);\nnewMesArr.forEach(async function(item){\n    await broker.call('@pc_mes_bom__c.update', { id: item.id, doc: {\n        library__c: item.TotalQuantity\n    }}); \n})\nnewArr.forEach(async function(item){\n    // node.warn(item);\n    let newDoc = {\n        container_number__c: item.pallet,\n        material_code__c: item.materialCode,\n        material_name__c: item.materialName,\n        specifications__c: item.specifications,\n        project_number__c: item.project,\n        box_number__c: item.num,\n        remark_number__c: item.remarkNum,\n        usable_number__c: item.useNum,\n        config_container_number__c: item.NullBox,\n        config_cabinet_number__c: item.cupboard,\n\n\n        space: spaceId,\n        created: new Date(),\n        created_by: userId,\n        owner: userId,\n    }\n    await broker.call('@pc_auto_config_relation__c.insert', { doc: newDoc });\n})\n// TODO: \n    // 1.处理数据百分比、每个箱子的百分比和总数的百分比将数据发送给前台\n    // 2.循环更新Mes表中数据\n    // 3.循环写入配餐关系表中的数据\n// const arr = [{id:1,name:'ming'},{id:2,name:'ming2'},{id:1,name:'ming'}] \nconst AllBoxPer = newMesArr.reduce(function (tempArr, item) {\n    // let re = tempArr.findIndex((ele) => {\n    //     console.log(ele.PalletNumber === item.PalletNumber)\n    //     // return ele.PalletNumber === item.PalletNumber === -1\n    // })\n    // console.log(re)\n    // console.log(item)\n    /**--- 表示tempArr数组中返回值如果是-1、那么就是没有在该数组中没有要找的元素 ---**/\n    if (tempArr.findIndex((ele) => ele.PalletNumber === item.PalletNumber) === -1) {\n        // console.log(item)\n        tempArr.push(item)\n    } else {\n        // console.log(item)\n        tempArr.forEach(function (ele) {\n            if (ele.PalletNumber == item.PalletNumber) {\n                ele.DemandQuantity += item.DemandQuantity\n                ele.TotalQuantity += item.TotalQuantity\n                // console.log(item)\n            }\n        })\n    }\n    return tempArr\n}, [])\n/**--- 每个箱子的百分比 ---**/\nconst EveryBoxPer = AllBoxPer.map(item => {\n    const per = item.TotalQuantity / item.DemandQuantity\n    const percent = (Math.round(per * 10000) / 100 + '%');\n    // console.log(percent)\n    return {\n        percentage: percent,\n        PalletNumber: item.PalletNumber,\n    }\n})\nnode.warn(EveryBoxPer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 500,
        "wires": [
            [
                "6af218dab86ea2f5"
            ]
        ]
    },
    {
        "id": "514db938cc41a4f4",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 500,
        "wires": [
            [
                "6c49d26a778d886c"
            ]
        ]
    },
    {
        "id": "6af218dab86ea2f5",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "5fdde0b44548fef6",
        "type": "comment",
        "z": "7497f7881f1d0d2c",
        "name": "普通货架接口测试 - 手持机提交数据",
        "info": "",
        "x": 400,
        "y": 660,
        "wires": []
    },
    {
        "id": "f33978e48c492d18",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 760,
        "wires": [
            [
                "0b93875b9cf36968"
            ]
        ]
    },
    {
        "id": "0b93875b9cf36968",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "模拟手持机上架 - 提交数据到后台 - 处理普通货架",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\"; \nconst moment = global.get('moment') \nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\n\n// node.warn(this);\n// node.warn(...);\n// node.warn(...JSON);\n// node.warn(__dirname);\n// node.warn(__filename); \n\n\n// 前台：获取页面中的单据编号、物料代码、到货数量(是否修改后的值)、及货架号发送给后台\n// 处理目的：模拟手持机数据 - 手持机提交后后台接口进行处理\n// 1.模拟数据\n// 2.处理表``erp-数据详情表``\n// 3.处理``普通货架表``\n// 4.处理``普通货架-容器操作记录表`` \n// n.最终返回给前台 - 处理完成返回前台\n// const {data1, data2 ...} = req.query;\nnode.warn(\"(=================================)\");\n\nlet orderNum = 'POORD003602'\nlet materialCode = 'A.001.002.099.010'\nlet arriveNum = '32' \nlet loc = 'A2';\n\n\n\nlet query = {\n    filters: [\n        ['document_number__c', '=', orderNum],\n        ['material_code__c', '=', materialCode],\n    ]\n};\nlet result = await broker.call('@pc_erp_data__c.find', query);\nconst { _id, material_code__c, material_name__c, specifications__c, project_attr__c, arrive_number__c, doc_type__c } = result[0];  \n// node.warn(result[0]);\n\n\n// 根据位置查询普通货架的状态及关联的容器编号\nlet { container_number__c: containerNum } = (await broker.call('@pc_common__c.find', { filters: [['zone__c', '=', loc]] }))[0];\n// node.warn(containerNum); // 获取 虚拟容器编号\n\n\n// 根据容器号及物料代码查询 普通货架容器操作记录表中是否有数据 ? 新增 : 更新 \nlet resultCommonRecord = await broker.call('@pc_common_record__c.find', {\n    filters: [\n        ['container_number__c', '=', containerNum],\n        ['material_code__c', '=', material_code__c],\n        ['material_name__c', '=', material_name__c],\n        ['specifications__c', '=', specifications__c],\n        ['project_number__c', '=', project_attr__c]\n    ]\n});\n\n// node.warn(resultCommonRecord.length);\n// node.warn(resultCommonRecord[0]);\n\n// 查询到普通货架操作记录表中有数据\nif (resultCommonRecord.length){\n    // 1.更新普通货架操作记录表(数量)\n    // 2.更新erp表(判断上架数量和到货数量)后、更新erp详情表\n    if (arrive_number__c == Number(arriveNum)){\n        // 处理erp-数据详情表、更新name为'已上架'\n        // 处理普通货架-操作记录、原始数量=当前数量、当前数量=当前数量+到达数量\n        await broker.call('@pc_erp_data__c.update', { id: _id, doc: { name: '已上架' } });\n        await broker.call('@pc_common_record__c.update', { id: resultCommonRecord[0]._id, doc: { \n            original_number__c: Number(resultCommonRecord[0].current_number__c),\n            current_number__c: Number(arrive_number__c) + Number(resultCommonRecord[0].current_number__c),\n            operation__c: doc_type__c,\n            operation_time__c: time,\n        } });\n        // res(200)\n    }\n    else{\n        // 处理erp-数据详情表、到货数量=到货数量-上架数量\n        await broker.call('@pc_erp_data__c.update', { id: _id, doc: { \n            arrive_number__c: Number(arrive_number__c) - Number(arriveNum), // 40 = 40-25\n        }});\n        await broker.call('@pc_common_record__c.update', {\n            id: resultCommonRecord[0]._id, doc: {\n                original_number__c: Number(resultCommonRecord[0].current_number__c),\n                current_number__c: Number(arriveNum) + Number(resultCommonRecord[0].current_number__c), // 上架数量+当前数量\n                operation__c: doc_type__c,\n                operation_time__c: time,\n            }\n        });\n    }\n}\nelse{\n    // 表中没有数据、新增一条即可\n    // 更新erp表(判断上架数量和到货数量)后、更新erp详情表\n    if (arrive_number__c == Number(arriveNum)) {\n        // 处理erp-数据详情表、更新name为'已上架'\n        // 处理普通货架-操作记录、原始数量=当前数量、当前数量=当前数量+到达数量\n        await broker.call('@pc_erp_data__c.update', { id: _id, doc: { name: '已上架' } }); \n\n\n        let newDoc = {\n            rid__c: result[0].document_number__c,\n            container_type__c: '虚拟容器',\n            container_number__c: containerNum,\n            container_use__c: '原料',\n            material_code__c: material_code__c,\n            material_name__c: material_name__c,\n            specifications__c: specifications__c,\n            project_number__c: project_attr__c,\n            original_number__c: 0,\n            current_number__c: Number(arrive_number__c),\n            operation__c: doc_type__c,\n            create_time__c: time,\n            operation_time__c: time,\n\n            space: spaceId,\n            created: new Date(),\n            created_by: userId,\n            owner: userId,\n        }\n        await broker.call('@pc_common_record__c.insert', {doc: newDoc});\n    }\n    else {\n        // 处理erp-数据详情表、到货数量=到货数量-上架数量\n        await broker.call('@pc_erp_data__c.update', {\n            id: _id, doc: {\n                arrive_number__c: Number(arrive_number__c) - Number(arriveNum), // 40 = 40-25\n            }\n        });\n        let newDoc = {\n            rid__c: result[0].document_number__c,\n            container_type__c: '虚拟容器',\n            container_number__c: containerNum,\n            container_use__c: '原料',\n            material_code__c: material_code__c,\n            material_name__c: material_name__c,\n            specifications__c: specifications__c,\n            project_number__c: project_attr__c,\n            original_number__c: 0,\n            current_number__c: Number(arriveNum),\n            operation__c: doc_type__c,\n            create_time__c: time,\n            operation_time__c: time,\n\n            space: spaceId,\n            created: new Date(),\n            created_by: userId,\n            owner: userId,\n        }\n        await broker.call('@pc_common_record__c.insert', { doc: newDoc });\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "27e9f9cf17a7a641"
            ]
        ]
    },
    {
        "id": "27e9f9cf17a7a641",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 760,
        "wires": []
    },
    {
        "id": "9a79dd39050a14e4",
        "type": "inject",
        "z": "7497f7881f1d0d2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 720,
        "wires": [
            [
                "c05a88dba7a3a479"
            ]
        ]
    },
    {
        "id": "c05a88dba7a3a479",
        "type": "function",
        "z": "7497f7881f1d0d2c",
        "name": "模拟手持机上架 - 根据二维码信息获取详情数据",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n// node.warn(this);\n// node.warn(...);\n// node.warn(...JSON);\n// node.warn(__dirname);\n// node.warn(__filename);\n\n\nlet data = 'POORD003602/A.001.002.099.010/40';\nlet [listNum, MaterNum, allNum ] = data.split('/'); // 单号、物料代码、数量\n\n\n\n// 查询\nlet query = {\n    filters: [\n        ['document_number__c', '=', listNum],\n        ['material_code__c', '=', MaterNum],\n        ['arrive_number__c', '=', Number(allNum)], // 需要转换为数字类型、否则查询不到\n    ]\n};\nconst res = await broker.call('@pc_erp_data__c.find', { ...query });\nnode.warn(res);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "9cfeb394df715562"
            ]
        ]
    },
    {
        "id": "9cfeb394df715562",
        "type": "debug",
        "z": "7497f7881f1d0d2c",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 720,
        "wires": []
    },
    {
        "id": "bfe9d67fe2cb7f94",
        "type": "steedos-instance",
        "z": "7497f7881f1d0d2c",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "92f2a3ab72ae7401",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "输送线入口1029-空箱入库",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment') \nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nvar arr1 = global.get('arr1')\n \n\n/**\n * 空箱入库\n * 从立库中找一条 [货位状态]为[空] 的数据\n * 查找到更新立库货架为[预占用]\n * 向WCS任务表中写入一条数据\n * 向WCS堆垛机表中写一条数据\n */ \n\n\n // 远程自动 && 上报信号\n\n// 入口处 1029\n// 获取\n    // 托盘号\n// 返回\n    // 目的位置 1036\n    // 托盘号\n    // 任务号\n    // 回复状态\n  \n\n\n// 修改原料和空箱\nif (arr1[234] === 1 && arr1[236] === 1) {\n    // 1.根据PLC上报状态及托盘号\n        // 1.1 查询出库任务中是否有托盘号\n        // 1.2 空箱是否是再次上线、需要清空配餐操作记录该箱号的所有数据\n    // 2. 根据开发文档规范参考代码即可\n\n\n\n    let pallet = arr1[239]; // 托盘号 \n    if (pallet === \"ERROR\") { node.warn(\"1029入口处托盘号上报错误!\"); return; }\n\n\n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n    // const ffff = await broker.call('@pc_auto_waiting__c.find', {\n    //     filters: [['container_number__c', '=', pallet]]\n    // });\n    // if (ffff.length === 1){\n\n    // }\n    // else{\n    //     node.warn(\"箱子在待上架原料中未找到\");\n    //     return\n    // }\n\n    // 如果已存在\n    const earArr = await broker.call('@pc_wcs_route__c.find', {\n        filters: [['pallet_number__c', '=', pallet]]\n    });\n    if (earArr.length) {\n        let existPallet = earArr[0].pallet_number__c;\n        let existPlctask = earArr[0].plctask_number__c;\n        const msg1 = { payload: 1036 }\n        const msg2 = { payload: 2 }\n        const msg3 = { payload: existPallet }\n        const msg4 = { payload: existPlctask }\n        var existArr = [msg1, msg2, msg3, msg4];\n        return existArr;\n    }\n\n\n\n    const fDocs = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', pallet]] });\n    if (fDocs.length >= 1) { \n        node.warn(\"此箱号在仓库中, 箱子号重复\"); \n        await broker.call('@pc_wcs_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '入库',\n                is_success__c: '否',\n                ...baseInfo\n            }\n        });\n\n        return [\n            { payload: 1029 },\n            { payload: 1 },\n            { payload: pallet },\n            { payload: \"12345\" }\n        ]\n    }\n\n\n\n\n    // 下发任务号\n    var plctask = \"\"\n    let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    for (let i = 0; i < 5; i++) {\n        let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n        plctask += chars[index]\n    }\n\n\n    // 空箱入库、直接分配货位、INSERT WCS表及堆垛机表\n    // return\n\n    // 1.无出库任务 - 那么就是空箱上架或者配餐箱清空箱子再次上架\n    // 2.查找配餐操作记录表如果有数据清空即可\n    // 3.查找立库货架表中货位状态为空的数据 - 这个表示空箱入库 \n\n\n    const rs = await broker.call('@pc_auto__c.find', {\n        filters: [['status__c', '=', '空']],\n        top: 1,\n        sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c asc',\n    });\n\n    if (rs.length === 1) {\n        // 更新该条数据、货位状态为预占用、容器号为WCS获取到的托盘号\n        await broker.call('@pc_auto__c.update', {\n            id: rs[0]._id, doc: {\n                status__c: '预占用',\n                con__c: pallet, // 用PLC上报的托盘号获取的\n            }\n        });\n\n\n        // 终点位置\n        let endLoc = '';\n        if (rs[0].row__c.toString().length === 1) { endLoc += `0${rs[0].row__c}` };\n        if (rs[0].col__c.toString().length === 1) { endLoc += `0${rs[0].col__c}` } else { endLoc += rs[0].col__c.toString() }\n        if (rs[0].lay__c.toString().length === 1) { endLoc += `0${rs[0].lay__c}` } else { endLoc += rs[0].lay__c.toString() }\n        endLoc += '0000';\n\n        // return\n\n        // 写入一条WCS入库任务\n        await broker.call('@pc_wcs_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '入库',\n                is_success__c: '是',\n                container_use__c: '空箱', // ！！！！！！  空箱 / 原料\n                pallet_number__c: pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: '1029', // 起始位置 从PLC上报的开始位置\n                dest_loc__c: endLoc,  // 最终要去到哪个位置的终点位置\n                line_enter__c: '到达输送线入口',\n                originate__c: '空箱', // !!!!! 空箱 / 投料区\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: pallet,\n                plctask__c: plctask,\n                loc_start__c: '1029',\n                loc_dest__c: endLoc,\n                cmdtype__c: '入库',\n                status__c: '',\n\n                ...baseInfo\n            }\n        });\n        return [\n            { payload: 1036 },\n            { payload: 1 },\n            { payload: pallet },\n            { payload: plctask }\n        ]\n\n\n    } else { \n\n        await broker.call('@pc_wcs_route__c.insert', {\n            doc:{\n                time__c: time,\n                types__c: '入库',\n                is_success__c: '否',\n                ...baseInfo\n            } }); \n\n        return [\n            { payload: 1029},\n            { payload: 1 },\n            { payload: pallet },\n            { payload: plctask }\n        ]\n    }\n\n\n}\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "38cf1021db73fc9d"
            ],
            [
                "3a9bb292f97179cf"
            ],
            [
                "42ae10b8a00b76a0"
            ],
            [
                "730a1e4881034850"
            ]
        ]
    },
    {
        "id": "3699221636f54789",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "堆垛机入口输送线上报",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nvar arr1 = global.get('arr1')\n// node.warn(arr);\n// 获取PLC信号、到达堆垛机入口、堆垛机过来取货\n// 更新WCS入库表中字段、并写一条数据到堆垛机任务表中\n\n \n\n\nif (arr1[290] === 1 && arr1[292] === 1){\n    // 将该数据写到堆垛机表中\n\n    let palletNumber = arr1[295] // 托盘号\n    let plctaskNumber = arr1[294] // 任务号 \n    // node.warn(palletNumber);\n    // node.warn(plctaskNumber);\n    \n    // 查询库中是否有相同的托盘号 如果有return、防止贴的箱子号重复   ...等于2是一个占用一个预占用的\n    const fDocs = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', palletNumber ]] });\n    if (fDocs.length === 2) { node.warn(\"此箱号在仓库中, 箱子号重复\"); return }\n\n    // 1. 根据托盘号查找数据WCS入库表\n        // 1.1 如果有数据更新WCS入库表\n        // 1.2 更新WCS堆垛机表\n        // 1.3 返回输送线处理完成\n        // 1.4 返回堆垛机可以来接货\n\n        // 如果没有数据就是 查找错误 不处理数据\n    \n    const res = await broker.call('@pc_wcs_route__c.find', {\n        filters: [['pallet_number__c', '=', palletNumber], ['plctask_number__c', '=', plctaskNumber]] \n        // filters: [['pallet_number__c', '=', palletNumber]],\n    }); \n    // node.warn(!!res.length); \n    // node.warn(res);\n    // node.warn(res.length); \n    \n\n\n\n    if (res.length === 1) {\n        \n\n        await broker.call('@pc_wcs_route__c.update', { id: res[0]._id, doc: { stacker_enter__c: '到达堆垛机入口', } });\n  \n        let doc = [['pallet_id__c', '=', palletNumber], ['plctask__c', '=', plctaskNumber]]\n        // let doc = [['pallet_id__c', '=', palletNumber]]\n        const Stacker = (await broker.call('@pc_wcs_stacker__c.find', { filters: [...doc] }))[0];\n        // node.warn(Stacker);\n\n        if (Stacker === undefined) { node.warn(\"堆垛机数据未找到\"); return; }\n\n        await broker.call('@pc_wcs_stacker__c.update', { id: Stacker._id, doc: { status__c: '空箱到达' }})\n        \n          \n  \n        return [\n            { payload: 1 },\n            { payload: 1 }\n        ]\n    }\n    else { node.warn('堆垛机入口位置 ==> 堆垛机入库上报托盘号错误或者数据不为一条');return}\n    \n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 560,
        "wires": [
            [
                "f335ddae402c377d"
            ],
            [
                "c227061c2412dc30"
            ]
        ]
    },
    {
        "id": "56ccec4b07539d6e",
        "type": "inject",
        "z": "1df737e430730fca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 40,
        "wires": [
            [
                "cea187a38ecc4754"
            ]
        ]
    },
    {
        "id": "cea187a38ecc4754",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "排列层处理",
        "func": "\nconst rs = [{\n    \"_id\": \"635904e56f96923ab0aa8540\", \"name\": \"第1排1列2层\",\n    \"row__c\": 1,\n    \"col__c\": 44,\n    \"lay__c\": 3, \"status__c\": \"空\", \"con__c\": \"空\"\n}]\n\n// 测试终点位置\nlet endLoc = '';\nif (rs[0].row__c.toString().length === 1) { endLoc += `0${rs[0].row__c}` };\nif (rs[0].col__c.toString().length === 1) { endLoc += `0${rs[0].col__c}` } else { endLoc += rs[0].col__c.toString() }\nif (rs[0].lay__c.toString().length === 1) { endLoc += `0${rs[0].lay__c}` } else { endLoc += rs[0].lay__c.toString() }\nendLoc += '0000';\n// node.warn(endLoc);\n\n\n\nconst locDest = '0134100000';\nconst row = Number(locDest.substring(0, 2))\nconst col = Number(locDest.substring(2, 4))\nconst lay = Number(locDest.substring(4, 6))\nnode.warn(row);\nnode.warn(col);\nnode.warn(lay);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6a5de523f3de79d0",
        "type": "inject",
        "z": "1df737e430730fca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "24a9b21fadf08f4f"
            ]
        ]
    },
    {
        "id": "24a9b21fadf08f4f",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "测试代码",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"GrthuZrX4aRYxNypq\";\nconst userId = \"62f4805b23c63d2784fed286\";\n\n\n// const arr = [1, 2, 3, 4,5,6]\n// arr.forEach(function(item) {\n//     if (item > 2){\n//         // node.warn(item);\n//         // node.warn(\"my warning\");\n//         // return\n//     }\n    \n// })\n\n// for (let index = 0; index < arr.length; index++) {\n//    if(arr[index] > 2 ){\n//        node.warn(arr[index]);\n//        if(1){\n//            node.warn(\"my warning\");\n//        }else{\n//            node.warn(\"my warning222\");\n//        }\n//        return\n//    }\n   \n// }\n// [10000, 99999]\n\n\nlet chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\"I\",\"G\",\"K\",\"L\", \"M\", \"N\", \"O\", \"P\"]\nlet plctaskno = \"\"\nfor (let i = 0; i < 5; i++) {\n    let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    plctaskno += chars[index]\n}\nnode.warn(plctaskno);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "40138eb7c633046d",
        "type": "s7 control",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "function": "trigger",
        "name": "",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "1507cd779ea25ab5"
            ]
        ]
    },
    {
        "id": "62b109325135300b",
        "type": "inject",
        "z": "1df737e430730fca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "40138eb7c633046d"
            ]
        ]
    },
    {
        "id": "1507cd779ea25ab5",
        "type": "debug",
        "z": "1df737e430730fca",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 120,
        "wires": []
    },
    {
        "id": "38cf1021db73fc9d",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1029_addr2",
        "name": "",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "3a9bb292f97179cf",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1029_reply6",
        "name": "",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "42ae10b8a00b76a0",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1029_palletno8",
        "name": "",
        "x": 860,
        "y": 320,
        "wires": []
    },
    {
        "id": "730a1e4881034850",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1029_taskno7",
        "name": "",
        "x": 1060,
        "y": 320,
        "wires": []
    },
    {
        "id": "c227061c2412dc30",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1036_reply6",
        "name": "",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "c358f190c71d6c46",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "重新回库1030-原料箱、配餐箱",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment') \nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nvar arr1 = global.get('arr1')\n// node.warn(arr)\n// node.warn(time);\n/**\n * 空箱入库\n * 从立库中找一条 [货位状态]为[空] 的数据\n * 查找到更新立库货架为[预占用]\n * 向WCS任务表中写入一条数据\n * 向WCS堆垛机表中写一条数据\n */\n  \n \n\n\nif (arr1[242] === 1 && arr1[244] === 1 || arr1[244] === 3) {\n    // 1.根据PLC上报状态及托盘号\n        // 1.1 查询出库任务中是否有托盘号\n        // 1.2 空箱是否是再次上线、需要清空配餐操作记录该箱号的所有数据\n    // 2. 根据开发文档规范参考代码即可\n    // node.warn(123);\n\n\n    let pallet = arr1[247]; // 托盘号  \n    // node.warn(pallet);\n\n        // 如果已存在\n        const rs = await broker.call('@pc_wcs_route__c.find', {\n            filters: [['pallet_number__c', '=', pallet]]\n        });\n        if (rs.length) {\n            let existPallet = rs[0].pallet_number__c;\n            let existPlctask = rs[0].plctask_number__c;\n            const msg1 = { payload: 1036 }\n            const msg2 = { payload: existPallet }\n            const msg3 = { payload: existPlctask }\n            const msg4 = { payload: 1 }\n            var existArr = [msg1, msg2, msg3, msg4];\n            return existArr\n        }\n\n    // node.warn(222);\n\n\n\n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n \n    const outStock = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: [['pallet_number__c', '=', pallet]]\n    }); \n    // node.warn(outStock); // 该托盘是从分拣区过来的\n    // return\n\n    if (outStock.length){\n        // 有出库任务\n        // 获取起始位置和容器用途\n        const { \n            _id: outId, // WCS出库任务中id，用来更新字段\n            container_use__c: containerUse, // 容器用途：原料\n            dest_loc__c: pickingArea // 终点位置：投料区，拣货区\n         } = outStock[0];  \n\n\n        // TODO: 将托盘号、容器用途、拣货区域写入到WCS、并删除出库任务 \n        const rs = await broker.call('@pc_auto__c.find', { \n            filters: [['status__c', '=', '空']], \n            top: 1,\n            sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n            // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        });\n\n        if (rs.length === 1) {\n            // 写入到历史表中、再删除出库任务 or 标记字段、循环来删除 \n            // 更新该条数据、货位状态为预占用、容器号为WCS获取到的托盘号\n            await broker.call('@pc_auto__c.update', {\n                id: rs[0]._id, doc: {\n                    status__c: '预占用',\n                    con__c: pallet, // 用PLC上报的托盘号获取的\n                }\n            });\n            // 下发任务号\n            var plctask = \"\"\n            let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n            for (let i = 0; i < 5; i++) {\n                let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n                plctask += chars[index]\n            }\n\n            // 终点位置\n            let endLoc = '';\n            if (rs[0].row__c.toString().length === 1) { endLoc += `0${rs[0].row__c}` };\n            if (rs[0].col__c.toString().length === 1) { endLoc += `0${rs[0].col__c}` } else { endLoc += rs[0].col__c.toString() }\n            if (rs[0].lay__c.toString().length === 1) { endLoc += `0${rs[0].lay__c}` } else { endLoc += rs[0].lay__c.toString() }\n            endLoc += '0000';\n\n            // return\n\n            // 写入一条WCS入库任务\n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '是',\n                    container_use__c: containerUse, // 容器用途\n                    pallet_number__c: pallet, // WCS获取的托盘号\n                    plctask_number__c: plctask, // 下发任务号 生成\n                    originate__c: pickingArea, // 来自于????\n                    start_loc__c: '1030', // 起始位置  从拣货区域获取\n                    dest_loc__c: endLoc,  // 最终要去到哪个位置的终点位置\n                    line_enter__c: '到达输送线入口',\n\n                    ...baseInfo\n                }\n            });\n\n            // 往堆垛机表中写一条数据\n            // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n            await broker.call('@pc_wcs_stacker__c.insert', {\n                doc: {\n                    time__c: time,\n                    pallet_id__c: pallet,\n                    plctask__c: plctask,\n                    loc_start__c: '1030',\n                    loc_dest__c: endLoc,\n                    cmdtype__c: '入库',\n                    status__c: '', \n                    ...baseInfo\n                }\n            });\n            \n            // 更新WCS出库任务数据为已完成\n            await broker.call('@pc_wcs_out_route__c.update', {id: outId, doc: { return_to_storage__c: '已完成' }});\n\n\n            \n\n\n            const msg1 = {payload: 1036 }\n            const msg2 = { payload: pallet }\n            const msg3 = { payload: plctask }\n            const msg4 = {payload: 1 }\n            var pay = [msg1, msg2, msg3, msg4];\n            return pay\n\n        } else {// 货架没有空余位置了、分配货位失败   \n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '否',\n                    ...baseInfo\n                } }); \n\n            // let msg1 = { payload: 1036 } // 不下发位置 \n            return [ \n                { payload: 1030 }, \n                { payload: pallet }, \n                { payload: Math.random().toString().substring(2,7) },\n                { payload: 1 },\n            ] \n            \n        }\n\n\n    }\n    else{\n        node.warn(\"上报错误!!!\");\n    }\n\n}\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 420,
        "wires": [
            [
                "691b1da19ca10f18"
            ],
            [
                "acaa571d3b1fdd45"
            ],
            [
                "c807d970e2b65bf1"
            ],
            [
                "dde3fc982c037dd6"
            ]
        ]
    },
    {
        "id": "691b1da19ca10f18",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1030_addr2",
        "name": "",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "dde3fc982c037dd6",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1030_reply6",
        "name": "",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "c807d970e2b65bf1",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1030_taskno7",
        "name": "",
        "x": 920,
        "y": 400,
        "wires": []
    },
    {
        "id": "acaa571d3b1fdd45",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1030_palletno8",
        "name": "",
        "x": 740,
        "y": 400,
        "wires": []
    },
    {
        "id": "e6476a0c9d91abd2",
        "type": "steedos-instance",
        "z": "1df737e430730fca",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "f335ddae402c377d",
        "type": "s7 out",
        "z": "1df737e430730fca",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "upperAllow",
        "name": "",
        "x": 530,
        "y": 540,
        "wires": []
    },
    {
        "id": "b7ba4540ea695fc9",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "初始空箱入库",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment') \nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr)\n// node.warn(time);\n\n\n/**\n * 空箱入库\n * 从立库中找一条 [货位状态]为[空] 的数据\n * 查找到更新立库货架为[预占用]\n * 向WCS任务表中写入一条数据\n * 向WCS堆垛机表中写一条数据\n */ \n\n\n // 远程自动 && 上报信号\n\n// 入口处 1029\n// 获取\n    // 托盘号\n// 返回\n    // 目的位置 1036\n    // 托盘号\n    // 任务号\n    // 回复状态\n  \n\nif (arr[234] === 1 && arr[236] === 1) {\n    // 1.根据PLC上报状态及托盘号\n        // 1.1 查询出库任务中是否有托盘号\n        // 1.2 空箱是否是再次上线、需要清空配餐操作记录该箱号的所有数据\n    // 2. 根据开发文档规范参考代码即可\n\n\n\n    let pallet = arr[239]; // 托盘号 \n    if (pallet === \"ERROR\") { node.warn(\"1029入口处托盘号上报错误!\"); return; }\n\n\n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n    // 下发任务号\n    var plctask = \"\"\n    let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    for (let i = 0; i < 5; i++) {\n        let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n        plctask += chars[index]\n    }\n\n\n    const outStock = await broker.call('@pc_wcs_out_route__c.find', {filters: [['pallet_number__c', '=', pallet]]}); \n    // node.warn(outStock); // 该托盘是从分拣区过来的\n    // return\n\n    if (outStock.length){\n        // 有出库任务\n        // 获取起始位置和容器用途\n        const { \n            _id: outId, // WCS出库任务中id，用来更新字段\n            container_use__c: containerUse, // 容器用途：原料\n            dest_loc__c: pickingArea // 终点位置：投料区，拣货区\n         } = outStock[0]; \n        // node.warn(outId);\n        // node.warn(containerUse);\n        // node.warn(pickingArea); \n\n\n        // TODO: 将托盘号、容器用途、拣货区域写入到WCS、并删除出库任务\n\n\n\n        // return\n        const rs = await broker.call('@pc_auto__c.find', { filters: [['status__c', '=', '空']], top: 1, sort: 'col__c asc', });\n\n        if (rs.length === 1) {\n            // 写入到历史表中、再删除出库任务 or 标记字段、循环来删除 \n            // 更新该条数据、货位状态为预占用、容器号为WCS获取到的托盘号\n            await broker.call('@pc_auto__c.update', {\n                id: rs[0]._id, doc: {\n                    status__c: '预占用',\n                    con__c: pallet, // 用PLC上报的托盘号获取的\n                }\n            });\n            \n\n            // 终点位置\n            let endLoc = '';\n            if (rs[0].row__c.toString().length === 1) { endLoc += `0${rs[0].row__c}` };\n            if (rs[0].col__c.toString().length === 1) { endLoc += `0${rs[0].col__c}` } else { endLoc += rs[0].col__c.toString() }\n            if (rs[0].lay__c.toString().length === 1) { endLoc += `0${rs[0].lay__c}` } else { endLoc += rs[0].lay__c.toString() }\n            endLoc += '0000';\n\n            // return\n\n            // 写入一条WCS入库任务\n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '是',\n                    container_use__c: containerUse, // 容器用途\n                    pallet_number__c: pallet, // WCS获取的托盘号\n                    plctask_number__c: plctask, // 下发任务号 生成\n                    originate__c: pickingArea, // 来自于????\n                    start_loc__c: '1029', // 起始位置  从拣货区域获取\n                    dest_loc__c: endLoc,  // 最终要去到哪个位置的终点位置\n                    line_enter__c: '到达输送线入口',\n\n                    ...baseInfo\n                }\n            });\n\n            // 往堆垛机表中写一条数据\n            // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n            await broker.call('@pc_wcs_stacker__c.insert', {\n                doc: {\n                    time__c: time,\n                    pallet_id__c: pallet,\n                    plctask__c: plctask,\n                    loc_start__c: '1029',\n                    loc_dest__c: endLoc,\n                    cmdtype__c: '入库',\n                    status__c: '',\n\n\n                    ...baseInfo\n                }\n            });\n            \n            // 更新WCS出库任务数据为已完成\n            await broker.call('@pc_wcs_out_route__c.update', {id: outId, doc: { return_to_storage__c: '已完成' }});\n\n\n            \n\n\n            let msg1 = {payload: 1036 }\n            let msg2 = {payload: 1 }\n            let msg3 = {payload: pallet }\n            let msg4 = {payload: plctask }\n            return [msg1, msg2, msg3, msg4] \n\n        } else {// 货架没有空余位置了、分配货位失败   \n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '否',\n                    \n                    ...baseInfo\n                }\n            });\n\n\n      \n\n\n            // let msg1 = { payload: 1036 } // 不下发位置 \n            return [ \n                null, \n                { payload: 1 }, \n                { payload: pallet }, \n                { payload: plctask }\n            ] \n            \n        }\n\n\n    }else{ // 空箱入库、直接分配货位、INSERT WCS表及堆垛机表\n        // return\n\n        // 1.无出库任务 - 那么就是空箱上架或者配餐箱清空箱子再次上架\n        // 2.查找配餐操作记录表如果有数据清空即可\n        // 3.查找立库货架表中货位状态为空的数据 - 这个表示空箱入库 \n        \n\n        const rs = await broker.call('@pc_auto__c.find', {\n            // fields: ['_id', 'name', 'row__c', 'col__c', 'lay__c', 'status__c', 'con__c'],\n            filters: [['status__c', '=', '空']],\n            top: 1,\n            sort: 'col__c asc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n        });\n\n        if (rs.length === 1) {\n            // 更新该条数据、货位状态为预占用、容器号为WCS获取到的托盘号\n            await broker.call('@pc_auto__c.update', {\n                id: rs[0]._id, doc: {\n                    status__c: '预占用',\n                    con__c: pallet, // 用PLC上报的托盘号获取的\n                }\n            });\n        \n\n            // 终点位置\n            let endLoc = '';\n            if (rs[0].row__c.toString().length === 1) { endLoc += `0${rs[0].row__c}` };\n            if (rs[0].col__c.toString().length === 1) { endLoc += `0${rs[0].col__c}` } else { endLoc += rs[0].col__c.toString() }\n            if (rs[0].lay__c.toString().length === 1) { endLoc += `0${rs[0].lay__c}` } else { endLoc += rs[0].lay__c.toString() }\n            endLoc += '0000';\n\n            // return\n\n            // 写入一条WCS入库任务\n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '是',\n                    container_use__c: '空箱',\n                    pallet_number__c: pallet, // WCS获取的托盘号\n                    plctask_number__c: plctask, // 下发任务号 生成\n                    start_loc__c: '1029', // 起始位置 从PLC上报的开始位置\n                    dest_loc__c: endLoc,  // 最终要去到哪个位置的终点位置\n                    line_enter__c: '到达输送线入口',\n                    originate__c:'空箱',\n\n                    ...baseInfo\n                }\n            });\n\n            // 往堆垛机表中写一条数据\n            // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n            await broker.call('@pc_wcs_stacker__c.insert', {\n                doc: {\n                    time__c: time,\n                    pallet_id__c: pallet,\n                    plctask__c: plctask,\n                    loc_start__c: '1029',\n                    loc_dest__c: endLoc,\n                    cmdtype__c: '入库',\n                    status__c: '',\n\n                    ...baseInfo\n                }\n            }); \n            return [\n                { payload: 1036 }, \n                { payload: 1 }, \n                { payload: pallet }, \n                { payload: plctask }\n            ]\n\n\n        } else {// 分配货位为不成功\n            // 表示立库货架中货位状态为空的数据没有了、货位全部满了\n            // 新增一条WCS入库表中的\n            // 时间为当前时间、出入库类型为入库、是否分配货位成功字段为否、其他数据置空即可     \n            await broker.call('@pc_wcs_route__c.insert', {\n                doc: {\n                    time__c: time,\n                    types__c: '入库',\n                    is_success__c: '否',\n\n                   ...baseInfo\n                }\n            });\n\n\n \n\n\n            return [ \n                null,  // 不下发位置\n                { payload: 1 }, \n                { payload: pallet }, \n                { payload: plctask }\n            ]\n        }\n\n    }// else结束\n\n\n}\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 140,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "df382f157469f488",
        "type": "inject",
        "z": "1df737e430730fca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "92f2a3ab72ae7401",
                "c358f190c71d6c46",
                "3699221636f54789"
            ]
        ]
    },
    {
        "id": "639c2c3839eb6cc4",
        "type": "function",
        "z": "1df737e430730fca",
        "name": "输送线全局Array",
        "func": "\n\nlet numb = msg.payload;\nlet arr1 = Object.values(numb);\n// node.warn(numb);\n// node.warn(arr1);\nglobal.set('arr1', arr1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 160,
        "wires": [
            [
                "f3382a489b212fab"
            ]
        ]
    },
    {
        "id": "26ab85a6e8d322c3",
        "type": "s7 in",
        "z": "1df737e430730fca",
        "endpoint": "a7ad80b7bd59726f",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "639c2c3839eb6cc4"
            ]
        ]
    },
    {
        "id": "f3382a489b212fab",
        "type": "debug",
        "z": "1df737e430730fca",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 160,
        "wires": []
    },
    {
        "id": "72ef44ae5455ef51",
        "type": "comment",
        "z": "1df737e430730fca",
        "name": "空箱/原料 入库修改类型",
        "info": "",
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "f28442fda7daf01a",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "堆垛机出口位置 - 第一节输送线上报信号",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\n\n// 1、料箱或空箱到达出口的第一节输送线后\n// 2、输送线上报完成\n// 3、将这个托盘最终去哪里告诉输送线(拣选区、投料区)\n// 4、返回给堆垛机告诉可以继续放货了\n\n\nif (arr[10] === 1 && arr[12] === 1 || arr[12] === 3){ // 远程自动 && 上报信号\n    let Pallet = arr[15]\n    let Plctask = arr[14] \n    // node.warn(Pallet);\n    // node.warn(Plctask);\n    \n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return } \n    const { _id: id, container_use__c, dest_loc__c, pallet_number__c, plctask_number__c } = outOfStock[0];\n    // 是否要更新WCS出库任务字段、标记字段\n\n\n    // 任务类型：\n        // 1、原料&&拣选区\n        // 2、原料&&投料区\n        // 3、配餐&&投料区\n        // 4、空箱&&出库\n        // 5、原料&&出库\n        // 6、配餐&&出库\n\n    async function handleTaskType(uid, location, replySign, plctask, pallet, stacker ) {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: uid, doc: { line_1__c: '位置1001处理完成' }\n        });\n        \n        // 返回输送线最终位置、回复信号、下发任务号、托盘号、堆垛机继续放货\n        return [\n            { payload: stacker },  // 堆垛机继续放货信号\n            { payload: location }, // 输送线上报位置\n            { payload: plctask },\n            { payload: pallet },\n            { payload: replySign }\n        ]\n    }\n\n     \n    if (container_use__c === '原料' && dest_loc__c === '拣选区') { \n        return handleTaskType(id, 1039, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '原料' && dest_loc__c === '投料区') {\n        return handleTaskType(id, 1023, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '原料领料' && dest_loc__c === '投料区') {\n        return handleTaskType(id, 1023, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '配餐' && dest_loc__c === '投料区') {\n        return handleTaskType(id, 1026, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '空箱' && dest_loc__c === '下线') {\n        return handleTaskType(id, 1040, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '原料' && dest_loc__c === '下线') {\n        return handleTaskType(id, 1040, 1, Plctask, Pallet, 1)\n    }\n    if (container_use__c === '配餐' && dest_loc__c === '下线') {\n        return handleTaskType(id, 1040, 1, Plctask, Pallet, 1)\n    }\n\n}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "9d05fa15aa4b109c"
            ],
            [
                "c96541a997d0678b"
            ],
            [
                "f5801e2da3158d1a"
            ],
            [
                "97d908ed93ebcffc"
            ],
            [
                "3bba02e40fc9526e"
            ]
        ]
    },
    {
        "id": "befcefd322d30acf",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "位置1039拣选区上报",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\n\n\n// 配餐场景\n// 1.原料箱子位置上报信号\n// 2.WCS做的事情[[ WCS分拣区文档 ]]\n\nif(arr[314] === 1 && arr[316] === 1){\n\n    let Pallet = arr[319] \n    \n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n    \n    const { _id, container_use__c, dest_loc__c } = outOfStock[0];\n    \n    if (container_use__c === '原料' && dest_loc__c === '拣选区') {\n\n        // ----------1.更新配餐关系表中字段为'到达'\n        // ----------2.更新MES表字段为'HighLight'\n        // 1.更新WCS出库任务中字段位置为'2010'\n        // 2.前台根据WCS出库中的位置找到托盘号、根据托盘号可以找到配餐关系表中的所有数据\n        // 3.根据每一条数据去查找MES表的数据并更新到达位置、到达位置为空箱到达后更新的WCS出库任务中的位置\n        // 4.前台原料及配餐显示的东西都可以根据WCS出库任务中的数据来更新即可\n        // 5.刚开始空箱未全部到达、原料先到达、空箱有未更新的数据、可以在前台添加按钮来进行刷新、发请求进行更新位置数据即可\n        // 6.返回PLC状态\n\n\n        // const configPro = await broker.call('@pc_auto_config_relation__c.find', { filters: [['container_number__c', '=', Pallet]] });\n        // // node.warn(configPro);\n\n        // configPro.forEach(async function (item) {\n        //     // node.warn(item); \n\n        //     // 根据空箱箱号查找出到达的位置、前台只需要根据位置获取那一条数据即可\n        //     const NullBoxx = await broker.call('@pc_wcs_out_route__c.find', { \n        //         filters: [['pallet_number__c', '=', item.config_container_number__c]], // 空箱箱号\n        //     });\n        //     // node.warn(NullBoxx);\n        //     const MesData = await broker.call('@pc_mes_bom__c.find', {\n        //         filters: [\n        //             ['remarks__c', '=', item.config_container_number__c], // 空箱箱号\n        //             ['project__c', '=', item.project_number__c],\n        //             ['cupboard__c', '=', item.config_cabinet_number__c], \n        //             ['material__c', '=', item.material_name__c],\n        //             ['specifications__c', '=', item.specifications__c],\n        //         ],\n        //     });\n        //     // node.warn(MesData);\n\n        //     await broker.call('@pc_mes_bom__c.update', {\n        //         id: MesData[0]._id, doc: {\n        //             location__c: NullBoxx[0].arrive_location__c,  \n        //         }\n        //     });\n\n        // })\n\n\n\n        // 查找所有\n        const data = await broker.call('@pc_auto_config_relation__c.find', { filters: ['container_number__c', '=', Pallet ] });\n        // node.warn(data);\n\n        if (data.length) {\n            const NullBox = Array.from(new Set(data.map(v => v.config_container_number__c)))\n            // node.warn(NullBox);\n\n\n            NullBox.forEach(async item => {\n                // 先查找再更新即可\n                // \n\n\n                const resss = await broker.call('@pc_wcs_out_route__c.find', { filters: ['pallet_number__c', '=', item] });\n                // node.warn(resss);\n                await broker.call('@pc_wcs_out_route__c.update', {\n                    id: resss[0]._id, doc: { remark_status__c: \"record\" }\n                });\n                // node.warn(ff);\n            })\n        }\n\n\n\n\n\n\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: {\n                arrive_location__c: '1039', // 此位置为 原料拣选区位置\n            }\n        });\n\n\n        msg.payload = 1\n        return msg\n    }\n    else{\n        node.warn(\"原料位置到达箱子错误\"); return;\n    }\n     \n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 440,
        "wires": [
            [
                "cf47dbf0325f5f46"
            ]
        ]
    },
    {
        "id": "241fd3282c912fd0",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1026",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n \nif (arr[210] === 1 && arr[212] === 1) {\n    \n    let Pallet = arr[215];\n    \n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc, return_to_storage__c } = outOfStock[0];\n    // node.warn(outOfStock);\n    // if (return_to_storage__c === '原料投料区正在回库' || return_to_storage__c === '配餐投料区正在回库' ) { node.warn(\"my warning\"); return } // 返回给输送线状态即可\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1026', } });\n\n\n        return [\n            { payload: 1026 },\n            { payload: 1 },\n        ]\n\n        node.warn(\"WCS 做处理就好了\");\n    }else{\n        // 返回给输送线状态还是retrun\n        // return/return msg\n    }\n\n    \n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 520,
        "wires": [
            [
                "3fe7b899e95a1516"
            ],
            [
                "a7560a23f4081bb1"
            ]
        ]
    },
    {
        "id": "666782f2220e41e5",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1025",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[202] === 1 && arr[204] === 1) {\n\n    let Pallet = arr[207];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1025' } });\n\n\n        return [\n            { payload: 1025 },\n            { payload: 1 },\n        ]\n        \n        node.warn(\"WCS 做处理就好了\");\n    } else {\n        // 返回给输送线状态还是retrun\n        // return/return msg\n    }\n\n\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 580,
        "wires": [
            [
                "dd88a240912d5a4d"
            ],
            [
                "090136f01b67a7a6"
            ]
        ]
    },
    {
        "id": "66afe9641b46cf6f",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1023",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[186] === 1 && arr[188] === 1) {\n\n    let Pallet = arr[191];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n    // node.warn(outOfStock);\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc, return_to_storage__c } = outOfStock[0];\n\n    // if (return_to_storage__c === '原料投料区正在回库' || '配餐投料区正在回库') {node.warn(\"PLC上报不用处理了\"); return msg}\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1023' } });\n\n\n        return [\n            { payload: 1023 },\n            { payload: 1 },\n        ]\n\n        \n        node.warn(\"WCS 做处理就好了\");\n        return msg\n    }\n    \n    if (containerUse === '原料' || containerUse === '原料领料' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...' \n        // 2.返回给PLC状态\n\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1023' } });\n\n\n        return [\n            { payload: 1023 },\n            { payload: 1 },\n        ]\n        \n    }\n\n    node.warn(\"配餐&&原料==> 没有做任务操作\");\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 680,
        "wires": [
            [
                "566b99d9b27b811c"
            ],
            [
                "963a75839b27b778"
            ]
        ]
    },
    {
        "id": "fe529a8daa8a4a6c",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1022",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[178] === 1 && arr[180] === 1) {\n\n    let Pallet = arr[183];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1022' } });\n\n\n        return [\n            { payload: 1022 },\n            { payload: 1 },\n        ]\n    }\n\n    if (containerUse === '原料' || containerUse === '原料领料' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...' \n        // 2.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1022' } });\n\n\n        return [\n            { payload: 1022 },\n            { payload: 1 },\n        ]\n    }\n\n    node.warn(\"配餐&&原料==> 没有做任务操作\");\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 760,
        "wires": [
            [
                "cfec99e5eb7a55dd"
            ],
            [
                "fcc320bf61f5a40a"
            ]
        ]
    },
    {
        "id": "d0100adaa3d33012",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1020",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[162] === 1 && arr[164] === 1) {\n\n    let Pallet = arr[167];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1020' } });\n\n\n        return [\n            { payload: 1020 },\n            { payload: 1 },\n        ]\n    }\n\n    if (containerUse === '原料' || containerUse === '原料领料' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...' \n        // 2.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1020' } });\n\n\n        return [\n            { payload: 1020 },\n            { payload: 1 },\n        ]\n    }\n\n    node.warn(\"配餐&&原料==> 没有做任务操作\");\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 840,
        "wires": [
            [
                "4f5241b493d7908f"
            ],
            [
                "5bd8c8b23b7e58f8"
            ]
        ]
    },
    {
        "id": "0f0d17bad8382754",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1019",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[154] === 1 && arr[156] === 1) {\n\n    let Pallet = arr[159];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1019' } });\n\n\n        return [\n            { payload: 1019 },\n            { payload: 1 },\n        ]\n    }\n\n    if (containerUse === '原料' || containerUse === '原料领料' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...' \n        // 2.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1019' } });\n\n\n        return [\n            { payload: 1019 },\n            { payload: 1 },\n        ]\n    }\n\n    node.warn(\"配餐&&原料==> 没有做任务操作\");\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 920,
        "wires": [
            [
                "51aca4864b0288a1"
            ],
            [
                "79c4ea75a4ba3e1e"
            ]
        ]
    },
    {
        "id": "42cc938a5ce32f55",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1017",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[138] === 1 && arr[140] === 1) {\n\n    let Pallet = arr[143];\n    // node.warn(Pallet);\n    \n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1017' } });\n\n\n        return [\n            { payload: 1017 },\n            { payload: 1 },\n        ]\n    } else {\n        // 返回给输送线状态还是retrun\n        // return/return msg\n    }\n\n\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1020,
        "wires": [
            [
                "7f9967a392f477a6"
            ],
            [
                "19b53a36e83bcad9"
            ]
        ]
    },
    {
        "id": "c4b06eacfc04ce22",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "投料区*1016",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\nif (arr[130] === 1 && arr[132] === 1) {\n\n    let Pallet = arr[135];\n\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n\n    const { _id, container_use__c: containerUse, dest_loc__c: destLoc } = outOfStock[0];\n\n    if (containerUse === '配餐' && destLoc === '投料区') {\n        // 1.UPDATE[[WCS出库任务]]中Location为'3001, 3002...'\n        // 2.UPDATE[[MES]] 字段到达位置为'3001, 3002...'\n        // 3.返回给PLC状态\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { arrive_location__c: '1016' } });\n\n\n        return [\n            { payload: 1016 },\n            { payload: 1 },\n        ]\n    } else {\n        // 返回给输送线状态还是retrun\n        // return/return msg\n    }\n\n\n\n}  ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "0e39f261403e2ff9"
            ],
            [
                "0bde74c2275bae63"
            ]
        ]
    },
    {
        "id": "44b34805510f65f2",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "配餐",
        "info": "",
        "x": 170,
        "y": 480,
        "wires": []
    },
    {
        "id": "4c26736a30d0679f",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "配餐&&原料",
        "info": "",
        "x": 190,
        "y": 640,
        "wires": []
    },
    {
        "id": "0a9f7afaf1b09a28",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "配餐",
        "info": "",
        "x": 170,
        "y": 980,
        "wires": []
    },
    {
        "id": "c96541a997d0678b",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1001_addr2",
        "name": "1001地址",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "3bba02e40fc9526e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1001_reply6",
        "name": "1001回复",
        "x": 1200,
        "y": 340,
        "wires": []
    },
    {
        "id": "f5801e2da3158d1a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1001_taskno7",
        "name": "1001任务号",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "97d908ed93ebcffc",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1001_palletno8",
        "name": "1001托盘号",
        "x": 1050,
        "y": 340,
        "wires": []
    },
    {
        "id": "cf47dbf0325f5f46",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_reply6",
        "name": "",
        "x": 410,
        "y": 440,
        "wires": []
    },
    {
        "id": "ee4e954941d9211b",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "回库/下线",
        "info": "",
        "x": 1060,
        "y": 880,
        "wires": []
    },
    {
        "id": "ed6910108c7dcf2f",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "位置1040箱子下线上报",
        "func": "const broker = flow.get('broker'); \nlet numb = msg.payload;\nlet arr = Object.values(numb);\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\n// 获取PLC上报信号\n// 获取托盘号 处理数据    \n// 下线的箱子将重新回库字段标记为下线\nif(arr[322] === 1 && arr[324] === 1 ){\n    let Pallet = arr[327]\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Pallet]] });\n    const { container_use__c, dest_loc__c, pallet_number__c, return_to_storage__c } = outOfStock[0];\n\n    if (container_use__c === \"空箱\" && dest_loc__c === \"下线\") { \n        await broker.call('@pc_wcs_out_route__c.update', { id: outOfStock[0]._id, doc: { return_to_storage__c: '下线' } });\n        msg.payload = 1;\n        return msg;\n    }\n    if (container_use__c === \"原料\" && dest_loc__c === \"下线\") {\n\n        const fDocs = await broker.call('@pc_auto_record__c.find', { filters: [['container_number__c', '=', pallet_number__c]] });\n\n        if (fDocs.length) {\n            await broker.call('@pc_auto_record__c.delete', { id: fDocs[0]._id });\n        }\n\n        await broker.call('@pc_wcs_out_route__c.update', { id: outOfStock[0]._id, doc: { return_to_storage__c: '下线' } });\n\n        msg.payload = 1;\n        return msg;\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\" && return_to_storage__c === \"配餐投料区正在下线\") {\n\n        // 查找配餐容器关系表中的 已完成\n        // for循环\n        // 写入历史表并删除当前箱号的数据\n        \n        const configRelation = await broker.call('@pc_auto_config_relation__c.find', { \n            filters: [['config_container_number__c', '=', pallet_number__c]]\n         }); \n        configRelation.forEach(async function (element) {\n            if (element.status__c === \"已完成\") {\n                await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n                await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n            }\n        });\n        \n        await broker.call('@pc_wcs_out_route__c.update', { id: outOfStock[0]._id, doc: { return_to_storage__c: '下线' } });\n    }\n\n    else{\n        node.warn(\"出口 1040 Error\");\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "2ef6b5eeceddc185"
            ]
        ]
    },
    {
        "id": "15658943f07342de",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1039\"], ['return_to_storage__c', '=', '未开始']]\n });\n// node.warn(outOfStock);\nif(outOfStock.length === 1){\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c } = outOfStock[0]\n    \n    await broker.call('@pc_wcs_out_route__c.update', {\n        id: _id, doc: { return_to_storage__c: '原料拣选区回库' }\n    });\n    \n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n    \n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 640,
        "wires": [
            [
                "3c73cf5c84dcc81a"
            ],
            [
                "d9a9871faf97bc03"
            ],
            [
                "0e9de2de3bef2445"
            ],
            [
                "7f03ace6d94b6586"
            ]
        ]
    },
    {
        "id": "2ef6b5eeceddc185",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1040_reply6",
        "name": "",
        "x": 350,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3c73cf5c84dcc81a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_addr2",
        "name": "",
        "x": 1310,
        "y": 620,
        "wires": []
    },
    {
        "id": "d9a9871faf97bc03",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_reply6",
        "name": "",
        "x": 1330,
        "y": 660,
        "wires": []
    },
    {
        "id": "0e9de2de3bef2445",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_taskno7",
        "name": "",
        "x": 1360,
        "y": 700,
        "wires": []
    },
    {
        "id": "7f03ace6d94b6586",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_palletno8",
        "name": "",
        "x": 1380,
        "y": 740,
        "wires": []
    },
    {
        "id": "e58778ceae70b94b",
        "type": "s7 in",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "mode": "all",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "241fd3282c912fd0",
                "666782f2220e41e5",
                "66afe9641b46cf6f",
                "fe529a8daa8a4a6c",
                "d0100adaa3d33012",
                "0f0d17bad8382754",
                "42cc938a5ce32f55",
                "c4b06eacfc04ce22",
                "ed6910108c7dcf2f",
                "befcefd322d30acf",
                "f28442fda7daf01a"
            ]
        ]
    },
    {
        "id": "3fe7b899e95a1516",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_addr2",
        "name": "",
        "x": 350,
        "y": 500,
        "wires": []
    },
    {
        "id": "a7560a23f4081bb1",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_reply6",
        "name": "",
        "x": 350,
        "y": 540,
        "wires": []
    },
    {
        "id": "dd88a240912d5a4d",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_addr2",
        "name": "",
        "x": 350,
        "y": 580,
        "wires": []
    },
    {
        "id": "090136f01b67a7a6",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_reply6",
        "name": "",
        "x": 350,
        "y": 620,
        "wires": []
    },
    {
        "id": "566b99d9b27b811c",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_addr2",
        "name": "",
        "x": 350,
        "y": 680,
        "wires": []
    },
    {
        "id": "963a75839b27b778",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_reply6",
        "name": "",
        "x": 350,
        "y": 720,
        "wires": []
    },
    {
        "id": "cfec99e5eb7a55dd",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_addr2",
        "name": "",
        "x": 350,
        "y": 760,
        "wires": []
    },
    {
        "id": "fcc320bf61f5a40a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_reply6",
        "name": "",
        "x": 350,
        "y": 800,
        "wires": []
    },
    {
        "id": "4f5241b493d7908f",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_addr2",
        "name": "",
        "x": 350,
        "y": 840,
        "wires": []
    },
    {
        "id": "5bd8c8b23b7e58f8",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_reply6",
        "name": "",
        "x": 350,
        "y": 880,
        "wires": []
    },
    {
        "id": "51aca4864b0288a1",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_addr2",
        "name": "",
        "x": 350,
        "y": 920,
        "wires": []
    },
    {
        "id": "79c4ea75a4ba3e1e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_reply6",
        "name": "",
        "x": 350,
        "y": 960,
        "wires": []
    },
    {
        "id": "7f9967a392f477a6",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_addr2",
        "name": "",
        "x": 350,
        "y": 1020,
        "wires": []
    },
    {
        "id": "19b53a36e83bcad9",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_reply6",
        "name": "",
        "x": 350,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0e39f261403e2ff9",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_addr2",
        "name": "",
        "x": 350,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0bde74c2275bae63",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_reply6",
        "name": "",
        "x": 350,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0465c3c6ffc82729",
        "type": "steedos-instance",
        "z": "e5c9174e7d3aba08",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "f29f8db554f9f0dd",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n// const yyy = await broker.call('@pc_wcs_out_route__c.find',)\n// node.warn(yyy);\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1026\"], ['return_to_storage__c', '=', '未开始']]\n });\n// node.warn(outOfStock);\n\nif(outOfStock.length === 1){\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n    \n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\"){\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n \n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n    \n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 940,
        "wires": [
            [
                "3dd718ab2c4bc60f"
            ],
            [
                "61ae28b814f8142a"
            ],
            [
                "ab8e12ac9990900e"
            ],
            [
                "4971f2f56444abfd"
            ]
        ]
    },
    {
        "id": "3dd718ab2c4bc60f",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_addr2",
        "name": "",
        "x": 1350,
        "y": 920,
        "wires": []
    },
    {
        "id": "61ae28b814f8142a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_reply6",
        "name": "",
        "x": 1370,
        "y": 960,
        "wires": []
    },
    {
        "id": "ab8e12ac9990900e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_taskno7",
        "name": "",
        "x": 1400,
        "y": 1000,
        "wires": []
    },
    {
        "id": "4971f2f56444abfd",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_palletno8",
        "name": "",
        "x": 1420,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2b8680051be810a4",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1025\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1120,
        "wires": [
            [
                "626d129260b9c66f"
            ],
            [
                "0ca8289fbb70761e"
            ],
            [
                "1703939c265c56ed"
            ],
            [
                "9e571f56abcedfbb"
            ]
        ]
    },
    {
        "id": "626d129260b9c66f",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_addr2",
        "name": "",
        "x": 1350,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0ca8289fbb70761e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_reply6",
        "name": "",
        "x": 1370,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1703939c265c56ed",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_taskno7",
        "name": "",
        "x": 1400,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9e571f56abcedfbb",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_palletno8",
        "name": "",
        "x": 1420,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f6593583ca0f884a",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1023\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1300,
        "wires": [
            [
                "ad3415571e18eb26"
            ],
            [
                "c95b016c96447aa9"
            ],
            [
                "a73b98abef07ad43"
            ],
            [
                "1c9f92a27a0ce892"
            ]
        ]
    },
    {
        "id": "ad3415571e18eb26",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_addr2",
        "name": "",
        "x": 1350,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c95b016c96447aa9",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_reply6",
        "name": "",
        "x": 1370,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a73b98abef07ad43",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_taskno7",
        "name": "",
        "x": 1400,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1c9f92a27a0ce892",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_palletno8",
        "name": "",
        "x": 1420,
        "y": 1400,
        "wires": []
    },
    {
        "id": "cee43dc493d64ddb",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1022\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1480,
        "wires": [
            [
                "5f7bb1c8883dc03e"
            ],
            [
                "4864aede3fe60575"
            ],
            [
                "5a86e772bf896136"
            ],
            [
                "f54e01c897b21d9d"
            ]
        ]
    },
    {
        "id": "5f7bb1c8883dc03e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_addr2",
        "name": "",
        "x": 1350,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4864aede3fe60575",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_reply6",
        "name": "",
        "x": 1370,
        "y": 1500,
        "wires": []
    },
    {
        "id": "5a86e772bf896136",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_taskno7",
        "name": "",
        "x": 1400,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f54e01c897b21d9d",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_palletno8",
        "name": "",
        "x": 1420,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5b7e4106f5dabb76",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1020\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1660,
        "wires": [
            [
                "4ae3591c93b16769"
            ],
            [
                "a88dacb1cbddca85"
            ],
            [
                "6c413422a55c036d"
            ],
            [
                "688a9b6f53dd9f46"
            ]
        ]
    },
    {
        "id": "4ae3591c93b16769",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_addr2",
        "name": "",
        "x": 1350,
        "y": 1640,
        "wires": []
    },
    {
        "id": "a88dacb1cbddca85",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_reply6",
        "name": "",
        "x": 1370,
        "y": 1680,
        "wires": []
    },
    {
        "id": "6c413422a55c036d",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_taskno7",
        "name": "",
        "x": 1400,
        "y": 1720,
        "wires": []
    },
    {
        "id": "688a9b6f53dd9f46",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_palletno8",
        "name": "",
        "x": 1420,
        "y": 1760,
        "wires": []
    },
    {
        "id": "05f26cdfbe8fcb4a",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1019\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1840,
        "wires": [
            [
                "35e81a5dd3688dca"
            ],
            [
                "f9ba82b60f0acac8"
            ],
            [
                "58d3cc2320b5aa7c"
            ],
            [
                "baf51c365e6f2370"
            ]
        ]
    },
    {
        "id": "35e81a5dd3688dca",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_addr2",
        "name": "",
        "x": 1350,
        "y": 1820,
        "wires": []
    },
    {
        "id": "f9ba82b60f0acac8",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_reply6",
        "name": "",
        "x": 1370,
        "y": 1860,
        "wires": []
    },
    {
        "id": "58d3cc2320b5aa7c",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_taskno7",
        "name": "",
        "x": 1400,
        "y": 1900,
        "wires": []
    },
    {
        "id": "baf51c365e6f2370",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_palletno8",
        "name": "",
        "x": 1420,
        "y": 1940,
        "wires": []
    },
    {
        "id": "4fa5c18a255dd1c1",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1017\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2020,
        "wires": [
            [
                "ec4b47ce327e618e"
            ],
            [
                "751ccd4788912ce0"
            ],
            [
                "a4e2e5a759890213"
            ],
            [
                "e28c97a3f52e8ac2"
            ]
        ]
    },
    {
        "id": "ec4b47ce327e618e",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_addr2",
        "name": "",
        "x": 1350,
        "y": 2000,
        "wires": []
    },
    {
        "id": "751ccd4788912ce0",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_reply6",
        "name": "",
        "x": 1370,
        "y": 2040,
        "wires": []
    },
    {
        "id": "a4e2e5a759890213",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_taskno7",
        "name": "",
        "x": 1400,
        "y": 2080,
        "wires": []
    },
    {
        "id": "e28c97a3f52e8ac2",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_palletno8",
        "name": "",
        "x": 1420,
        "y": 2120,
        "wires": []
    },
    {
        "id": "56f9692fb9c121c0",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "查询状态让拣选区去1030 || 1040",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\"; \n\n\n\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find', { \n    filters: [['arrive_location__c', '=', \"1016\"], ['return_to_storage__c', '=', '未开始']]\n });\n\nif (outOfStock.length === 1) {\n\n    // 修改重新回库字段\n    const { _id, pallet_number__c, container_use__c, dest_loc__c } = outOfStock[0]\n\n\n    if (container_use__c === \"原料\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '原料投料区回库' }\n        });\n    }\n    if (container_use__c === \"配餐\" && dest_loc__c === \"投料区\") {\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: _id, doc: { return_to_storage__c: '配餐投料区回库' }\n        });\n    }\n\n    // let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    // var plctask = \"\"\n    // for (let i = 0; i < 5; i++) {\n    //     let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    //     plctask += chars[index]\n    // }\n\n\n\n    // // 返回PLC数据\n    // return [\n    //     { payload: 1030 },\n    //     { payload: 1 },\n    //     { payload: plctask },\n    //     { payload: pallet_number__c }\n    // ]\n\n\n\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2200,
        "wires": [
            [
                "0ff95df8e3cc0d9a"
            ],
            [
                "f6283fe6fd279d9d"
            ],
            [
                "19e771bc31868fd8"
            ],
            [
                "da07980e59a90fa6"
            ]
        ]
    },
    {
        "id": "0ff95df8e3cc0d9a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_addr2",
        "name": "",
        "x": 1350,
        "y": 2180,
        "wires": []
    },
    {
        "id": "f6283fe6fd279d9d",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_reply6",
        "name": "",
        "x": 1370,
        "y": 2220,
        "wires": []
    },
    {
        "id": "19e771bc31868fd8",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_taskno7",
        "name": "",
        "x": 1400,
        "y": 2260,
        "wires": []
    },
    {
        "id": "da07980e59a90fa6",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_palletno8",
        "name": "",
        "x": 1420,
        "y": 2300,
        "wires": []
    },
    {
        "id": "e37e6e1ae682e948",
        "type": "inject",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "f29f8db554f9f0dd",
                "2b8680051be810a4",
                "f6593583ca0f884a",
                "cee43dc493d64ddb",
                "5b7e4106f5dabb76",
                "05f26cdfbe8fcb4a",
                "4fa5c18a255dd1c1",
                "56f9692fb9c121c0"
            ]
        ]
    },
    {
        "id": "a27aeedcafc439d4",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "回库",
        "info": "",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "9d05fa15aa4b109c",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "lowerAllow",
        "name": "1001地址",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "3b9d3d2e1b010814",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "原料投料区回库 / 原料拣选区回库",
        "info": "",
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "881bc15b8b36061f",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "------------------测试部分----------------",
        "info": "",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "c432ec7ee60317cc",
        "type": "function",
        "z": "e5c9174e7d3aba08",
        "name": "原料 / 配餐  ~  重新回库",
        "func": "const broker = flow.get('broker');\n// const time = global.get('moment')(new Date()).format('YYYY/MM/DD HH:mm:ss') \n// const spaceId = \"61c51b8f4cada30031994f3d\";\n// const userId = \"63dc7de4902db72a48e718f2\"; \nvar arr1 = global.get('arr1')\n\n\n// 要查询 是 原料 还是 配餐回库\n// 是否给PLC下发下去了  如果信号为3 还要重新下发\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find'); \nif (!outOfStock.length) return;\n\n// 原料拣选区\nconst materialSelect = outOfStock.filter(v => v.return_to_storage__c === \"原料拣选区回库\")\n\n// 原料投料区\nconst materialFeeding = outOfStock.filter(v => v.return_to_storage__c === \"原料投料区回库\")\n\n// 配餐投料区\nconst configFeeding = outOfStock.filter(v => v.return_to_storage__c === \"配餐投料区回库\" || v.return_to_storage__c === \"配餐投料区下线\")\n\n\n\n// 长度36： let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]\n\n// 更新字段为 原料拣选区正在回库 | 原料投料区正在回库 | 配餐投料区正在回库\n\n// 原料拣选区\nif (materialSelect.length){\n    const { _id, arrive_location__c: arrLoc, pallet_number__c, } = materialSelect[0];\n    var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    var plctask = \"\"\n    for (let i = 0; i < 5; i++) {\n        let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n        plctask += chars[index]\n    }\n    if (arrLoc == \"1039\") {\n        await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { return_to_storage__c: '原料拣选区正在回库' } });\n\n        let msg1 = { payload: 1030 };\n        let msg2 = { payload: pallet_number__c };\n        let msg3 = { payload: plctask };\n        let msg4 = { payload: 2 };\n        let newA = [msg1, msg2, msg3, msg4]\n        return newA\n    }\n}\n\n\n// 原料投料区\nif (materialFeeding.length) {\n    // node.warn(materialFeeding);\n    const { _id, arrive_location__c: arrLoc, pallet_number__c,  } = materialFeeding[0];\n    var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    var plctask = \"\"\n    for (let i = 0; i < 5; i++) {\n        let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n        plctask += chars[index]\n    }\n    await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { return_to_storage__c: '原料投料区正在回库' } });\n    let msg11 = { payload: 1030 };\n    let msg12 = { payload: pallet_number__c };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };  \n    if (arrLoc == \"1023\") {\n        let materialArr = [null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return materialArr;\n    }\n    if (arrLoc == \"1022\") {\n        // msg11 = { payload: 1040 };\n        let materialArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return materialArr;\n    }\n    if (arrLoc == \"1020\") {\n        let materialArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return materialArr;\n    }\n    if (arrLoc == \"1019\") {\n        // msg11 = { payload: 1040 };\n        let materialArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return materialArr;\n    } \n\n}\n\n// 配餐投料区\nif (configFeeding.length) {\n    // node.warn(555);\n    const { _id, arrive_location__c: arrLoc, pallet_number__c, return_to_storage__c } = configFeeding[0];\n\n    var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n    var plctask = \"\"\n    for (let i = 0; i < 5; i++) {\n        let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n        plctask += chars[index]\n    }\n    let loc = 0;\n    let ms = \"\";\n    if (return_to_storage__c === \"配餐投料区回库\"){\n        loc = 1030\n        ms = \"配餐投料区正在回库\"\n    }\n    if (return_to_storage__c === \"配餐投料区下线\"){\n        loc = 1040\n        ms = \"配餐投料区正在下线\"\n    }\n\n\n    await broker.call('@pc_wcs_out_route__c.update', { id: _id, doc: { return_to_storage__c: ms } });\n    let msg11 = { payload: loc };\n    let msg12 = { payload: pallet_number__c };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    if (arrLoc == \"1026\") { \n        let configArr = [null, null, null, null, msg11, msg12, msg13, msg14 ]\n        return configArr;\n    }\n    if (arrLoc == \"1025\") {\n        let configArr = [null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1023\") {\n        let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1022\") {\n        let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1020\") {\n        let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1019\") {\n        let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1017\") {\n        let configArr = [null, null, null, null, null, null, null, null,  null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    if (arrLoc == \"1016\") {\n        let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n        return configArr;\n    }\n    \n}\n \n\n\n\n\n// 信号上报为3时，判断信号，查询数据并返回\nvar chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\nvar plctask = \"\"\nfor (let i = 0; i < 5; i++) {\n    let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    plctask += chars[index]\n}\n// 原料拣选区 - 1039\nif (arr1[314] === 1 && arr1[316] === 3) { \n    // let plctask = arr1[318]\n    let Pallet = arr1[319];\n    let msg1 = { payload: 1030 };\n    let msg2 = { payload: Pallet };\n    let msg3 = { payload: plctask };\n    let msg4 = { payload: 2 };\n    let newArr1 = [msg1, msg2, msg3, msg4]\n    return newArr1\n}\n\n// 1026\nif (arr1[210] === 1 && arr1[212] === 3) {\n    // let plctask = arr1[214]\n    let Pallet = arr1[215];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find',{\n        filters: ['pallet_number__c', '=', Pallet]\n    }); \n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1025\nif (arr1[202] === 1 && arr1[204] === 3) {\n    // let plctask = arr1[206]\n    let Pallet = arr1[207];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1023\nif (arr1[186] === 1 && arr1[188] === 3) {\n    // let plctask = arr1[190]\n    let Pallet = arr1[191];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1022\nif (arr1[178] === 1 && arr1[180] === 3) {\n    // let plctask = arr1[182]\n    let Pallet = arr1[183];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1020\nif (arr1[162] === 1 && arr1[164] === 3) {\n    // let plctask = arr1[166]\n    let Pallet = arr1[167];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1019\nif (arr1[154] === 1 && arr1[156] === 3) {\n    // let plctask = arr1[158]\n    let Pallet = arr1[159];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1017\nif (arr1[138] === 1 && arr1[140] === 3) {\n    // let plctask = arr1[142]\n    let Pallet = arr1[143];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}\n\n// 1016\nif (arr1[130] === 1 && arr1[132] === 3) {\n    // let plctask = arr1[134]\n    let Pallet = arr1[135];\n    const llloc = await broker.call('@pc_wcs_out_route__c.find', {\n        filters: ['pallet_number__c', '=', Pallet]\n    });\n    let LLoc = llloc[0].return_to_storage__c === \"配餐投料区正在下线\" ? 1040 : 1030;\n    let msg11 = { payload: LLoc };\n    let msg12 = { payload: Pallet };\n    let msg13 = { payload: plctask };\n    let msg14 = { payload: 2 };\n    let configArr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg11, msg12, msg13, msg14]\n    return configArr;\n}",
        "outputs": 36,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2660,
        "wires": [
            [
                "6d9ebddae4df99a6"
            ],
            [
                "53a17959f621b232"
            ],
            [
                "bfe4e5e094d59310"
            ],
            [
                "d44a156ebd3f24dc"
            ],
            [
                "2216c20ee1504d95"
            ],
            [
                "195b86562e1952b9"
            ],
            [
                "0ea26f4eca6077c1"
            ],
            [
                "4476269279850712"
            ],
            [
                "fff4deae3ebec63b"
            ],
            [
                "76b179587061a85d"
            ],
            [
                "387c773ba0ac6b5a"
            ],
            [
                "4cb6665e4551c0bc"
            ],
            [
                "c9537d5e0d6967a7"
            ],
            [
                "ba9a02200182e915"
            ],
            [
                "30a291ec34a721df"
            ],
            [
                "4ae41ccc084bf227"
            ],
            [
                "9f8019da63afa6c7"
            ],
            [
                "322425a791370562"
            ],
            [
                "d0f6f2a4b37425e8"
            ],
            [
                "52bf1ccae13df68a"
            ],
            [
                "69609636595b8a62"
            ],
            [
                "486c0c599c7ba976"
            ],
            [
                "4375c3934f950d42"
            ],
            [
                "2b44b477e89248ef"
            ],
            [
                "034c16b30ca974df"
            ],
            [
                "75c4e0f3f6c65fc1"
            ],
            [
                "5a55c048f72f6991"
            ],
            [
                "5240b6f04a981fc5"
            ],
            [
                "52fb225c9046b4fe"
            ],
            [
                "16d7a84e7e7684b4"
            ],
            [
                "670794cd6007e4c0"
            ],
            [
                "406011c09cb06d14"
            ],
            [
                "d97787dfa040e882"
            ],
            [
                "1d75bd110a658a6a"
            ],
            [
                "a3e54ab1d1c01158"
            ],
            [
                "d085c989d907d549"
            ]
        ]
    },
    {
        "id": "4da111700c329a83",
        "type": "inject",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 2360,
        "wires": [
            [
                "c432ec7ee60317cc"
            ]
        ]
    },
    {
        "id": "6d9ebddae4df99a6",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_addr2",
        "name": "",
        "x": 470,
        "y": 2420,
        "wires": []
    },
    {
        "id": "d44a156ebd3f24dc",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_reply6",
        "name": "",
        "x": 990,
        "y": 2420,
        "wires": []
    },
    {
        "id": "bfe4e5e094d59310",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_taskno7",
        "name": "",
        "x": 820,
        "y": 2420,
        "wires": []
    },
    {
        "id": "53a17959f621b232",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1039_palletno8",
        "name": "",
        "x": 640,
        "y": 2420,
        "wires": []
    },
    {
        "id": "2216c20ee1504d95",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_addr2",
        "name": "",
        "x": 470,
        "y": 2500,
        "wires": []
    },
    {
        "id": "4476269279850712",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_reply6",
        "name": "",
        "x": 990,
        "y": 2500,
        "wires": []
    },
    {
        "id": "0ea26f4eca6077c1",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_taskno7",
        "name": "",
        "x": 820,
        "y": 2500,
        "wires": []
    },
    {
        "id": "195b86562e1952b9",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1026_palletno8",
        "name": "",
        "x": 640,
        "y": 2500,
        "wires": []
    },
    {
        "id": "fff4deae3ebec63b",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_addr2",
        "name": "",
        "x": 470,
        "y": 2580,
        "wires": []
    },
    {
        "id": "4cb6665e4551c0bc",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_reply6",
        "name": "",
        "x": 990,
        "y": 2580,
        "wires": []
    },
    {
        "id": "387c773ba0ac6b5a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_taskno7",
        "name": "",
        "x": 820,
        "y": 2580,
        "wires": []
    },
    {
        "id": "76b179587061a85d",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1025_palletno8",
        "name": "",
        "x": 640,
        "y": 2580,
        "wires": []
    },
    {
        "id": "c9537d5e0d6967a7",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_addr2",
        "name": "",
        "x": 470,
        "y": 2660,
        "wires": []
    },
    {
        "id": "4ae41ccc084bf227",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_reply6",
        "name": "",
        "x": 990,
        "y": 2660,
        "wires": []
    },
    {
        "id": "30a291ec34a721df",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_taskno7",
        "name": "",
        "x": 820,
        "y": 2660,
        "wires": []
    },
    {
        "id": "ba9a02200182e915",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1023_palletno8",
        "name": "",
        "x": 640,
        "y": 2660,
        "wires": []
    },
    {
        "id": "9f8019da63afa6c7",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_addr2",
        "name": "",
        "x": 470,
        "y": 2740,
        "wires": []
    },
    {
        "id": "52bf1ccae13df68a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_reply6",
        "name": "",
        "x": 990,
        "y": 2740,
        "wires": []
    },
    {
        "id": "d0f6f2a4b37425e8",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_taskno7",
        "name": "",
        "x": 820,
        "y": 2740,
        "wires": []
    },
    {
        "id": "322425a791370562",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1022_palletno8",
        "name": "",
        "x": 640,
        "y": 2740,
        "wires": []
    },
    {
        "id": "69609636595b8a62",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_addr2",
        "name": "",
        "x": 470,
        "y": 2820,
        "wires": []
    },
    {
        "id": "2b44b477e89248ef",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_reply6",
        "name": "",
        "x": 990,
        "y": 2820,
        "wires": []
    },
    {
        "id": "4375c3934f950d42",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_taskno7",
        "name": "",
        "x": 820,
        "y": 2820,
        "wires": []
    },
    {
        "id": "486c0c599c7ba976",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1020_palletno8",
        "name": "",
        "x": 640,
        "y": 2820,
        "wires": []
    },
    {
        "id": "034c16b30ca974df",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_addr2",
        "name": "",
        "x": 470,
        "y": 2900,
        "wires": []
    },
    {
        "id": "5240b6f04a981fc5",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_reply6",
        "name": "",
        "x": 990,
        "y": 2900,
        "wires": []
    },
    {
        "id": "5a55c048f72f6991",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_taskno7",
        "name": "",
        "x": 820,
        "y": 2900,
        "wires": []
    },
    {
        "id": "75c4e0f3f6c65fc1",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1019_palletno8",
        "name": "",
        "x": 640,
        "y": 2900,
        "wires": []
    },
    {
        "id": "52fb225c9046b4fe",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_addr2",
        "name": "",
        "x": 470,
        "y": 2980,
        "wires": []
    },
    {
        "id": "406011c09cb06d14",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_reply6",
        "name": "",
        "x": 990,
        "y": 2980,
        "wires": []
    },
    {
        "id": "670794cd6007e4c0",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_taskno7",
        "name": "",
        "x": 820,
        "y": 2980,
        "wires": []
    },
    {
        "id": "16d7a84e7e7684b4",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1017_palletno8",
        "name": "",
        "x": 640,
        "y": 2980,
        "wires": []
    },
    {
        "id": "d97787dfa040e882",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_addr2",
        "name": "",
        "x": 470,
        "y": 3060,
        "wires": []
    },
    {
        "id": "d085c989d907d549",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_reply6",
        "name": "",
        "x": 990,
        "y": 3060,
        "wires": []
    },
    {
        "id": "a3e54ab1d1c01158",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_taskno7",
        "name": "",
        "x": 820,
        "y": 3060,
        "wires": []
    },
    {
        "id": "1d75bd110a658a6a",
        "type": "s7 out",
        "z": "e5c9174e7d3aba08",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1016_palletno8",
        "name": "",
        "x": 640,
        "y": 3060,
        "wires": []
    },
    {
        "id": "f376e587757a4f1b",
        "type": "comment",
        "z": "e5c9174e7d3aba08",
        "name": "------------------模拟前台触摸屏----------------",
        "info": "",
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "ccfe238582fcd910",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "dce6a1fda50bd667",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 910,
        "y": 640,
        "wires": [
            [
                "15658943f07342de"
            ]
        ]
    },
    {
        "id": "bf65a76009c412ba",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "0103ed120ab95e94",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 870,
        "y": 980,
        "wires": [
            [
                "f29f8db554f9f0dd"
            ]
        ]
    },
    {
        "id": "d82a15fe80c3bf84",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "22277025d924a320",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 870,
        "y": 1100,
        "wires": [
            [
                "2b8680051be810a4"
            ]
        ]
    },
    {
        "id": "9a73025bee3444cb",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "e76046450baf14ae",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 870,
        "y": 1280,
        "wires": [
            [
                "f6593583ca0f884a"
            ]
        ]
    },
    {
        "id": "141c781c23709712",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "941cf37c152f868c",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 870,
        "y": 1480,
        "wires": [
            [
                "cee43dc493d64ddb"
            ]
        ]
    },
    {
        "id": "9dea21e63a30cf4b",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "97a359f23ebbe33f",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 885.0810546875,
        "y": 1661.6158447265625,
        "wires": [
            [
                "5b7e4106f5dabb76"
            ]
        ]
    },
    {
        "id": "401f104d1f605f26",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "27b078e87a46e5b7",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 890,
        "y": 1840,
        "wires": [
            [
                "05f26cdfbe8fcb4a"
            ]
        ]
    },
    {
        "id": "4cb411d579e76159",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "08f274ea81561c42",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 890,
        "y": 2020,
        "wires": [
            [
                "4fa5c18a255dd1c1"
            ]
        ]
    },
    {
        "id": "3a7063f3238b1d20",
        "type": "ui_button",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "group": "5b0275dedb1b1c7d",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 890,
        "y": 2200,
        "wires": [
            [
                "56f9692fb9c121c0"
            ]
        ]
    },
    {
        "id": "11cbd168ee2cccd8",
        "type": "inject",
        "z": "e5c9174e7d3aba08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "15658943f07342de"
            ]
        ]
    },
    {
        "id": "eeaa83fe3d613daf",
        "type": "steedos-instance",
        "z": "a7e5c0a63010b121",
        "broker": "f1042790c9a2e62b",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 90,
        "y": 200,
        "wires": []
    },
    {
        "id": "4b4fd8d01fe9c69e",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "a20eda4fc4050912"
            ]
        ]
    },
    {
        "id": "a20eda4fc4050912",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "Erp",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n// node.warn(broker);\n\n\n\n// const baseInfo = {\n//     space: spaceId,\n//     created: new Date(),\n//     created_by: userId,\n//     owner: userId,\n//     modified_by: userId,\n// }\n\n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_erp__c.find', { filters: [...newDoc] });\nnode.warn(arr); \narr.forEach(async function(element) {\n    // node.warn(element);\n    const res = await broker.call('@pc_erp__c.update', {\n        id: element._id, doc: {\n            space: spaceId,\n            created: new Date(),\n            created_by: userId,\n            owner: userId,\n            modified_by: userId,\n        }\n    });\n    node.warn(res);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d364cddf5b9f8017",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "65684cf7bd03f920"
            ]
        ]
    },
    {
        "id": "65684cf7bd03f920",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "Erp数据详情",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_erp_data__c.find', { filters: [...newDoc] });\n// node.warn(arr); \n// return\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_erp_data__c.delete', { id: element._id });\n    let doc = {\n        ...element,...baseInfo, _id: null \n    }\n    // node.warn(doc);\n    const res= await broker.call('@pc_erp_data__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "bccb14422895c242",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "35505b8bbc088214"
            ]
        ]
    },
    {
        "id": "35505b8bbc088214",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "Mes表",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// pc_auto_record__c\n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_mes_bom__c.find', { filters: [...newDoc] }); \narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_mes_bom__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_mes_bom__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9058b18315a57811",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "0f743699ad6365a4"
            ]
        ]
    },
    {
        "id": "0f743699ad6365a4",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "容器操作记录",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto_record__c.find', { filters: [...newDoc] }); \narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto_record__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto_record__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "aef54c956c6749e5",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "e5994c3a928bd78c"
            ]
        ]
    },
    {
        "id": "e5994c3a928bd78c",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "立库货架-配餐操作记录",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto_config_record__c.find', { filters: [...newDoc] }); \narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto_config_record__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto_config_record__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ad53c7ced25da83e",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "d6be65b4756b68d6"
            ]
        ]
    },
    {
        "id": "d6be65b4756b68d6",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "立库货架-待上架原料",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto_waiting__c.find', { filters: [...newDoc] });\nnode.warn(arr); \narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto_waiting__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto_waiting__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6e1e3861f33da50e",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "e57f4afd0e3c26a1"
            ]
        ]
    },
    {
        "id": "e57f4afd0e3c26a1",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "立库货架-容器配餐关系表",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto_config_relation__c.find', { filters: [...newDoc] }); \narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto_config_relation__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "46c851ab6a83c835",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "0553e889fba89d67"
            ]
        ]
    },
    {
        "id": "0553e889fba89d67",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "普通货架",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_common__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_common__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_common__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "375a6213e61c5269",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "7cf1d5e044ad5891"
            ]
        ]
    },
    {
        "id": "7cf1d5e044ad5891",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "普通货架-容器操作记录",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_common_record__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_common_record__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_common_record__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "894efc104d0038ef",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 860,
        "wires": [
            [
                "b6baa9a7070bd201"
            ]
        ]
    },
    {
        "id": "b6baa9a7070bd201",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "WCS-入库任务",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_wcs_route__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_wcs_route__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_wcs_route__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "b14e387910b81b1b",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "57188f82043cb334"
            ]
        ]
    },
    {
        "id": "57188f82043cb334",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "WCS-出库任务",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_wcs_out_route__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_wcs_out_route__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_wcs_out_route__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "a39fd8b23f4a660d",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "948defb8ae83dcfc"
            ]
        ]
    },
    {
        "id": "948defb8ae83dcfc",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "WCS-堆垛机任务表",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_wcs_stacker__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_wcs_stacker__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_wcs_stacker__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b7c8e0e7125626a5",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "d44711274ebcdda4"
            ]
        ]
    },
    {
        "id": "d44711274ebcdda4",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "立库货架",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63a90b79f02bad1ba83f55af\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "aefe8d91e5eb0b6f",
        "type": "inject",
        "z": "a7e5c0a63010b121",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1160,
        "wires": [
            [
                "7a9eecf58c5a1d2a"
            ]
        ]
    },
    {
        "id": "7a9eecf58c5a1d2a",
        "type": "function",
        "z": "a7e5c0a63010b121",
        "name": "立库货架-容器状态",
        "func": "const broker = flow.get('broker');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63a90b79f02bad1ba83f55af\";  \n \n\nconst baseInfo = {\n    space: spaceId,\n    created: new Date(),\n    created_by: userId,\n    owner: userId,\n    modified_by: userId,\n} \n// \n// // 查询表space、遍历数据将修改space即可\nlet newDoc = ['space', '=', 'GrthuZrX4aRYxNypq']\nconst arr = await broker.call('@pc_auto_status__c.find', { filters: [...newDoc] }); \nnode.warn(arr);\narr.forEach(async function(element) {\n    // node.warn(element); \n    await broker.call('@pc_auto_status__c.delete', { id: element._id });\n    let doc = { ...element, ...baseInfo, _id: null }\n    // node.warn(doc);\n    const res = await broker.call('@pc_auto_status__c.insert', { doc });\n    node.warn(res);\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "0982de217cf829c0",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "452f523d048b1640"
            ]
        ]
    },
    {
        "id": "452f523d048b1640",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "处理堆垛机 入库/出库",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nvar arr = global.get('arr')\nvar arr1 = global.get('arr1')\n// node.warn(arr);\n// return\n\n\ntry {\n\n\n    if (arr[43] === 0 && arr[44] === 0 && arr[45] === 0) {// 只能空闲状态才能发任务、执行一次、并返回\n\n        // TODO: 1 如果表中无数据、阻止向下执行\n        const fDocs = await broker.call('@pc_wcs_stacker__c.find'); if (!fDocs.length) return;\n\n\n        // TODO: 2 查询 如果有[未完成]为[Stacker]的标记、表示将标记的数据发送给堆垛机了、堆垛机正在运行、阻止向下运行\n        const stacker = fDocs.some(item => item.undone__c === 'Stacker'); if (stacker) return;\n\n\n        // 如果出库输送线上不能放三个箱子也return  在出库else条件中执行即可\n\n\n\n\n\n        // TODO: 3 查询[状态]为[空箱到达]数据有几条、如果数据存在并查询数量、满足条件发送给堆垛机\n        const status = await broker.call('@pc_wcs_stacker__c.find', { filters: [['status__c', '=', '空箱到达']] });\n        // 如果堆垛机口有要入库的空箱了、标记状态发送给堆垛机、获取三条数据发给堆垛机\n\n        if (status.length) {// 表示有入库任务    入库任务将终点(loc_dest)发送给堆垛机\n\n            // 获取 堆垛机表 中字段 [出库/入库]是数据有几条 判断数量是 >3 还是 <= 3 \n            const marker = await broker.call('@pc_wcs_stacker__c.find', {\n                filters: [['cmdtype__c', '=', '入库']],\n                sort: 'created asc',\n            });\n            if (marker[0].status__c === '空箱到达') {\n                // node.warn(marker);\n                // return\n                if (marker.length === 1) {\n                    const { _id: id, pallet_id__c: palletNumber, plctask__c: plcTask, loc_dest__c: locDest } = marker[0];\n                    await broker.call('@pc_wcs_stacker__c.update', { id, doc: { undone__c: 'Stacker' } });\n                    const upd = (await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', palletNumber]] }))[0]\n                    await broker.call('@pc_wcs_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n\n                    // 获取箱号、终点位置、发送给堆垛机 \n                    var msg1 = { payload: Number(locDest.substring(0, 2)) };\n                    var msg2 = { payload: Number(locDest.substring(2, 4)) };\n                    var msg3 = { payload: Number(locDest.substring(4, 6)) };\n                    var msg4 = { payload: String(palletNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    var msg16 = { payload: 1 }   // 将出库的箱数\n                    var msg17 = { payload: 1 }   // 入库启动\n                    return [msg1, msg2, msg3, msg4, msg5, null, null, null, null, null, null, null, null, null, null, msg16, msg17];\n                }\n                if (marker.length === 2) {\n                    for (let index = 0; index < 2; index++) {\n                        await broker.call('@pc_wcs_stacker__c.update', { id: marker[index]._id, doc: { undone__c: 'Stacker', } });\n                        const upd = (await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', marker[index].pallet_id__c]] }))[0]\n                        await broker.call('@pc_wcs_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                    }\n\n                    // 获取箱号、终点位置、发送给堆垛机\n                    // 第一个箱子的 \n                    const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_dest__c: locDest } = marker[0];\n                    const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_dest__c: locDest2 } = marker[1];\n\n                    var msg1 = { payload: Number(locDest.substring(0, 2)) };\n                    var msg2 = { payload: Number(locDest.substring(2, 4)) }\n                    var msg3 = { payload: Number(locDest.substring(4, 6)) }\n                    var msg4 = { payload: String(boxNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    // 第二个箱子  \n                    var msg6 = { payload: Number(locDest2.substring(0, 2)) };\n                    var msg7 = { payload: Number(locDest2.substring(2, 4)) }\n                    var msg8 = { payload: Number(locDest2.substring(4, 6)) }\n                    var msg9 = { payload: String(boxNumber2) }\n                    var msg10 = { payload: String(plcTask2) }\n                    var msg16 = { payload: 2 }\n                    var msg17 = { payload: 1 }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, null, null, null, null, null, msg16, msg17]\n                }\n                if (marker.length >= 3) {\n\n                    for (let index = 0; index < 3; index++) {\n                        await broker.call('@pc_wcs_stacker__c.update', { id: marker[index]._id, doc: { undone__c: 'Stacker', } });\n                        const upd = (await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', marker[index].pallet_id__c]] }))[0]\n                        await broker.call('@pc_wcs_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                    }\n\n                    // 获取箱号、终点位置、发送给堆垛机\n                    // 第一个箱子的 \n                    const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_dest__c: locDest } = marker[0];\n                    const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_dest__c: locDest2 } = marker[1];\n                    const { pallet_id__c: boxNumber3, plctask__c: plcTask3, loc_dest__c: locDest3 } = marker[2];\n\n                    var msg1 = { payload: Number(locDest.substring(0, 2)) };\n                    var msg2 = { payload: Number(locDest.substring(2, 4)) }\n                    var msg3 = { payload: Number(locDest.substring(4, 6)) }\n                    var msg4 = { payload: String(boxNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    // 第二个箱子 \n                    var msg6 = { payload: Number(locDest2.substring(0, 2)) };\n                    var msg7 = { payload: Number(locDest2.substring(2, 4)) }\n                    var msg8 = { payload: Number(locDest2.substring(4, 6)) }\n                    var msg9 = { payload: String(boxNumber2) }\n                    var msg10 = { payload: String(plcTask2) }\n                    // 第三个箱子 \n                    var msg11 = { payload: Number(locDest3.substring(0, 2)) };\n                    var msg12 = { payload: Number(locDest3.substring(2, 4)) }\n                    var msg13 = { payload: Number(locDest3.substring(4, 6)) }\n                    var msg14 = { payload: String(boxNumber3) }\n                    var msg15 = { payload: String(plcTask3) }\n                    var msg16 = { payload: 3 }\n                    var msg17 = { payload: 1 }\n                    return [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, msg11, msg12, msg13, msg14, msg15, msg16, msg17]\n                }\n            } else {\n                node.warn('堆垛机 ==> 第一个箱子的状态不是空箱到达');\n                return\n            }\n\n\n        }\n        else {// 出库部分   出库任务将起点(loc_start)发送给堆垛机 \n\n            // 在这里拦截一下、如果输送线上放不了箱子了要return掉\n\n\n            if (arr1[35] === 1) return;\n\n            // return;\n\n\n            // 判断优先级、配餐的空箱优先级为2、其余的优先级为1\n            const priority = await broker.call('@pc_wcs_stacker__c.find', {\n                filters: [\n                    ['cmdtype__c', '=', '出库'], ['pri__c', '=', '2']\n                ]\n            });\n            if (priority.length) {// 配餐的空箱先出库  条件我true\n\n                if (priority.length === 1) {\n                    for (let index = 0; index < 1; index++) {\n                        await broker.call('@pc_wcs_stacker__c.update', { id: priority[index]._id, doc: { undone__c: 'Stacker', } });\n                        const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', priority[index].pallet_id__c]] }))[0]\n                        await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                    }\n                    // // 获取箱号、终点位置、发送给堆垛机 \n                    const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = priority[0];\n                    var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                    var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                    var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                    var msg4 = { payload: String(boxNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    var msg16 = { payload: 1 }\n                    var msg17 = { payload: 1 }\n                    return [\n                        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                        msg1, msg2, msg3, msg4, msg5, null, null, null, null, null, null, null, null, null, null, msg16, msg17\n                    ];\n                }\n                else if (priority.length === 2) {\n                    for (let index = 0; index < 2; index++) {\n                        await broker.call('@pc_wcs_stacker__c.update', { id: priority[index]._id, doc: { undone__c: 'Stacker', } });\n                        const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', priority[index].pallet_id__c]] }))[0]\n                        await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                    }\n                    // // 获取箱号、终点位置、发送给堆垛机 \n                    const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = priority[0];\n                    const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_start__c: locStart2 } = priority[1];\n\n                    var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                    var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                    var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                    var msg4 = { payload: String(boxNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    var msg6 = { payload: Number(locStart2.substring(0, 2)) };\n                    var msg7 = { payload: Number(locStart2.substring(2, 4)) }\n                    var msg8 = { payload: Number(locStart2.substring(4, 6)) }\n                    var msg9 = { payload: String(boxNumber2) }\n                    var msg10 = { payload: String(plcTask2) }\n                    var msg16 = { payload: 2 }\n                    var msg17 = { payload: 1 }\n                    return [\n                        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                        msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, null, null, null, null, null, msg16, msg17\n                    ]\n                }\n                else if (priority.length >= 3) {\n\n                    for (let index = 0; index < 3; index++) {\n                        await broker.call('@pc_wcs_stacker__c.update', { id: priority[index]._id, doc: { undone__c: 'Stacker', } });\n                        const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', priority[index].pallet_id__c]] }))[0]\n                        await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                    }\n                    // // 获取箱号、终点位置、发送给堆垛机\n                    // // 第一个箱子的\n                    const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = priority[0];\n                    const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_start__c: locStart2 } = priority[1];\n                    const { pallet_id__c: boxNumber3, plctask__c: plcTask3, loc_start__c: locStart3 } = priority[2];\n\n                    var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                    var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                    var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                    var msg4 = { payload: String(boxNumber) }\n                    var msg5 = { payload: String(plcTask) }\n                    var msg6 = { payload: Number(locStart2.substring(0, 2)) };\n                    var msg7 = { payload: Number(locStart2.substring(2, 4)) }\n                    var msg8 = { payload: Number(locStart2.substring(4, 6)) }\n                    var msg9 = { payload: String(boxNumber2) }\n                    var msg10 = { payload: String(plcTask2) }\n                    var msg11 = { payload: Number(locStart3.substring(0, 2)) };\n                    var msg12 = { payload: Number(locStart3.substring(2, 4)) }\n                    var msg13 = { payload: Number(locStart3.substring(4, 6)) }\n                    var msg14 = { payload: String(boxNumber3) }\n                    var msg15 = { payload: String(plcTask3) }\n                    var msg16 = { payload: 3 }\n                    var msg17 = { payload: 1 }\n                    return [\n                        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                        msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, msg11, msg12, msg13, msg14, msg15, msg16, msg17\n                    ]\n                }\n            }\n            else {\n\n                const Normal = await broker.call('@pc_wcs_stacker__c.find', {\n                    filters: [\n                        ['cmdtype__c', '=', '出库'], ['pri__c', '=', '1']\n                    ]\n                });\n                if (Normal.length) { //正常的出库任务\n                    if (Normal.length === 1) {\n                        for (let index = 0; index < 1; index++) {\n                            await broker.call('@pc_wcs_stacker__c.update', { id: Normal[index]._id, doc: { undone__c: 'Stacker', } });\n                            const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Normal[index].pallet_id__c]] }))[0]\n                            await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                        }\n                        // // 获取箱号、终点位置、发送给堆垛机 \n                        const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = Normal[0];\n                        var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                        var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                        var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                        var msg4 = { payload: String(boxNumber) }\n                        var msg5 = { payload: String(plcTask) }\n                        var msg16 = { payload: 1 }\n                        var msg17 = { payload: 1 }\n                        return [\n                            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                            msg1, msg2, msg3, msg4, msg5, null, null, null, null, null, null, null, null, null, null, msg16, msg17\n                        ];\n                    }\n                    else if (Normal.length === 2) {\n                        for (let index = 0; index < 2; index++) {\n                            await broker.call('@pc_wcs_stacker__c.update', { id: Normal[index]._id, doc: { undone__c: 'Stacker', } });\n                            const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Normal[index].pallet_id__c]] }))[0]\n                            await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                        }\n                        // // 获取箱号、终点位置、发送给堆垛机 \n                        const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = Normal[0];\n                        const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_start__c: locStart2 } = Normal[1];\n\n                        var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                        var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                        var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                        var msg4 = { payload: String(boxNumber) }\n                        var msg5 = { payload: String(plcTask) }\n                        var msg6 = { payload: Number(locStart2.substring(0, 2)) };\n                        var msg7 = { payload: Number(locStart2.substring(2, 4)) }\n                        var msg8 = { payload: Number(locStart2.substring(4, 6)) }\n                        var msg9 = { payload: String(boxNumber2) }\n                        var msg10 = { payload: String(plcTask2) }\n                        var msg16 = { payload: 2 }\n                        var msg17 = { payload: 1 }\n                        return [\n                            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                            msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, null, null, null, null, null, msg16, msg17\n                        ]\n                    }\n                    else if (Normal.length >= 3) {\n\n                        for (let index = 0; index < 3; index++) {\n                            await broker.call('@pc_wcs_stacker__c.update', { id: Normal[index]._id, doc: { undone__c: 'Stacker', } });\n                            const upd = (await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', Normal[index].pallet_id__c]] }))[0]\n                            await broker.call('@pc_wcs_out_route__c.update', { id: upd._id, doc: { carry_start__c: '搬运开始' } })\n                        }\n                        // // 获取箱号、终点位置、发送给堆垛机\n                        // // 第一个箱子的\n                        const { pallet_id__c: boxNumber, plctask__c: plcTask, loc_start__c: locStart } = Normal[0];\n                        const { pallet_id__c: boxNumber2, plctask__c: plcTask2, loc_start__c: locStart2 } = Normal[1];\n                        const { pallet_id__c: boxNumber3, plctask__c: plcTask3, loc_start__c: locStart3 } = Normal[2];\n\n                        var msg1 = { payload: Number(locStart.substring(0, 2)) };\n                        var msg2 = { payload: Number(locStart.substring(2, 4)) }\n                        var msg3 = { payload: Number(locStart.substring(4, 6)) }\n                        var msg4 = { payload: String(boxNumber) }\n                        var msg5 = { payload: String(plcTask) }\n                        var msg6 = { payload: Number(locStart2.substring(0, 2)) };\n                        var msg7 = { payload: Number(locStart2.substring(2, 4)) }\n                        var msg8 = { payload: Number(locStart2.substring(4, 6)) }\n                        var msg9 = { payload: String(boxNumber2) }\n                        var msg10 = { payload: String(plcTask2) }\n                        var msg11 = { payload: Number(locStart3.substring(0, 2)) };\n                        var msg12 = { payload: Number(locStart3.substring(2, 4)) }\n                        var msg13 = { payload: Number(locStart3.substring(4, 6)) }\n                        var msg14 = { payload: String(boxNumber3) }\n                        var msg15 = { payload: String(plcTask3) }\n                        var msg16 = { payload: 3 }\n                        var msg17 = { payload: 1 }\n                        return [\n                            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                            msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10, msg11, msg12, msg13, msg14, msg15, msg16, msg17\n                        ]\n                    }\n                }// 正常出库if结束\n\n            }// 配餐空箱else结束\n\n\n        }// 出库部分else结束\n    }\n} catch (e) {};",
        "outputs": 34,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 640,
        "wires": [
            [
                "7d2053da0469ccf1"
            ],
            [
                "5643f679090bd0ec"
            ],
            [
                "5741ec6f54cc69cf"
            ],
            [
                "ba6821ca1d42baae"
            ],
            [
                "93967ce9fea26482"
            ],
            [
                "2edd7fd921a0bf9c"
            ],
            [
                "773081d75b9489ee"
            ],
            [
                "62f35a6193e2f5e6"
            ],
            [
                "953665fbc3a67f72"
            ],
            [
                "57ea9a8f99eaf295"
            ],
            [
                "4194c93cc3267f37"
            ],
            [
                "9192627147949e32"
            ],
            [
                "c33deff45415e4aa"
            ],
            [
                "4a9d162f352817d9"
            ],
            [
                "23f7dc3ef1eb25ed"
            ],
            [
                "321e7522769f1f49"
            ],
            [
                "769abe589f07a9a8"
            ],
            [
                "209ee3d68628e036"
            ],
            [
                "f68efe82d20d9c75"
            ],
            [
                "277cbae818f515c3"
            ],
            [
                "b4d44b8fb364c231"
            ],
            [
                "0f7f4564bfe504af"
            ],
            [
                "101275fcbb282377"
            ],
            [
                "8c28a6907608d6b5"
            ],
            [
                "8a9361b8c1d022ac"
            ],
            [
                "7c228db6ad7b53a9"
            ],
            [
                "2ebbf4eb5faba3e5"
            ],
            [
                "4fbfb2ec28c18f18"
            ],
            [
                "a3598a3ee623c375"
            ],
            [
                "cfd0806dbdafe632"
            ],
            [
                "f5b95df9664ab8b2"
            ],
            [
                "670829e85c13ba6e"
            ],
            [
                "58e458667995d0b4"
            ],
            [
                "9a51a6c0f06a16ad"
            ]
        ]
    },
    {
        "id": "a835edd933cd02ef",
        "type": "comment",
        "z": "d119a8eb06199d8b",
        "name": "quen",
        "info": "只有发货位和箱号后的状态才是堆垛机正在运行\n只发上料线允许取料状态还是空闲中",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "ce2333dc1243625e",
        "type": "steedos-instance",
        "z": "d119a8eb06199d8b",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "7d2053da0469ccf1",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstEnterRow",
        "name": "",
        "x": 460,
        "y": 420,
        "wires": []
    },
    {
        "id": "5741ec6f54cc69cf",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstEnterLay",
        "name": "",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "5643f679090bd0ec",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstEnterCol",
        "name": "",
        "x": 630,
        "y": 420,
        "wires": []
    },
    {
        "id": "ba6821ca1d42baae",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstEnterBox",
        "name": "",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "93967ce9fea26482",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstEnterTask",
        "name": "",
        "x": 1160,
        "y": 420,
        "wires": []
    },
    {
        "id": "2edd7fd921a0bf9c",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondEnterRow",
        "name": "",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "62f35a6193e2f5e6",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondEnterLay",
        "name": "",
        "x": 850,
        "y": 480,
        "wires": []
    },
    {
        "id": "773081d75b9489ee",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondEnterCol",
        "name": "",
        "x": 660,
        "y": 480,
        "wires": []
    },
    {
        "id": "953665fbc3a67f72",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondEnterBox",
        "name": "",
        "x": 1050,
        "y": 480,
        "wires": []
    },
    {
        "id": "57ea9a8f99eaf295",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondEnterTask",
        "name": "",
        "x": 1250,
        "y": 480,
        "wires": []
    },
    {
        "id": "4194c93cc3267f37",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdEnterRow",
        "name": "",
        "x": 460,
        "y": 540,
        "wires": []
    },
    {
        "id": "c33deff45415e4aa",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdEnterLay",
        "name": "",
        "x": 840,
        "y": 540,
        "wires": []
    },
    {
        "id": "9192627147949e32",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdEnterCol",
        "name": "",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "4a9d162f352817d9",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdEnterBox",
        "name": "",
        "x": 1040,
        "y": 540,
        "wires": []
    },
    {
        "id": "23f7dc3ef1eb25ed",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdEnterTask",
        "name": "",
        "x": 1220,
        "y": 540,
        "wires": []
    },
    {
        "id": "321e7522769f1f49",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "EnterNum",
        "name": "",
        "x": 440,
        "y": 600,
        "wires": []
    },
    {
        "id": "769abe589f07a9a8",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "EnterStart",
        "name": "",
        "x": 580,
        "y": 600,
        "wires": []
    },
    {
        "id": "209ee3d68628e036",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstOuterRow",
        "name": "",
        "x": 460,
        "y": 700,
        "wires": []
    },
    {
        "id": "277cbae818f515c3",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstOuterLay",
        "name": "",
        "x": 840,
        "y": 700,
        "wires": []
    },
    {
        "id": "f68efe82d20d9c75",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstOuterCol",
        "name": "",
        "x": 650,
        "y": 700,
        "wires": []
    },
    {
        "id": "b4d44b8fb364c231",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstOuterBox",
        "name": "",
        "x": 1040,
        "y": 700,
        "wires": []
    },
    {
        "id": "0f7f4564bfe504af",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "FirstOuterTask",
        "name": "",
        "x": 1220,
        "y": 700,
        "wires": []
    },
    {
        "id": "101275fcbb282377",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondOuterRow",
        "name": "",
        "x": 470,
        "y": 760,
        "wires": []
    },
    {
        "id": "8a9361b8c1d022ac",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondOuterLay",
        "name": "",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "8c28a6907608d6b5",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondOuterCol",
        "name": "",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "7c228db6ad7b53a9",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondOuterBox",
        "name": "",
        "x": 1050,
        "y": 760,
        "wires": []
    },
    {
        "id": "2ebbf4eb5faba3e5",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "SecondOuterTask",
        "name": "",
        "x": 1250,
        "y": 760,
        "wires": []
    },
    {
        "id": "4fbfb2ec28c18f18",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdOuterRow",
        "name": "",
        "x": 460,
        "y": 840,
        "wires": []
    },
    {
        "id": "cfd0806dbdafe632",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdOuterLay",
        "name": "",
        "x": 840,
        "y": 840,
        "wires": []
    },
    {
        "id": "a3598a3ee623c375",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdOuterCol",
        "name": "",
        "x": 660,
        "y": 840,
        "wires": []
    },
    {
        "id": "f5b95df9664ab8b2",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdOuterBox",
        "name": "",
        "x": 1040,
        "y": 840,
        "wires": []
    },
    {
        "id": "670829e85c13ba6e",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "ThirdOuterTask",
        "name": "",
        "x": 1240,
        "y": 840,
        "wires": []
    },
    {
        "id": "58e458667995d0b4",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "OuterNum",
        "name": "",
        "x": 450,
        "y": 900,
        "wires": []
    },
    {
        "id": "9a51a6c0f06a16ad",
        "type": "s7 out",
        "z": "d119a8eb06199d8b",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "OuterStart",
        "name": "",
        "x": 650,
        "y": 900,
        "wires": []
    },
    {
        "id": "9b2ca823eb90a25d",
        "type": "comment",
        "z": "d119a8eb06199d8b",
        "name": "出库箱子需要创建WCS出库任务及WCS堆垛机任务",
        "info": "",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "8ccda79109513460",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 20,
        "wires": [
            [
                "579ca6d1057ae5a1"
            ]
        ]
    },
    {
        "id": "579ca6d1057ae5a1",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "创建出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\n\n\n\nlet Pallet = \"L1885\"\n\nconst selectRows = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', Pallet]] });  \n// node.warn(selectRows);\nconst { row__c, col__c, lay__c, } = selectRows[0]\n\n\n// return\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId,}\n\n \n\nvar plctask = \"\"\nlet chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\nfor (let i = 0; i < 5; i++) {\n    let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n    plctask += chars[index]\n} \n\nlet startLoc = '';\nstartLoc += `0${row__c}`;\nstartLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\nstartLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\nstartLoc += '0000';\n\n\n\n// // 写入一条WCS出库任务、优先级\nawait broker.call('@pc_wcs_out_route__c.insert', {\n    doc: {\n        time__c: time,\n        types__c: '出库',\n        container_use__c: '空箱',\n        box_quantity__c: \"无\",\n        pallet_number__c: Pallet, // WCS获取的托盘号\n        plctask_number__c: plctask, // 下发任务号 生成\n        start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n        dest_loc__c: '出库',  // 最终要去到哪个位置的终点位置  \n        return_to_storage__c: \"未开始\",\n\n        ...baseInfo\n    }\n});\n\n// 往堆垛机表中写一条数据\n// 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\nawait broker.call('@pc_wcs_stacker__c.insert', {\n    doc: {\n        time__c: time,\n        pallet_id__c: Pallet,\n        plctask__c: plctask,\n        loc_start__c: startLoc,\n        loc_dest__c: '',\n        cmdtype__c: '出库',\n        status__c: '',\n        pri__c: '1',\n\n        ...baseInfo\n    }\n});\nnode.warn(\"创建成功\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 20,
        "wires": [
            [
                "f2389d74d7cc79df"
            ]
        ]
    },
    {
        "id": "f2389d74d7cc79df",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 20,
        "wires": []
    },
    {
        "id": "297d47b39a0fecf0",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "立库货架 - 创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n// 修改查询条件 & 出库类型(原料/配餐/投料区/拣选区)\nconst rs = await broker.call('@pc_auto__c.find', {\n    // filters: [['status__c', '=', '占用'], ['row__c', '=', 1], ['col__c', '=', 94], ['lay__c', '=', 2 ]],\n    // filters: [['status__c', '=', '占用'], ['con__c', '=',\"L1318\"]],\n    filters: [['status__c', '=', '占用']],\n    top: 8,\n    sort: 'col__c asc',\n    // sort: 'col__c desc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\n\n// const rs = await broker.call('@pc_auto_status__c.find', {\n//     filters: [['container_use__c', '=', '空箱'], ['lay__c', '!=', '']],\n//     top: 16,\n//     // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//     sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//     // sort: 'row__c asc'\n// });\n\n// node.warn(rs.length);\n// node.warn(rs);\n// rs.forEach(value => { node.warn(value) })\n\n// return\n\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;  // 1\n        \n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '拣选区',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n        node.warn(\"创建成功\");\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "fa1641557bf0c47e"
            ]
        ]
    },
    {
        "id": "fa1641557bf0c47e",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 80,
        "wires": []
    },
    {
        "id": "c71e068452ab2b75",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n\n\nconst rs = await broker.call('@pc_auto__c.find', {\n    filters: [['row__c', '=', 2], ['col__c', '=', 2], ['lay__c', '=', 5]], \n});\n// node.warn(rs.length);\n// node.warn(rs);\n// node.warn(rs.forEach(value => {node.warn(value)}));\n\n// return\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;\n\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',\n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '拣选区',  // 最终要去到哪个位置的终点位置  \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',\n\n                ...baseInfo\n            }\n        });\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "593937a69bd8fd38"
            ]
        ]
    },
    {
        "id": "10189c8a023955dd",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "c71e068452ab2b75",
                "1cf14134f06f7ffc",
                "11a9d153d8f0a910"
            ]
        ]
    },
    {
        "id": "593937a69bd8fd38",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 73",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 120,
        "wires": []
    },
    {
        "id": "1cf14134f06f7ffc",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n\n\nconst rs = await broker.call('@pc_auto__c.find', {\n    filters: [['row__c', '=', 1], ['col__c', '=', 13], ['lay__c', '=', 3]], \n});\n// node.warn(rs.length);\nnode.warn(rs);\n// node.warn(rs.forEach(value => {node.warn(value)}));\n\n// return\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;\n\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',\n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '拣选区',  // 最终要去到哪个位置的终点位置  \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',\n\n                ...baseInfo\n            }\n        });\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 160,
        "wires": [
            [
                "b0c5afdfdd209760"
            ]
        ]
    },
    {
        "id": "11a9d153d8f0a910",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n\n\nconst rs = await broker.call('@pc_auto__c.find', {\n    filters: [['row__c', '=', 1], ['col__c', '=', 28], ['lay__c', '=', 6]], \n});\n// node.warn(rs.length);\n// node.warn(rs);\n// node.warn(rs.forEach(value => {node.warn(value)}));\n\n// return\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;\n\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',\n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '拣选区',  // 最终要去到哪个位置的终点位置  \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',\n\n                ...baseInfo\n            }\n        });\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "cdd165c4db8f0f47"
            ]
        ]
    },
    {
        "id": "b0c5afdfdd209760",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 160,
        "wires": []
    },
    {
        "id": "cdd165c4db8f0f47",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 200,
        "wires": []
    },
    {
        "id": "f677c1de8dcd0215",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "bc6557d47e64c92a"
            ]
        ]
    },
    {
        "id": "bc6557d47e64c92a",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "立库货架-容器状态表  - 创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_status__c.find', {\n    filters: [['container_use__c', '=', '原料'], ['container_status__c','=','在库']],\n    // filters: [['container_status__c', '=', '在库']],\n    // top: 11,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n});\n// const length = rs.slice(24, 105)\n// node.warn(length);\n// node.warn(length.length);\n// node.warn(rs[161]);\n// node.warn(rs);\n// rs.forEach(v => node.warn(v))\n// return\n\nif (rs) {\n    rs.forEach(async function (element) {\n\n        // const { row__c, col__c, lay__c, con__c: Pallet } = element;  // 1\n\n        const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n        node.warn(\"创建成功\");\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "a0509d40741487fb"
            ]
        ]
    },
    {
        "id": "a0509d40741487fb",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 200,
        "wires": []
    },
    {
        "id": "3f96fbeb50977cb2",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "立库货架 - 创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n// 修改查询条件 & 出库类型(原料/配餐/投料区/拣选区)\nconst rs = await broker.call('@pc_auto__c.find', {\n    // filters: [['status__c', '=', '占用'], ['row__c', '=', 1], ['col__c', '=', 94], ['lay__c', '=', 2 ]],\n    // filters: [['status__c', '=', '占用'], ['con__c', '=',\"L1318\"]],\n    filters: [['status__c', '=', '占用']],\n    top: 8,\n    sort: 'col__c asc',\n    // sort: 'col__c desc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\n\n// const rs = await broker.call('@pc_auto_status__c.find', {\n//     filters: [['container_use__c', '=', '空箱'], ['lay__c', '!=', '']],\n//     top: 16,\n//     // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//     sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//     // sort: 'row__c asc'\n// });\n\n// node.warn(rs.length);\n// node.warn(rs);\n// rs.forEach(value => { node.warn(value) })\n\n// return\n\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;  // 1\n        \n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '投料区',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n        node.warn(\"创建成功\");\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "8fb84a80fb246ae7"
            ]
        ]
    },
    {
        "id": "8fb84a80fb246ae7",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "e7f340d92f972f12",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "立库货架 - 创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n// 修改查询条件 & 出库类型(原料/配餐/投料区/拣选区)\nconst rs = await broker.call('@pc_auto__c.find', {\n    // filters: [['status__c', '=', '占用'], ['row__c', '=', 1], ['col__c', '=', 94], ['lay__c', '=', 2 ]],\n    // filters: [['status__c', '=', '占用'], ['con__c', '=',\"L1318\"]],\n    filters: [['status__c', '=', '占用']],\n    top: 8,\n    sort: 'col__c asc',\n    // sort: 'col__c desc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\n\n// const rs = await broker.call('@pc_auto_status__c.find', {\n//     filters: [['container_use__c', '=', '空箱'], ['lay__c', '!=', '']],\n//     top: 16,\n//     // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//     sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//     // sort: 'row__c asc'\n// });\n\n// node.warn(rs.length);\n// node.warn(rs);\n// rs.forEach(value => { node.warn(value) })\n\n// return\n\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;  // 1\n        \n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '配餐',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '投料区',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '2',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n        node.warn(\"创建成功\");\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "a77450dc6757a6a9"
            ]
        ]
    },
    {
        "id": "a77450dc6757a6a9",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 160,
        "wires": []
    },
    {
        "id": "6f9c78260434073f",
        "type": "ui_button",
        "z": "d119a8eb06199d8b",
        "name": "",
        "group": "de58f7a77abfb6dd",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "297d47b39a0fecf0"
            ]
        ]
    },
    {
        "id": "d9eb831ac2e63cd0",
        "type": "ui_button",
        "z": "d119a8eb06199d8b",
        "name": "",
        "group": "34bbe66c4327554f",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "3f96fbeb50977cb2"
            ]
        ]
    },
    {
        "id": "bd70095437170455",
        "type": "ui_button",
        "z": "d119a8eb06199d8b",
        "name": "",
        "group": "67b4b243cee4443e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 160,
        "wires": [
            [
                "e7f340d92f972f12"
            ]
        ]
    },
    {
        "id": "8041e2cb7383b384",
        "type": "function",
        "z": "d119a8eb06199d8b",
        "name": "立库货架 - 创建循环出库任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n// 修改查询条件 & 出库类型(原料/配餐/投料区/拣选区)\nconst rs = await broker.call('@pc_auto__c.find', {\n    // filters: [['status__c', '=', '占用'], ['row__c', '=', 1], ['col__c', '=', 94], ['lay__c', '=', 2 ]],\n    filters: [['status__c', '=', '占用'], ['con__c', '=',\"L0621\"]],\n    // filters: [['status__c', '=', '占用']],\n    top: 8,\n    sort: 'col__c asc',\n    // sort: 'col__c desc',//  1排1列 1-9 层     2排1列 1-9 层   第1排2列 1-9 层\n});\n\n// const rs = await broker.call('@pc_auto_status__c.find', {\n//     filters: [['container_use__c', '=', '空箱'], ['lay__c', '!=', '']],\n//     top: 16,\n//     // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//     sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//     // sort: 'row__c asc'\n// });\n\n// node.warn(rs.length);\n// node.warn(rs);\n// rs.forEach(value => { node.warn(value) })\n\n// return\n\nif(rs){\n    rs.forEach(async function(element) {\n\n        const { row__c, col__c, lay__c, con__c: Pallet } = element;  // 1\n        \n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '配餐',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n        node.warn(\"创建成功\");\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "d1653387e4c34d1b"
            ]
        ]
    },
    {
        "id": "d1653387e4c34d1b",
        "type": "debug",
        "z": "d119a8eb06199d8b",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "604839fb9aa64cf1",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "8041e2cb7383b384"
            ]
        ]
    },
    {
        "id": "457815490c50f2d1",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "原料 && 拣选区",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "297d47b39a0fecf0"
            ]
        ]
    },
    {
        "id": "c633233ab56aea02",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "原料 && 投料区",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "3f96fbeb50977cb2"
            ]
        ]
    },
    {
        "id": "9c788f015f32526a",
        "type": "inject",
        "z": "d119a8eb06199d8b",
        "name": "配餐 && 投料区",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "e7f340d92f972f12"
            ]
        ]
    },
    {
        "id": "4c9bc8910f6876f5",
        "type": "steedos-instance",
        "z": "728aa853114bba39",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "669739a36bd5c6a8",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "入库+++第一箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n// 入库 - 堆垛机放货完成、WCS需要处理的事情 ???\n// 1 处理WCS入库任务表 及 WCS堆垛机任务表 \n// 2 处理 立库货架表 及 立库货架容器状态表\n// 3 给堆垛机返回数据、处理完成\n\n// 根据数据的起始位置和容器类型、来做哪些操作 \n// 起始位置：分拣区、投料区、1022\n// 容器类型：空箱、原料、配餐\n\n// if (分拣区, 原料){扣减原料的数量}\n// if (投料区, 原料){表中有原料、相加}\n// if (投料区, 空箱){表中无物料、新增数据}\n// if (配餐){新增数据、一个箱子多条数据}\n// if (1022,  空箱){无操作}\n// else{未分配成功}\n\n\n\n// 第一二三箱子放货完成逻辑处理相同、只需要修改信号即可\n\n\nif (arr[44] === 0 && arr[45] === 0 && arr[46] === 1) {  // 空闲 && 无报警 && 无暂停 && 第一箱完成\n\n    let palletNo = arr[47]\n    let taskNo = arr[48]\n    // node.warn(palletNo);\n    // node.warn(taskNo); \n    \n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n    // 2.查询堆垛机表数据是否正确、报警\n    let stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', palletNo]] });\n    if (stacker.length !== 1) { node.warn(\"Error==> 堆垛机表中存在相同数据\"); return };\n\n    // 3.确认堆垛机放货的终点位置  cl错误&&return \n    const { _id: StackerId, loc_dest__c: locDest } = stacker[0];\n    // node.warn(locDest); // 0101020000 校验位置是否相等\n\n    // 4.查询入库任务是否正确  cl错误&&return\n    let WCSstorage = await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', palletNo]] });\n    if (WCSstorage.length !== 1) { node.warn(\"Error==> 入库任务表中存在相同数据\"); return };\n\n\n    // node.warn(123222);\n    // 5.根据入库任务中 容器用途、来源于、托盘号、终点位置\n    const { _id: WCSId, container_use__c, originate__c, pallet_number__c, dest_loc__c } = WCSstorage[0];\n\n    // 6.更新立库货架 状态\n    let auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', palletNo], ['status__c', '=', '预占用']] });\n    if (auto.length !== 1) { node.warn(\"Error==> 查询立库货架错误\"); return };\n    const { _id: autoId, row__c: row, col__c: col, lay__c: lay } = auto[0];\n\n    // 7.注意：更新立库货架容器状态的(每个箱子用途不一定相同)   排列层、容器用途、容器状态\n    let autoStatus = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', palletNo]] });\n\n\n    if (container_use__c === '原料' && originate__c === '即时库存') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        // let pallet = \"L1900\"\n        const fDocs = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]]\n        });\n        // node.warn(fDocs);\n        if (fDocs.length) {\n            const { _id, container_number__c, material_code__c, material_name__c, specifications__c, box_number__c } = fDocs[0];\n            // 删除待上架原料中数据\n            // 写入到容器操作记录中去\n            await broker.call('@pc_auto_record__c.insert', {\n                doc: {\n                    time__c: time,\n                    container_use__c: \"原料\",\n                    container_number__c: container_number__c,\n                    // project_number__c: marker[0].project_number__c,\n                    material_code__c: material_code__c,\n                    material_name__c: material_name__c,\n                    specifications__c: specifications__c,\n                    age_number__c: 0,\n                    now_number__c: Number(box_number__c),\n                    document_number__c: \"即时库存\",\n                    operation__c: \"即时库存\",\n\n                    ...baseInfo\n                }\n            });\n            await broker.call('@pc_auto_waiting__c.delete', { id: _id });\n\n        }\n        return [{ payload: 1 }]\n    }\n  \n\n\n    if (container_use__c === '空箱' && originate__c === '空箱') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        return [{payload: 1}]\n    }\n\n\n\n// 修改空箱 -> 原料\n\n\n    if (container_use__c === '原料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length === 1)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                await broker.call('@pc_auto_record__c.update', {\n                    id: record[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: Number(record[0].now_number__c),\n                        now_number__c: Number(marker[0].box_number__c) + Number(record[0].now_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n            else {\n                await broker.call('@pc_auto_record__c.insert', {\n                    doc: {\n                        time__c: time,\n                        container_use__c: \"原料\",\n                        container_number__c: marker[0].container_number__c,\n                        project_number__c: marker[0].project_number__c,\n                        material_code__c: marker[0].material_code__c,\n                        material_name__c: marker[0].material_name__c,\n                        specifications__c: marker[0].specifications__c,\n                        age_number__c: 0,\n                        now_number__c: Number(marker[0].box_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n\n                        ...baseInfo\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n            \n        }\n       \n    }\n\n    if (container_use__c === '原料领料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',   \n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_picking__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                // node.warn(record);\n                const value = Number(marker[0].materialnum__c) - Number(marker[0].box_number__c);\n                if(value === 0){\n                    // 标记为空箱\n                    // 删除原料记录\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '空箱',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.delete', { id: record[0]._id });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n                else{\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '原料',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.update', {\n                        id: record[0]._id, doc: {\n                            time__c: time,\n                            age_number__c: Number(marker[0].materialnum__c),\n                            now_number__c: value,\n                            document_number__c: marker[0].document_number__c,\n                            operation__c: marker[0].operation__c, \n                        }\n                    });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n                \n            } \n            \n        }\n        \n    }\n\n\n\n    if (container_use__c === '原料' && originate__c === '拣选区') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: {\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查询配餐容器关系表\n        //     1、for循环累加 已完成 && 标记数量\n        //     2、如果 箱内数量 - 标记数量 === 0   此箱子是空箱了 需要删除此item && 容器用途是 空箱\n        //     3、如果 箱内数量 - 标记数量 > 0     此箱子还是原料\n        const configRelation = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['container_number__c', '=', palletNo ]]\n        });\n        if(configRelation.length){\n            const resu = configRelation.reduce((curr, prev) => {\n                // node.warn(prev);\n                if (prev.status__c === \"已完成\") {\n                    return curr + prev.remark_number__c\n                } else {\n                    return curr\n                }\n            }, 0)\n            const results = configRelation[0].box_number__c - resu;\n            if (results === 0) {\n                // 表示箱子是空箱了\n                // 查找原料表中的这个数据并删除掉 \n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.delete', { id: ff[0]._id });\n\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            }\n            if (results > 0) {\n                // 当前箱内数量为 results\n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.update', {\n                    id: ff[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: ff[0].now_number__c,\n                        now_number__c: results\n                    }\n                });\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            } \n        }\n\n        \n    }\n\n   \n\n\n    if (container_use__c === '配餐' && originate__c === '投料区'){\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '配餐',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        const res = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['config_container_number__c', '=', palletNo]]\n        });\n        if(res.length){\n            // 先根据MESID过滤数据、再写入配餐表中去  时间, MESID...\n            let newArr = []\n            let obj = {}\n            for (let i = 0; i < res.length; i++) {\n                if (res[i].status__c === \"已完成\") {\n                    if (!obj[res[i].mes_id__c]) {\n                        newArr.push(res[i])\n                        obj[res[i].mes_id__c] = true\n                    }\n                    else {\n                        for (let r = 0; r < newArr.length; r++) {\n                            const element = newArr[r];\n                            if (element.mes_id__c === res[i].mes_id__c) {\n                                element.remark_number__c += res[i].remark_number__c\n                            }\n                        }\n                    }\n                }\n            }\n            newArr.forEach(async item => {\n                let newDoc = {\n                    time__c: time,\n                    container_type__c: '料箱',\n                    container_number__c: item.config_container_number__c,\n                    container_use__c: '配餐',\n                    project_number__c: item.config_project_number__c || undefined,\n                    cupboard_number__c: item.config_cabinet_number__c || undefined,\n                    mes_id__c: Number(item.mes_id__c),\n                    demand_number__c: Number(item.mes_demand_quantity__c),\n                    curr_boxnum__c: Number(item.remark_number__c), // ??????????????????????????????????\n                    material_code__c: item.material_code__c,\n                    material_name__c: item.material_name__c,\n                    specifications__c: item.specifications__c,\n\n                    ...baseInfo\n                }\n                await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n            })\n\n\n            res.forEach(async function (element) {\n                if (element.status__c === \"已完成\") {\n                    await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n                    await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n                }\n            });\n\n\n            return [{ payload: 1 }]\n        }\n        return [{ payload: 1 }]\n    }\n\n\n\n\n\n\n\n\n    // // 更新WCS入库任务 搬运结束\n    // // 更新堆垛机任务表字段 入库、状态、未完成、已完成\n    // // 更新立库货架 货位状态\n    // // 更新立库货架容器状态 排列层、容器用途、容器状态\n}\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 240,
        "wires": [
            [
                "9d0c4e214037620b"
            ]
        ]
    },
    {
        "id": "64cf7a5aa02b5415",
        "type": "s7 control",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "function": "trigger",
        "name": "",
        "x": 260,
        "y": 80,
        "wires": [
            [
                "9fc7efa54499434c"
            ]
        ]
    },
    {
        "id": "694fe68019bd5286",
        "type": "s7 in",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "mode": "all",
        "variable": "upperAllow",
        "diff": true,
        "name": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "669739a36bd5c6a8",
                "be05a09829461cb6",
                "b63a26f64de27b80"
            ]
        ]
    },
    {
        "id": "9d0c4e214037620b",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom1",
        "name": "",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "be05a09829461cb6",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "入库+++第二箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n\n\n// 入库 - 堆垛机放货完成、WCS需要处理的事情 ???\n// 1 处理WCS入库任务表 及 WCS堆垛机任务表 \n// 2 处理 立库货架表 及 立库货架容器状态表\n// 3 给堆垛机返回数据、处理完成\n\n// 根据数据的起始位置和容器类型、来做哪些操作 \n// 起始位置：分拣区、投料区、1022\n// 容器类型：空箱、原料、配餐\n\n// if (分拣区, 原料){扣减原料的数量}\n// if (投料区, 原料){表中有原料、相加}\n// if (投料区, 空箱){表中无物料、新增数据}\n// if (配餐){新增数据、一个箱子多条数据}\n// if (1022,  空箱){无操作}\n// else{未分配成功}\n\n\n\n// 第一二三箱子放货完成逻辑处理相同、只需要修改信号即可\n\n\nif (arr[44] === 0 && arr[45] === 0 && arr[49] === 1) {  // 空闲 && 无报警 && 无暂停 && 第二箱完成\n    \n    // 第二箱完成\n    let palletNo = arr[50]\n    let taskNo = arr[51]\n    // node.warn(palletNo);\n    // node.warn(taskNo); \n\n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n    // 2.查询堆垛机表数据是否正确、报警\n    let stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', palletNo]] });\n    if (stacker.length !== 1) { node.warn(\"Error==> 堆垛机表中存在相同数据\"); return };\n\n    // 3.确认堆垛机放货的终点位置  cl错误&&return \n    const { _id: StackerId, loc_dest__c: locDest } = stacker[0];\n    // node.warn(locDest); // 0101020000 校验位置是否相等\n\n    // 4.查询入库任务是否正确  cl错误&&return\n    let WCSstorage = await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', palletNo]] });\n    if (WCSstorage.length !== 1) { node.warn(\"Error==> 入库任务表中存在相同数据\"); return };\n\n\n    // 5.根据入库任务中 容器用途、来源于、托盘号、终点位置\n    const { _id: WCSId, container_use__c, originate__c, pallet_number__c, dest_loc__c } = WCSstorage[0];\n\n    // 6.更新立库货架 状态\n    let auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', palletNo], ['status__c', '=', '预占用']] });\n    if (auto.length !== 1) { node.warn(\"Error==> 查询立库货架错误\"); return };\n    const { _id: autoId, row__c: row, col__c: col, lay__c: lay } = auto[0];\n\n    // 7.注意：更新立库货架容器状态的(每个箱子用途不一定相同)   排列层、容器用途、容器状态\n    let autoStatus = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', palletNo]] });\n\n\n\n\n\n    if (container_use__c === '原料' && originate__c === '即时库存') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        // let pallet = \"L1900\"\n        const fDocs = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]]\n        });\n        // node.warn(fDocs);\n        if (fDocs.length) {\n            const { _id, container_number__c, material_code__c, material_name__c, specifications__c, box_number__c } = fDocs[0];\n            // 删除待上架原料中数据\n            // 写入到容器操作记录中去\n            await broker.call('@pc_auto_record__c.insert', {\n                doc: {\n                    time__c: time,\n                    container_use__c: \"原料\",\n                    container_number__c: container_number__c,\n                    // project_number__c: marker[0].project_number__c,\n                    material_code__c: material_code__c,\n                    material_name__c: material_name__c,\n                    specifications__c: specifications__c,\n                    age_number__c: 0,\n                    now_number__c: Number(box_number__c),\n                    document_number__c: \"即时库存\",\n                    operation__c: \"即时库存\",\n\n                    ...baseInfo\n                }\n            });\n            await broker.call('@pc_auto_waiting__c.delete', { id: _id });\n\n        }\n        return [{ payload: 1 }]\n    }\n\n\n    if (container_use__c === '空箱' && originate__c === '空箱') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        return [{ payload: 1 }]\n    }\n\n\n\n\n\n    if (container_use__c === '原料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length === 1)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                await broker.call('@pc_auto_record__c.update', {\n                    id: record[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: Number(record[0].now_number__c),\n                        now_number__c: Number(marker[0].box_number__c) + Number(record[0].now_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n            else {\n                await broker.call('@pc_auto_record__c.insert', {\n                    doc: {\n                        time__c: time,\n                        container_use__c: \"原料\",\n                        container_number__c: marker[0].container_number__c,\n                        project_number__c: marker[0].project_number__c,\n                        material_code__c: marker[0].material_code__c,\n                        material_name__c: marker[0].material_name__c,\n                        specifications__c: marker[0].specifications__c,\n                        age_number__c: 0,\n                        now_number__c: Number(marker[0].box_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n\n                        ...baseInfo\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n\n        }\n\n    }\n\n\n\n\n    if (container_use__c === '原料领料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',   \n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_picking__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                // node.warn(record);\n                const value = Number(marker[0].materialnum__c) - Number(marker[0].box_number__c);\n                if (value === 0) {\n                    // 标记为空箱\n                    // 删除原料记录\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '空箱',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.delete', { id: record[0]._id });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n                else {\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '原料',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.update', {\n                        id: record[0]._id, doc: {\n                            time__c: time,\n                            age_number__c: Number(marker[0].materialnum__c),\n                            now_number__c: value,\n                            document_number__c: marker[0].document_number__c,\n                            operation__c: marker[0].operation__c, \n                        }\n                    });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    if (container_use__c === '原料' && originate__c === '拣选区') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: {\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查询配餐容器关系表\n        //     1、for循环累加 已完成 && 标记数量\n        //     2、如果 箱内数量 - 标记数量 === 0   此箱子是空箱了 需要删除此item && 容器用途是 空箱\n        //     3、如果 箱内数量 - 标记数量 > 0     此箱子还是原料\n        const configRelation = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['container_number__c', '=', palletNo]]\n        });\n        if (configRelation.length) {\n            const resu = configRelation.reduce((curr, prev) => {\n                // node.warn(prev);\n                if (prev.status__c === \"已完成\") {\n                    return curr + prev.remark_number__c\n                }\n                else{\n                    return curr\n                }\n            }, 0)\n            const results = configRelation[0].box_number__c - resu;\n            node.warn(results);\n            if (results === 0) {\n                // 表示箱子是空箱了\n                // 查找原料表中的这个数据并删除掉 \n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.delete', { id: ff[0]._id });\n\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            }\n            if (results > 0) {\n                // 当前箱内数量为 results\n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.update', {\n                    id: ff[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: ff[0].now_number__c,\n                        now_number__c: results\n                    }\n                });\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            }\n        }\n\n       \n    }\n\n\n\n\n    if (container_use__c === '配餐' && originate__c === '投料区') {\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '配餐',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        const res = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['config_container_number__c', '=', palletNo]]\n        });\n        if(res.length){\n            // 先根据MESID过滤数据、再写入配餐表中去  时间, MESID...\n            let newArr = []\n            let obj = {}\n            for (let i = 0; i < res.length; i++) {\n                if (res[i].status__c === \"已完成\") {\n                    if (!obj[res[i].mes_id__c]) {\n                        newArr.push(res[i])\n                        obj[res[i].mes_id__c] = true\n                    }\n                    else {\n                        for (let r = 0; r < newArr.length; r++) {\n                            const element = newArr[r];\n                            if (element.mes_id__c === res[i].mes_id__c) {\n                                element.remark_number__c += res[i].remark_number__c\n                            }\n                        }\n                    }\n                }\n            }\n            newArr.forEach(async item => {\n                let newDoc = {\n                    time__c: time,\n                    container_type__c: '料箱',\n                    container_number__c: item.config_container_number__c,\n                    container_use__c: '配餐',\n                    project_number__c: item.config_project_number__c || undefined,\n                    cupboard_number__c: item.config_cabinet_number__c || undefined,\n                    mes_id__c: Number(item.mes_id__c),\n                    demand_number__c: Number(item.mes_demand_quantity__c),\n                    curr_boxnum__c: Number(item.remark_number__c), // ??????????????????????????????????\n                    material_code__c: item.material_code__c,\n                    material_name__c: item.material_name__c,\n                    specifications__c: item.specifications__c,\n\n                    ...baseInfo\n                }\n                await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n            })\n\n\n            res.forEach(async function (element) {\n                if (element.status__c === \"已完成\") {\n                    await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n                    await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n                }\n            });\n            return [{ payload: 1 }]\n        }\n        return [{ payload: 1 }]\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // // 更新WCS入库任务 搬运结束\n    // // 更新堆垛机任务表字段 入库、状态、未完成、已完成\n    // // 更新立库货架 货位状态\n    // // 更新立库货架容器状态 排列层、容器用途、容器状态\n}\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 300,
        "wires": [
            [
                "5b76a7c26ef5ba48"
            ]
        ]
    },
    {
        "id": "5b76a7c26ef5ba48",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom2",
        "name": "",
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "b63a26f64de27b80",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "入库+++第三箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n// 入库 - 堆垛机放货完成、WCS需要处理的事情 ???\n// 1 处理WCS入库任务表 及 WCS堆垛机任务表 \n// 2 处理 立库货架表 及 立库货架容器状态表\n// 3 给堆垛机返回数据、处理完成\n\n// 根据数据的起始位置和容器类型、来做哪些操作 \n// 起始位置：分拣区、投料区、1022\n// 容器类型：空箱、原料、配餐\n\n// if (分拣区, 原料){扣减原料的数量}\n// if (投料区, 原料){表中有原料、相加}\n// if (投料区, 空箱){表中无物料、新增数据}\n// if (配餐){新增数据、一个箱子多条数据}\n// if (1022,  空箱){无操作}\n// else{未分配成功}\n\n\n\n// 第一二三箱子放货完成逻辑处理相同、只需要修改信号即可\n\n\nif (arr[44] === 0 && arr[45] === 0 && arr[52] === 1) {  // 空闲 && 无报警 && 无暂停 && 第二箱完成\n\n    // 第三箱完成\n    let palletNo = arr[53]\n    let taskNo = arr[54]\n    // node.warn(palletNo);\n    // node.warn(taskNo); \n\n    const baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n    // 2.查询堆垛机表数据是否正确、报警\n    let stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', palletNo]] });\n    if (stacker.length !== 1) { node.warn(\"Error==> 堆垛机表中存在相同数据\"); return };\n\n    // 3.确认堆垛机放货的终点位置  cl错误&&return \n    const { _id: StackerId, loc_dest__c: locDest } = stacker[0];\n    // node.warn(locDest); // 0101020000 校验位置是否相等\n\n    // 4.查询入库任务是否正确  cl错误&&return\n    let WCSstorage = await broker.call('@pc_wcs_route__c.find', { filters: [['pallet_number__c', '=', palletNo]] });\n    if (WCSstorage.length !== 1) { node.warn(\"Error==> 入库任务表中存在相同数据\"); return };\n\n\n    // 5.根据入库任务中 容器用途、来源于、托盘号、终点位置\n    const { _id: WCSId, container_use__c, originate__c, pallet_number__c, dest_loc__c } = WCSstorage[0];\n\n    // 6.更新立库货架 状态\n    let auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', palletNo], ['status__c', '=', '预占用']] });\n    if (auto.length !== 1) { node.warn(\"Error==> 查询立库货架错误\"); return };\n    const { _id: autoId, row__c: row, col__c: col, lay__c: lay } = auto[0];\n\n    // 7.注意：更新立库货架容器状态的(每个箱子用途不一定相同)   排列层、容器用途、容器状态\n    let autoStatus = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', palletNo]] });\n\n\n    if (container_use__c === '原料' && originate__c === '即时库存') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        // let pallet = \"L1900\"\n        const fDocs = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]]\n        });\n        // node.warn(fDocs);\n        if (fDocs.length) {\n            const { _id, container_number__c, material_code__c, material_name__c, specifications__c, box_number__c } = fDocs[0];\n            // 删除待上架原料中数据\n            // 写入到容器操作记录中去\n            await broker.call('@pc_auto_record__c.insert', {\n                doc: {\n                    time__c: time,\n                    container_use__c: \"原料\",\n                    container_number__c: container_number__c,\n                    // project_number__c: marker[0].project_number__c,\n                    material_code__c: material_code__c,\n                    material_name__c: material_name__c,\n                    specifications__c: specifications__c,\n                    age_number__c: 0,\n                    now_number__c: Number(box_number__c),\n                    document_number__c: \"即时库存\",\n                    operation__c: \"即时库存\",\n\n                    ...baseInfo\n                }\n            });\n            await broker.call('@pc_auto_waiting__c.delete', { id: _id });\n\n        }\n        return [{ payload: 1 }]\n    }\n\n\n\n    if (container_use__c === '空箱' && originate__c === '空箱') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        return [{ payload: 1 }]\n    }\n\n\n\n\n\n    if (container_use__c === '原料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_waiting__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length === 1)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                await broker.call('@pc_auto_record__c.update', {\n                    id: record[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: Number(record[0].now_number__c),\n                        now_number__c: Number(marker[0].box_number__c) + Number(record[0].now_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n            else {\n                await broker.call('@pc_auto_record__c.insert', {\n                    doc: {\n                        time__c: time,\n                        container_use__c: \"原料\",\n                        container_number__c: marker[0].container_number__c,\n                        project_number__c: marker[0].project_number__c,\n                        material_code__c: marker[0].material_code__c,\n                        material_name__c: marker[0].material_name__c,\n                        specifications__c: marker[0].specifications__c,\n                        age_number__c: 0,\n                        now_number__c: Number(marker[0].box_number__c),\n                        document_number__c: marker[0].document_number__c,\n                        operation__c: marker[0].operation__c,\n\n                        ...baseInfo\n                    }\n                });\n                await broker.call('@pc_auto_waiting__c.update', {\n                    id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                });\n                return [{ payload: 1 }]\n            }\n\n        }\n\n    }\n\n\n    if (container_use__c === '原料领料' && originate__c === '投料区') {\n        // node.warn(\"我是原料入库===========\");\n        // 步骤：\n        // 1、上面和空箱一样（容器用途为原料）\n        // 2、查找待上架原料表根据容器编号查找项目号\n        // 3、如果有写入一条数据到容器操作记录中，如果没有就拉到\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',   \n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查找待上架原料表 \n        // 先查找 `容器操作记录表` 中是否有数据、如果有就Update(根据箱号查找是否有数据)\n        // 如果没有数据，向 `容器操作记录表` 中写一条数据\n        // 处理完 `待上架原料表`  后，删除 `待上架原料表`  中数据\n        //       删除 `ERP-数据详情表` 中数据\n        // let palletNo = \"L0002\"\n        const marker = await broker.call('@pc_auto_picking__c.find', {\n            filters: [['container_number__c', '=', palletNo]],\n        });\n        if (Boolean(marker.length)) {\n\n            const record = await broker.call('@pc_auto_record__c.find', {\n                filters: [['container_number__c', '=', palletNo]],\n            });\n            if (Boolean(record.length)) {\n                // node.warn(record);\n                const value = Number(marker[0].materialnum__c) - Number(marker[0].box_number__c);\n                if (value === 0) {\n                    // 标记为空箱\n                    // 删除原料记录\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '空箱',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.delete', { id: record[0]._id });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n                else {\n                    await broker.call('@pc_auto_status__c.update', {\n                        id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                            row__c: Number(row),\n                            col__c: Number(col),\n                            lay__c: Number(lay),\n                            container_use__c: '原料',\n                            container_status__c: '在库'\n                        }\n                    });\n                    await broker.call('@pc_auto_record__c.update', {\n                        id: record[0]._id, doc: {\n                            time__c: time,\n                            age_number__c: Number(marker[0].materialnum__c),\n                            now_number__c: value,\n                            document_number__c: marker[0].document_number__c,\n                            operation__c: marker[0].operation__c, \n                        }\n                    });\n                    await broker.call('@pc_auto_picking__c.update', {\n                        id: marker[0]._id, doc: { is_finished__c: \"已完成\" }\n                    });\n                    return [{ payload: 1 }]\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n\n    if (container_use__c === '原料' && originate__c === '拣选区') {\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: {\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n        //         container_status__c: '在库'\n        //     }\n        // });\n\n        // 查询配餐容器关系表\n        //     1、for循环累加 已完成 && 标记数量\n        //     2、如果 箱内数量 - 标记数量 === 0   此箱子是空箱了 需要删除此item && 容器用途是 空箱\n        //     3、如果 箱内数量 - 标记数量 > 0     此箱子还是原料\n        const configRelation = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['container_number__c', '=', palletNo]]\n        });\n        if (configRelation.length) {\n            const resu = configRelation.reduce((curr, prev) => {\n                // node.warn(prev);\n                if (prev.status__c === \"已完成\") {\n                    return curr + prev.remark_number__c\n                } else {\n                    return curr\n                }\n            }, 0)\n            const results = configRelation[0].box_number__c - resu;\n            // node.warn(results);\n            if (results === 0) {\n                // 表示箱子是空箱了\n                // 查找原料表中的这个数据并删除掉 \n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.delete', { id: ff[0]._id });\n\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            }\n            if (results > 0) {\n                // 当前箱内数量为 results\n                const ff = await broker.call('@pc_auto_record__c.find', {\n                    filters: ['container_number__c', '=', palletNo]\n                });\n                await broker.call('@pc_auto_record__c.update', {\n                    id: ff[0]._id, doc: {\n                        time__c: time,\n                        age_number__c: ff[0].now_number__c,\n                        now_number__c: results\n                    }\n                });\n                await broker.call('@pc_auto_status__c.update', {\n                    id: autoStatus[0]._id, doc: {\n                        row__c: Number(row),\n                        col__c: Number(col),\n                        lay__c: Number(lay),\n                        container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n                        container_status__c: '在库'\n                    }\n                });\n                return [{ payload: 1 }]\n            }\n        }\n\n       \n    }\n\n\n\n\n    if (container_use__c === '配餐' && originate__c === '投料区') {\n\n        // 1.堆垛机表更新 入库、状态、未完成、已完成\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: StackerId, doc: {\n                cmdtype__c: '入库完成',\n                status__c: '入库完成',\n                undone__c: '入库完成',\n                done__c: '入库完成'\n            }\n        });\n        // 2.WCS入库任务中更新 搬运结束\n        await broker.call('@pc_wcs_route__c.update', { id: WCSId, doc: { carry_over__c: '搬运结束' } });\n\n        // 3.立库货架更新 货位状态\n        await broker.call('@pc_auto__c.update', { id: autoId, doc: { status__c: '占用' } });\n\n        // 4.立库货架容器状态 更新 排列层、容器用途、容器状态\n        await broker.call('@pc_auto_status__c.update', {\n            id: autoStatus[0]._id, doc: { // ??????类型为数值还是字符串\n                row__c: Number(row),\n                col__c: Number(col),\n                lay__c: Number(lay),\n                container_use__c: '配餐',  // ?????空箱、原料、配餐 要标记不同字段\n                container_status__c: '在库'\n            }\n        });\n        const res = await broker.call('@pc_auto_config_relation__c.find', {\n            filters: [['config_container_number__c', '=', palletNo]]\n        });\n        if(res.length){\n            // 先根据MESID过滤数据、再写入配餐表中去  时间, MESID...\n            let newArr = []\n            let obj = {}\n            for (let i = 0; i < res.length; i++) {\n                if (res[i].status__c === \"已完成\") {\n                    if (!obj[res[i].mes_id__c]) {\n                        newArr.push(res[i])\n                        obj[res[i].mes_id__c] = true\n                    }\n                    else {\n                        for (let r = 0; r < newArr.length; r++) {\n                            const element = newArr[r];\n                            if (element.mes_id__c === res[i].mes_id__c) {\n                                element.remark_number__c += res[i].remark_number__c\n                            }\n                        }\n                    }\n                }\n            }\n            newArr.forEach(async item => {\n                let newDoc = {\n                    time__c: time,\n                    container_type__c: '料箱',\n                    container_number__c: item.config_container_number__c,\n                    container_use__c: '配餐',\n                    project_number__c: item.config_project_number__c || undefined,\n                    cupboard_number__c: item.config_cabinet_number__c || undefined,\n                    mes_id__c: Number(item.mes_id__c),\n                    demand_number__c: Number(item.mes_demand_quantity__c),\n                    curr_boxnum__c: Number(item.remark_number__c), // ??????????????????????????????????\n                    material_code__c: item.material_code__c,\n                    material_name__c: item.material_name__c,\n                    specifications__c: item.specifications__c,\n\n                    ...baseInfo\n                }\n                await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n            })\n\n\n            res.forEach(async function (element) {\n                if (element.status__c === \"已完成\") {\n                    await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n                    await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n                }\n            });\n            return [{ payload: 1 }]\n        }\n        return [{ payload: 1 }]\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // // 更新WCS入库任务 搬运结束\n    // // 更新堆垛机任务表字段 入库、状态、未完成、已完成\n    // // 更新立库货架 货位状态\n    // // 更新立库货架容器状态 排列层、容器用途、容器状态\n}\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 360,
        "wires": [
            [
                "eee4194c99d4bcb9"
            ]
        ]
    },
    {
        "id": "eee4194c99d4bcb9",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom3",
        "name": "",
        "x": 430,
        "y": 360,
        "wires": []
    },
    {
        "id": "81b9ea6a1a01bbdc",
        "type": "inject",
        "z": "728aa853114bba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "64cf7a5aa02b5415"
            ]
        ]
    },
    {
        "id": "9fc7efa54499434c",
        "type": "debug",
        "z": "728aa853114bba39",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "9038a1df68e6f9e1",
        "type": "s7 in",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "mode": "all",
        "variable": "upperAllow",
        "diff": false,
        "name": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "6fed89510a982658"
            ]
        ]
    },
    {
        "id": "6fed89510a982658",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "堆垛机全局Array",
        "func": "\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(numb);\n// node.warn(arr);\nglobal.set('arr', arr);\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "31509b06e5fb9cda"
            ]
        ]
    },
    {
        "id": "31509b06e5fb9cda",
        "type": "debug",
        "z": "728aa853114bba39",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "26b86adbdab55281",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "出库+++第一箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n// node.warn(arr);\n\n\n\n\n\n\n// 1、堆垛机上报状态和托盘号\n// 2、处理WCS入库任务表(更新搬运完成) 及 WCS堆垛机任务表(更新已完成)\n// 3、处理WMS立库货架表(状态空) 及 立库货架容器状态表(状态空、位置空)\n// 4、给堆垛机发送允许下料\n\n\n// node.warn(pallet);\nif (arr[44] === 0 && arr[45] === 0 && arr[55] === 1) {  // 空闲 && 无报警 && 无暂停 && 第一箱完成\n\n    let pallet = arr[56]\n    let taskNo = arr[57]\n    // // 堆垛机\n    const Stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', pallet]] });\n    // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n    // WCS-出库\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', pallet]] });\n    // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n    // // 立库货架 \n    const pc_auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', pallet]] });\n    // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n    // 立库货架 - 容器状态 \n    const pc_auto_status = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', pallet]] });\n    // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n\n    if (Stacker.length === 1 && outOfStock.length === 1 && pc_auto.length === 1 && pc_auto_status.length === 1){\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: Stacker[0]._id, doc: {\n                cmdtype__c: '出库完成',\n                status__c: '出库完成',\n                undone__c: '出库完成',\n                done__c: '出库完成'\n            }\n        });\n\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: outOfStock[0]._id, doc: {\n                carry_over__c: '搬运结束',\n                stacker_enter__c: '堆垛机出口处理完成'\n            }\n        });\n\n        await broker.call('@pc_auto__c.update', {\n            id: pc_auto[0]._id, doc: {\n                status__c: '空',\n                con__c: '空'\n                // con__c: \"L9999\",\n            }\n        });\n\n        await broker.call('@pc_auto_status__c.update', {\n            id: pc_auto_status[0]._id, doc: {\n                row__c: '',\n                col__c: '',\n                lay__c: '',\n                container_use__c: '空箱',\n                container_status__c: '空',\n            }\n        });\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n\n        // 返回给堆垛机任务处理完成、让堆垛机信号改变\n        // 下发输送线、走到02位置\n\n        return [\n            { payload: 1 },       // 堆垛机处理完成\n            { payload: 1001 },    // 输送线位置上报\n            { payload: plctask }, // 任务号\n            { payload: pallet }   // 托盘号\n        ]\n    }\n    else{\n\n        // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n        // // WCS-出库\n        // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n        // // // 立库货架 \n        // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n        // // 立库货架 - 容器状态 \n        // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n    }\n}\n\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 640,
        "wires": [
            [
                "af842017fb0218ac"
            ],
            [
                "4b9de560b3b00eda"
            ],
            [
                "a2f0b7822f92c7c0"
            ],
            [
                "b3db910df22b3753"
            ]
        ]
    },
    {
        "id": "4b9de560b3b00eda",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_addr2",
        "name": "",
        "x": 670,
        "y": 620,
        "wires": []
    },
    {
        "id": "a2f0b7822f92c7c0",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_taskno7",
        "name": "",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "b3db910df22b3753",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_palletno8",
        "name": "",
        "x": 1060,
        "y": 620,
        "wires": []
    },
    {
        "id": "af842017fb0218ac",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom4",
        "name": "",
        "x": 510,
        "y": 620,
        "wires": []
    },
    {
        "id": "0c6deea1c214e303",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "出库+++第二箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n\n\n\n\n\n\n\n// 1、堆垛机上报状态和托盘号\n// 2、处理WCS入库任务表(更新搬运完成) 及 WCS堆垛机任务表(更新已完成)\n// 3、处理WMS立库货架表(状态空) 及 立库货架容器状态表(状态空、位置空)\n// 4、给堆垛机发送允许下料\n\n\n\n// 第二箱完成\n// node.warn(pallet);\nif (arr[44] === 0 && arr[45] === 0 && arr[58] === 1) {  // 空闲 && 无报警 && 无暂停 && 第二箱完成\n\n    let pallet = arr[59]\n    let taskNo = arr[60]\n    // node.warn(222);\n    // // 堆垛机\n    const Stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', pallet]] });\n    // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n    // WCS-出库\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', pallet]] });\n    // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n    // // 立库货架 \n    const pc_auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', pallet]] });\n    // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n    // 立库货架 - 容器状态 \n    const pc_auto_status = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', pallet]] });\n    // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n\n    if (Stacker.length === 1 && outOfStock.length === 1 && pc_auto.length === 1 && pc_auto_status.length === 1) {\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: Stacker[0]._id, doc: {\n                cmdtype__c: '出库完成',\n                status__c: '出库完成',\n                undone__c: '出库完成',\n                done__c: '出库完成'\n            }\n        });\n\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: outOfStock[0]._id, doc: {\n                carry_over__c: '搬运结束',\n                stacker_enter__c: '堆垛机出口处理完成'\n            }\n        });\n\n        await broker.call('@pc_auto__c.update', {\n            id: pc_auto[0]._id, doc: {\n                status__c: '空',\n                con__c: '空'\n                // con__c: \"L9999\",\n            }\n        });\n\n        await broker.call('@pc_auto_status__c.update', {\n            id: pc_auto_status[0]._id, doc: {\n                row__c: '',\n                col__c: '',\n                lay__c: '',\n                container_use__c: '空箱',\n                container_status__c: '空',\n            }\n        });\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n\n        // 返回给堆垛机任务处理完成、让堆垛机信号改变\n        // 下发输送线、走到02位置\n\n        return [\n            { payload: 1 },       // 堆垛机处理完成\n            { payload: 1001 },    // 输送线位置上报\n            { payload: plctask }, // 任务号\n            { payload: pallet }   // 托盘号\n        ]\n    }\n    else {\n\n        // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n        // // WCS-出库\n        // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n        // // // 立库货架 \n        // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n        // // 立库货架 - 容器状态 \n        // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n    }\n}\n\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "9da64936ec2bc711"
            ],
            [
                "27f7ac5b8450cd8d"
            ],
            [
                "ef3be7d238aaf433"
            ],
            [
                "e87235b5d29c04bf"
            ]
        ]
    },
    {
        "id": "27f7ac5b8450cd8d",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_addr2",
        "name": "",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "ef3be7d238aaf433",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_taskno7",
        "name": "",
        "x": 840,
        "y": 700,
        "wires": []
    },
    {
        "id": "e87235b5d29c04bf",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_palletno8",
        "name": "",
        "x": 1020,
        "y": 700,
        "wires": []
    },
    {
        "id": "9da64936ec2bc711",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom5",
        "name": "",
        "x": 510,
        "y": 700,
        "wires": []
    },
    {
        "id": "3740a825145dcaa9",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "出库+++第三箱完成",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nlet numb = msg.payload;\nlet arr = Object.values(numb);\n\n\n\n\n\n\n\n// 1、堆垛机上报状态和托盘号\n// 2、处理WCS入库任务表(更新搬运完成) 及 WCS堆垛机任务表(更新已完成)\n// 3、处理WMS立库货架表(状态空) 及 立库货架容器状态表(状态空、位置空)\n// 4、给堆垛机发送允许下料\n\n\n// 第三箱完成\n// node.warn(pallet);\nif (arr[44] === 0 && arr[45] === 0 && arr[61] === 1) {  // 空闲 && 无报警 && 无暂停 && 第二箱完成\n\n    let pallet = arr[62]\n    let taskNo = arr[63] \n    // node.warn(pallet);\n    \n        // // 堆垛机\n    const Stacker = await broker.call('@pc_wcs_stacker__c.find', { filters: [['pallet_id__c', '=', pallet]] });\n    // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n    // WCS-出库\n    const outOfStock = await broker.call('@pc_wcs_out_route__c.find', { filters: [['pallet_number__c', '=', pallet]] });\n    // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n    // // 立库货架 \n    const pc_auto = await broker.call('@pc_auto__c.find', { filters: [['con__c', '=', pallet]] });\n    // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n    // 立库货架 - 容器状态 \n    const pc_auto_status = await broker.call('@pc_auto_status__c.find', { filters: [['container_number__c', '=', pallet]] });\n    // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n\n    if (Stacker.length === 1 && outOfStock.length === 1 && pc_auto.length === 1 && pc_auto_status.length === 1) {\n        await broker.call('@pc_wcs_stacker__c.update', {\n            id: Stacker[0]._id, doc: {\n                cmdtype__c: '出库完成',\n                status__c: '出库完成',\n                undone__c: '出库完成',\n                done__c: '出库完成'\n            }\n        });\n\n        await broker.call('@pc_wcs_out_route__c.update', {\n            id: outOfStock[0]._id, doc: {\n                carry_over__c: '搬运结束',\n                stacker_enter__c: '堆垛机出口处理完成'\n            }\n        });\n\n        await broker.call('@pc_auto__c.update', {\n            id: pc_auto[0]._id, doc: {\n                status__c: '空',\n                con__c: '空'\n                // con__c: \"L9999\",\n            }\n        });\n\n        await broker.call('@pc_auto_status__c.update', {\n            id: pc_auto_status[0]._id, doc: {\n                row__c: '',\n                col__c: '',\n                lay__c: '',\n                container_use__c: '空箱',\n                container_status__c: '空',\n            }\n        });\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n\n        // 返回给堆垛机任务处理完成、让堆垛机信号改变\n        // 下发输送线、走到02位置\n\n        return [\n            { payload: 1 },       // 堆垛机处理完成\n            { payload: 1001 },    // 输送线位置上报\n            { payload: plctask }, // 任务号\n            { payload: pallet }   // 托盘号\n        ]\n    }\n    else {\n\n        // if (Stacker.length !== 1) { node.warn(\"堆垛机数据不等于一\"); return }\n        // // WCS-出库\n        // if (outOfStock.length !== 1) { node.warn(\"出库任务数据不等于一\"); return }\n        // // // 立库货架 \n        // if (pc_auto.length !== 1) { node.warn(\"立库货架数据不等于一\"); return }\n        // // 立库货架 - 容器状态 \n        // if (pc_auto_status.length !== 1) { node.warn(\"立库货架-容器状态数据不等于一\"); return }\n    }\n}\n\n\n\n ",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 800,
        "wires": [
            [
                "1dafa9756ea0015a"
            ],
            [
                "63d792a13341d0fe"
            ],
            [
                "b4588afd1f289fc5"
            ],
            [
                "68859b4ed6ac2960"
            ]
        ]
    },
    {
        "id": "63d792a13341d0fe",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_addr2",
        "name": "",
        "x": 670,
        "y": 780,
        "wires": []
    },
    {
        "id": "b4588afd1f289fc5",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_taskno7",
        "name": "",
        "x": 840,
        "y": 780,
        "wires": []
    },
    {
        "id": "68859b4ed6ac2960",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a7ad80b7bd59726f",
        "variable": "1000_palletno8",
        "name": "",
        "x": 1020,
        "y": 780,
        "wires": []
    },
    {
        "id": "1dafa9756ea0015a",
        "type": "s7 out",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "variable": "returnCom6",
        "name": "",
        "x": 510,
        "y": 780,
        "wires": []
    },
    {
        "id": "326c43ca6c933b53",
        "type": "s7 in",
        "z": "728aa853114bba39",
        "endpoint": "a92c9e3a5e932e5c",
        "mode": "all",
        "variable": "upperAllow",
        "diff": true,
        "name": "",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "26b86adbdab55281",
                "0c6deea1c214e303",
                "3740a825145dcaa9"
            ]
        ]
    },
    {
        "id": "41faac47654329f6",
        "type": "inject",
        "z": "728aa853114bba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 360,
        "wires": [
            [
                "58bf541440a27579"
            ]
        ]
    },
    {
        "id": "58bf541440a27579",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "配餐回库",
        "func": "const broker = flow.get('broker'); \nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\n\nconst res = await broker.call('@pc_auto_config_relation__c.find', {\n    filters: [['container_number__c', '=', \"L1544\"]]\n});\nnode.warn(res); \nconst add = res.reduce((curr, prev) => { \n    if(prev.status__c === \"已完成\" || prev.status__c === \"未完成\"){\n        return curr + prev.remark_number__c;\n    }\n    else{\n        return curr\n    } \n}, 0)\n// node.warn(add);\nconst mix = Math.min(...res.map(value => value.usable_number__c))\n\nconst isShow = res[0].box_number__c === (add + mix);\n\nnode.warn(isShow);\n\n// // 先根据MESID过滤数据、再写入配餐表中去  时间, MESID...\n// let newArr = []\n// let obj = {}\n// for (let i = 0; i < res.length; i++) {\n//     if (res[i].status__c === \"已完成\") {\n//         if (!obj[res[i].mes_id__c]) {\n//             newArr.push(res[i])\n//             obj[res[i].mes_id__c] = true\n//         }\n//         else {\n//             for (let r = 0; r < newArr.length; r++) {\n//                 const element = newArr[r];\n//                 if (element.mes_id__c === res[i].mes_id__c) {\n//                     element.remark_number__c += res[i].remark_number__c\n//                 }\n//             }\n//         }\n//     }\n// }\n// newArr.forEach(async item => {\n//     let newDoc = {\n//         time__c: time,\n//         container_type__c: '料箱',\n//         container_number__c: item.config_container_number__c,\n//         container_use__c: '配餐',\n//         project_number__c: item.config_project_number__c,\n//         cupboard_number__c: item.config_cabinet_number__c,\n//         mes_id__c: Number(item.mes_id__c),\n//         demand_number__c: Number(item.mes_demand_quantity__c),\n//         curr_boxnum__c: Number(item.remark_number__c), // ??????????????????????????????????\n//         material_code__c: item.material_code__c,\n//         material_name__c: item.material_name__c,\n//         specifications__c: item.specifications__c,\n\n//         ...baseInfo\n//     }\n//     await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n// })\n\n\n// newArr.forEach(async function (element) {\n//     if (element.status__c === \"已完成\") {\n//         await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n//         await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n//     }\n// });\n\n\n\n\n\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "fad5acc630416903",
        "type": "inject",
        "z": "728aa853114bba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 300,
        "wires": [
            [
                "99cddc06520e4fae"
            ]
        ]
    },
    {
        "id": "99cddc06520e4fae",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "原料回库",
        "func": "const broker = flow.get('broker'); \nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n// let palletNo = \"L1019\"\n// let palletNo = \"L1001\"\n// let palletNo = \"L1018\"\nlet palletNo = \"L1017\"\nconst configRelation = await broker.call('@pc_his_auto_config_relation__c.find', {\n    filters: [['container_number__c', '=', palletNo ]]\n});\nnode.warn(configRelation);\n// return\nif (configRelation.length) {\n    const resu = configRelation.reduce((curr, prev) => {\n        // node.warn(prev);\n        if (prev.status__c === \"已完成\") {\n            return curr + prev.remark_number__c\n        }\n    }, 0)\n    const results = configRelation[0].box_number__c - resu;\n    node.warn(results);\n    return\n    if (results === 0) {\n        // 表示箱子是空箱了\n        // 查找原料表中的这个数据并删除掉 \n        const ff = await broker.call('@pc_auto_record__c.find', {\n            filters: ['container_number__c', '=', palletNo]\n        });\n        await broker.call('@pc_auto_record__c.delete', { id: ff[0]._id });\n\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: {\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '空箱',  // ?????空箱、原料、配餐 要标记不同字段\n        //         container_status__c: '在库'\n        //     }\n        // });\n    }\n    if (results > 0) {\n        // 当前箱内数量为 results\n        const ff = await broker.call('@pc_auto_record__c.find', {\n            filters: ['container_number__c', '=', palletNo]\n        });\n        await broker.call('@pc_auto_record__c.update', {\n            id: ff[0]._id, doc: {\n                age_number__c: ff[0].now_number__c,\n                now_number__c: results\n            }\n        });\n        // await broker.call('@pc_auto_status__c.update', {\n        //     id: autoStatus[0]._id, doc: {\n        //         row__c: Number(row),\n        //         col__c: Number(col),\n        //         lay__c: Number(lay),\n        //         container_use__c: '原料',  // ?????空箱、原料、配餐 要标记不同字段\n        //         container_status__c: '在库'\n        //     }\n        // });\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b797a4ef88236270",
        "type": "inject",
        "z": "728aa853114bba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 330,
        "y": 460,
        "wires": [
            [
                "9d0c4e214037620b"
            ]
        ]
    },
    {
        "id": "787c07ad2b4f5690",
        "type": "inject",
        "z": "728aa853114bba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "1ac81e9cdf1c74c5"
            ]
        ]
    },
    {
        "id": "1ac81e9cdf1c74c5",
        "type": "function",
        "z": "728aa853114bba39",
        "name": "即时库存",
        "func": "const broker = flow.get('broker'); \nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n\nlet pallet = \"L1900\"\nconst fDocs = await broker.call('@pc_auto_waiting__c.find', {\n    filters: [['container_number__c', '=', pallet]]\n});\nnode.warn(fDocs); \nif(fDocs.length){\n    const {_id, container_number__c, material_code__c, material_name__c, specifications__c, box_number__c } = fDocs[0]; \n    // 删除待上架原料中数据\n    // 写入到容器操作记录中去\n    await broker.call('@pc_auto_record__c.insert', {\n        doc: {\n            time__c: time,\n            container_use__c: \"原料\",\n            container_number__c: container_number__c,\n            // project_number__c: marker[0].project_number__c,\n            material_code__c: material_code__c,\n            material_name__c: material_name__c,\n            specifications__c: specifications__c,\n            age_number__c: 0,\n            now_number__c: Number(box_number__c),\n            document_number__c: \"即时库存\",\n            operation__c: \"即时库存\",\n\n            // ...baseInfo\n        }\n    });\n    await broker.call('@pc_auto_waiting__c.delete', { id: _id });\n\n}\n// const add = res.reduce((curr, prev) => { \n//     if(prev.status__c === \"已完成\" || prev.status__c === \"未完成\"){\n//         return curr + prev.remark_number__c;\n//     }\n//     else{\n//         return curr\n//     } \n// }, 0)\n// // node.warn(add);\n// const mix = Math.min(...res.map(value => value.usable_number__c))\n\n// const isShow = res[0].box_number__c === (add + mix);\n\n// node.warn(isShow);\n\n// // // 先根据MESID过滤数据、再写入配餐表中去  时间, MESID...\n// // let newArr = []\n// // let obj = {}\n// // for (let i = 0; i < res.length; i++) {\n// //     if (res[i].status__c === \"已完成\") {\n// //         if (!obj[res[i].mes_id__c]) {\n// //             newArr.push(res[i])\n// //             obj[res[i].mes_id__c] = true\n// //         }\n// //         else {\n// //             for (let r = 0; r < newArr.length; r++) {\n// //                 const element = newArr[r];\n// //                 if (element.mes_id__c === res[i].mes_id__c) {\n// //                     element.remark_number__c += res[i].remark_number__c\n// //                 }\n// //             }\n// //         }\n// //     }\n// // }\n// // newArr.forEach(async item => {\n// //     let newDoc = {\n// //         time__c: time,\n// //         container_type__c: '料箱',\n// //         container_number__c: item.config_container_number__c,\n// //         container_use__c: '配餐',\n// //         project_number__c: item.config_project_number__c,\n// //         cupboard_number__c: item.config_cabinet_number__c,\n// //         mes_id__c: Number(item.mes_id__c),\n// //         demand_number__c: Number(item.mes_demand_quantity__c),\n// //         curr_boxnum__c: Number(item.remark_number__c), // ??????????????????????????????????\n// //         material_code__c: item.material_code__c,\n// //         material_name__c: item.material_name__c,\n// //         specifications__c: item.specifications__c,\n\n// //         ...baseInfo\n// //     }\n// //     await broker.call('@pc_auto_config_record__c.insert', { doc: newDoc });\n// // })\n\n\n// // newArr.forEach(async function (element) {\n// //     if (element.status__c === \"已完成\") {\n// //         await broker.call('@pc_his_auto_config_relation__c.insert', { doc: { ...element, _id: null, time__c: time } });\n// //         await broker.call('@pc_auto_config_relation__c.delete', { id: element._id });\n// //     }\n// });\n\n\n\n\n\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "b119746f0d8dc2b3",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "7b33d4c90a8224f6"
            ]
        ]
    },
    {
        "id": "7b33d4c90a8224f6",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "堆垛机历史任务",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n \n\n// 处理erp-数据详情表、name='已上架'\n\nconst routeEnter = (await broker.call('@pc_wcs_route__c.find')).filter(item => item.carry_over__c === '搬运结束')\n\nconst outOfStock = await broker.call('@pc_wcs_out_route__c.find');\nconst routeOuter = outOfStock.filter(item => item.return_to_storage__c === '已完成' || item.return_to_storage__c === '下线');\n\nconst Stacker = await broker.call('@pc_wcs_stacker__c.find')\nconst stacker = Stacker.filter(item => item.done__c === '入库完成' || item.done__c === '出库完成');  // 查询字符串是否包含完成\n// const stackerOuter = Stacker.filter(item => item.done__c === '出库完成');\n\n\nif (stacker.length) {\n    stacker.forEach(async function(element) {\n        await broker.call('@pc_wcs_stacker_his__c.insert', { doc: { ...element, _id: null, } });\n        await broker.call('@pc_wcs_stacker__c.delete', { id: element._id });\n    });\n} \n\nif (routeEnter.length){\n    routeEnter.forEach(async function (element) {\n\n        await broker.call('@pc_wcs_route_his__c.insert', { doc: { ...element, _id: null, } });\n        await broker.call('@pc_wcs_route__c.delete', { id: element._id });\n    });\n}\n\n\nif (routeOuter.length) {\n    routeOuter.forEach(async function (element) {\n\n        await broker.call('@pc_wcs_out_route_his__c.insert', { doc: { ...element, _id: null, } });\n        await broker.call('@pc_wcs_out_route__c.delete', { id: element._id });\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "c3005f8dd08c82df"
            ]
        ]
    },
    {
        "id": "c3005f8dd08c82df",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 280,
        "wires": []
    },
    {
        "id": "7afc82b21923285e",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "重新回库字段为下线 需要删除WCS出库数据",
        "info": "",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "24ed41e75af43277",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "所有信号需要循环",
        "info": "",
        "x": 310,
        "y": 40,
        "wires": []
    },
    {
        "id": "81c603e3d8dd5d06",
        "type": "steedos-instance",
        "z": "56c65c5ed4298456",
        "broker": "1b401c580bd65205",
        "name": "broker",
        "topic": "broker",
        "location": "flow",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "c1c53f10973c0a2b",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 780,
        "wires": [
            [
                "be8af0fa84a14550"
            ]
        ]
    },
    {
        "id": "be8af0fa84a14550",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "立库货架表 - 查询方式测试",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n\nconst rs = await broker.call('@pc_auto__c.find', {\n    // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n    filters: [['status__c', '=', '占用']],\n    top: 8,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    sort: 'row__c desc col__c desc'\n});\n// node.warn(rs.length);\nnode.warn(rs.forEach(v => node.warn(v)));\n\n// rs.forEach(async function(element) {\n//     node.warn(element);\n//     await broker.call('@pc_auto__c.update', {\n//         id: element._id, doc: {\n//             status__c: '空',\n//             con__c: \"空\", // 用PLC上报的托盘号获取的\n//         }\n//     });\n// });\n \n\n// const rs = await broker.call('@pc_auto__c.find', {\n//     filters: [['status__c', '=', '空']],\n//     top: 30,\n//     // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//     // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//     sort: 'row__c asc'\n// });\n// node.warn(rs.forEach(v => node.warn(v)));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "22b9fc792373a855"
            ]
        ]
    },
    {
        "id": "22b9fc792373a855",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 780,
        "wires": []
    },
    {
        "id": "5b3b680934042a82",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "手持机普通库上架后 ERP-数据详情表name=\"已上架\"",
        "info": "",
        "x": 1130,
        "y": 100,
        "wires": []
    },
    {
        "id": "6b3e30cea68c0477",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库  P22107",
        "info": "",
        "x": 290,
        "y": 940,
        "wires": []
    },
    {
        "id": "7abcc191a1ef4b2b",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 980,
        "wires": [
            [
                "4db1b3ec7e128199"
            ]
        ]
    },
    {
        "id": "4db1b3ec7e128199",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    // filters: [['project_number__c', '=', 'P22107'], ['container_number__c','=', \"\"]],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    sort: 'project_number__c asc'\n});\n\n// node.warn(rs);\n\nconst length = rs.slice(70, 97)\nnode.warn(length);\n\n// // node.warn(rs.forEach(v => node.warn(v)));\n// length.forEach(async function(element) { \n//     const rc = await broker.call('@pc_auto__c.find', {\n//         // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n//         filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n//         // top: 8,\n//         // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n//         // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n//         // sort: 'row__c desc col__c desc'\n//     });\n//     // node.warn(rc[0]);\n//     if(rc.length){\n//         const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n//         // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n//         var plctask = \"\"\n//         let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n//         for (let i = 0; i < 5; i++) {\n//             let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n//             plctask += chars[index]\n//         }\n\n//         let startLoc = '';\n//         startLoc += `0${row__c}`;\n//         startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n//         startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n//         startLoc += '0000';\n\n\n\n//         // // 写入一条WCS出库任务、优先级\n//         await broker.call('@pc_wcs_out_route__c.insert', {\n//             doc: {\n//                 time__c: time,\n//                 types__c: '出库',\n//                 container_use__c: '原料',     //   原料   配餐   \n//                 box_quantity__c: \"无\",\n//                 pallet_number__c: Pallet, // WCS获取的托盘号\n//                 plctask_number__c: plctask, // 下发任务号 生成\n//                 start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n//                 dest_loc__c: '下线',        //    拣选区    投料区    \n//                 return_to_storage__c: \"未开始\",\n\n//                 ...baseInfo\n//             }\n//         });\n\n//         // 往堆垛机表中写一条数据\n//         // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n//         await broker.call('@pc_wcs_stacker__c.insert', {\n//             doc: {\n//                 time__c: time,\n//                 pallet_id__c: Pallet,\n//                 plctask__c: plctask,\n//                 loc_start__c: startLoc,\n//                 loc_dest__c: '',\n//                 cmdtype__c: '出库',\n//                 status__c: '',\n//                 pri__c: '1',    // 配餐出库优先\n\n//                 ...baseInfo\n//             }\n//         });\n//     }\n// });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 980,
        "wires": [
            [
                "e8c1b768aeab7a28"
            ]
        ]
    },
    {
        "id": "e8c1b768aeab7a28",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 980,
        "wires": []
    },
    {
        "id": "12eeed247b0f1846",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库 P22088",
        "info": "",
        "x": 290,
        "y": 1060,
        "wires": []
    },
    {
        "id": "d0442cca0e9cf3fc",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "20ca1c586c8ed812"
            ]
        ]
    },
    {
        "id": "20ca1c586c8ed812",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22088']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1100,
        "wires": [
            [
                "52fa30db1c623e4b"
            ]
        ]
    },
    {
        "id": "52fa30db1c623e4b",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b6af15204dd3ccc3",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库 P22093",
        "info": "",
        "x": 290,
        "y": 1160,
        "wires": []
    },
    {
        "id": "09cb1d1f546bd8a6",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1200,
        "wires": [
            [
                "deab92ecede1b998"
            ]
        ]
    },
    {
        "id": "deab92ecede1b998",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22093']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1200,
        "wires": [
            [
                "aaf7270ede0b651c"
            ]
        ]
    },
    {
        "id": "aaf7270ede0b651c",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a31f69cc14e187b7",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库 P22085",
        "info": "",
        "x": 290,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4a7446c54a97fa46",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "61874fb444325a27"
            ]
        ]
    },
    {
        "id": "61874fb444325a27",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22085']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": [
            [
                "2d4e48d771145874"
            ]
        ]
    },
    {
        "id": "2d4e48d771145874",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1300,
        "wires": []
    },
    {
        "id": "6025a2a6fc58ba3d",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "ERP数据详情表中新数据更新时间",
        "func": "const broker = flow.get('broker');\nconst time = global.get('moment')(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\n\n\nnode.warn(time);\n\nconst rs = await broker.call('@pc_erp_data__c.find', { filters: [['time__c', '=', undefined]]});\nnode.warn(rs);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4b5a52c826668748",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "6025a2a6fc58ba3d"
            ]
        ]
    },
    {
        "id": "8b77c9b818940deb",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库 P22107-Z33",
        "info": "",
        "x": 300,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5daf8b1b90bccc02",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "51efe23480994945"
            ]
        ]
    },
    {
        "id": "51efe23480994945",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22107-Z33']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\n// return\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1400,
        "wires": [
            [
                "e1df47a14cb645e3"
            ]
        ]
    },
    {
        "id": "e1df47a14cb645e3",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 82",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1400,
        "wires": []
    },
    {
        "id": "82b7b6a2aa093223",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库 P22107-Z55",
        "info": "",
        "x": 300,
        "y": 1460,
        "wires": []
    },
    {
        "id": "0b6822b612a556a8",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1500,
        "wires": [
            [
                "ce6e831befddda87"
            ]
        ]
    },
    {
        "id": "ce6e831befddda87",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22107-Z55']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\n// return\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1500,
        "wires": [
            [
                "6d9820eefab55410"
            ]
        ]
    },
    {
        "id": "6d9820eefab55410",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1500,
        "wires": []
    },
    {
        "id": "51feb7a04095e97c",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "待上架原料表 - 是否完成 = 已完成",
        "info": "",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "eeb969e8baaf4b84",
        "type": "comment",
        "z": "56c65c5ed4298456",
        "name": "出库P22110",
        "info": "",
        "x": 290,
        "y": 1560,
        "wires": []
    },
    {
        "id": "609b2c67c49fbd82",
        "type": "inject",
        "z": "56c65c5ed4298456",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "ebee8de8ec8cb9c8"
            ]
        ]
    },
    {
        "id": "ebee8de8ec8cb9c8",
        "type": "function",
        "z": "56c65c5ed4298456",
        "name": "货位查找",
        "func": "const broker = flow.get('broker');\nconst moment = global.get('moment')\nconst time = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\nconst spaceId = \"61c51b8f4cada30031994f3d\";\nconst userId = \"63dc7de4902db72a48e718f2\";\nconst baseInfo = { space: spaceId, created: new Date(), created_by: userId, owner: userId, }\n\n\n \n\nconst rs = await broker.call('@pc_auto_record__c.find', {\n    filters: [['project_number__c', '=', 'P22110']],\n    // top: 20,\n    // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n    // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n    // sort: 'row__c asc'\n});\n\n// node.warn(rs.forEach(v => node.warn(v)));\n// return\nrs.forEach(async function(element) { \n    const rc = await broker.call('@pc_auto__c.find', {\n        // filters: [['status__c', '=', '占用'], ['con__c','=','L9999']],\n        filters: [['status__c', '=', '占用'],['con__c', '=', element.container_number__c ]],\n        // top: 8,\n        // sort: 'col__c asc', //  1排1列 1-10 层     2排1列 1-10 层   第1排2列 1-9 层\n        // sort: 'col__c desc', // 1排94列 1-10层    2排94列 1-10层\n        // sort: 'row__c desc col__c desc'\n    });\n    // node.warn(rc[0]);\n    if(rc.length){\n        const { row__c, col__c, lay__c, con__c: Pallet } = rc[0];  // 1\n\n        // const { row__c, col__c, lay__c, container_number__c: Pallet } = element; // 2\n\n\n        var plctask = \"\"\n        let chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"G\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]\n        for (let i = 0; i < 5; i++) {\n            let index = Math.ceil(Math.random() * 25) // [0, 1) * 9 = [0, 9]\n            plctask += chars[index]\n        }\n\n        let startLoc = '';\n        startLoc += `0${row__c}`;\n        startLoc += col__c < 10 ? `0${col__c}` : `${col__c}`;\n        startLoc += lay__c < 10 ? `0${lay__c}` : `${lay__c}`;\n        startLoc += '0000';\n\n\n\n        // // 写入一条WCS出库任务、优先级\n        await broker.call('@pc_wcs_out_route__c.insert', {\n            doc: {\n                time__c: time,\n                types__c: '出库',\n                container_use__c: '原料',     //   原料   配餐   \n                box_quantity__c: \"无\",\n                pallet_number__c: Pallet, // WCS获取的托盘号\n                plctask_number__c: plctask, // 下发任务号 生成\n                start_loc__c: startLoc, // 起始位置 从PLC上报的开始位置\n                dest_loc__c: '下线',        //    拣选区    投料区    \n                return_to_storage__c: \"未开始\",\n\n                ...baseInfo\n            }\n        });\n\n        // 往堆垛机表中写一条数据\n        // 将托盘号、下发任务号、起始位置、终点位置写到堆垛机表中\n        await broker.call('@pc_wcs_stacker__c.insert', {\n            doc: {\n                time__c: time,\n                pallet_id__c: Pallet,\n                plctask__c: plctask,\n                loc_start__c: startLoc,\n                loc_dest__c: '',\n                cmdtype__c: '出库',\n                status__c: '',\n                pri__c: '1',    // 配餐出库优先\n\n                ...baseInfo\n            }\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1600,
        "wires": [
            [
                "1278911d22abc097"
            ]
        ]
    },
    {
        "id": "1278911d22abc097",
        "type": "debug",
        "z": "56c65c5ed4298456",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1600,
        "wires": []
    }
]